VSCODE prompt-files
https://www.youtube.com/watch?v=9NKNNHCsykQ
https://code.visualstudio.com/docs/copilot/customization/prompt-files


---
mode: 'agent'
model: GPT-4o
tools: ['githubRepo', 'search/codebase']
description: 'Generate a new React form component'
---
Your goal is to generate a new React form component based on the templates in #githubRepo contoso/react-templates.

Ask for the form name and fields if not provided.

Requirements for the form:
* Use form design system components: [design-system/Form.md](../docs/design-system/Form.md)
* Use `react-hook-form` for form state management:
* Always define TypeScript types for your form data
* Prefer *uncontrolled* components using register
* Use `defaultValues` to prevent unnecessary rerenders
* Use `yup` for validation:
* Create reusable validation schemas in separate files
* Use TypeScript types to ensure type safety
* Customize UX-friendly validation rules


webapp.prompt.md
---
mode: 'agent'
model: Claude Sonnet 4.5 
---

# Web Application

## Objective 

Build a browser-based application, using [framework library]. The application should allow users to [define scope].

## Requirements:
- The application must be build using web technologies (HTML,CSS,Javascript)
- It should utilize [define framework].
- Users must be able to [].
- Application should support [].
- It must provide a user-friendly interface for creating [].
- the browser based app shoud let user:
  1. Write and edit [].
  2. Export [].

## Implementation Details:
- Library: []
- Framework: Vanilla JS + Vite (or Next.js static export) + Typescript.

## Deliverables:
- A fully functional web application that meets the above requirements.
- Source code in /src with Typescript types.
- A README.md file with setup and usage instruction.
- Comments in the code explaining key sections and logic.


----------------------------------------------

Design a scalable web application architecture for an e-commerce platform that needs to handle 10,000 concurrent users during peak shopping periods. Your architecture should include a detailed database design with proper normalization, effective caching strategies using Redis or Memcached, load balancers, CDN integration, payment processing systems, inventory management, user authentication and authorization, session management, and monitoring tools. Explain the key components, their interactions, data flow between services, and how the system maintains performance and reliability under high traffic loads while ensuring secure transactions.











 