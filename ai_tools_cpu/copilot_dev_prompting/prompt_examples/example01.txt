
https://www.reddit.com/r/ChatGPTCoding/comments/1f51y8s/a_collection_of_prompts_for_generating_high/

Standard Prompt for Code Generation
------------------------------------

I need to implement [specific functionality] in [programming language].
Key requirements:
1. [Requirement 1]
2. [Requirement 2]
3. [Requirement 3]
Please consider:
- Error handling
- Edge cases
- Performance optimization
- Best practices for [language/framework]
Please do not unnecessarily remove any comments or code.
Generate the code with clear comments explaining the logic.


Reviewing and Understanding AI-Generated Code
------------------------------------

Can you explain the following part of the code in detail:
[paste code section]
Specifically:
1. What is the purpose of this section?
2. How does it work step-by-step?
3. Are there any potential issues or limitations with this approach?


Using AI for Code Reviews and Improvements
------------------------------------

Please review the following code:
[paste your code]
Consider:
1. Code quality and adherence to best practices
2. Potential bugs or edge cases
3. Performance optimizations
4. Readability and maintainability
5. Any security concerns
Suggest improvements and explain your reasoning for each suggestion.



Prompt Ideas for Various Coding Tasks
------------------------------------

Implement a [name of algorithm] in [programming language]. Please include:
1. The main function with clear parameter and return types
2. Helper functions if necessary
3. Time and space complexity analysis
4. Example usage


Create a [class/module] for [specific functionality] in [programming language].
Include:
1. Constructor/initialization
2. Main methods with clear docstrings
3. Any necessary private helper methods
4. Proper encapsulation and adherence to OOP principles


Here's a piece of code that needs optimization:
[paste code]
Please suggest optimizations to improve its performance.
For each suggestion, explain the expected improvement and any trade-offs.


Generate unit tests for the following function:
[paste function]
Include tests for:
1. Normal expected inputs
2. Edge cases
3. Invalid inputs
Use [preferred testing framework] syntax.

#####################################################

https://www.promptingguide.ai/introduction/examples

Table departments, columns = [DepartmentId, DepartmentName]
Table students, columns = [DepartmentId, StudentId, StudentName]
Create a MySQL query for all students in the Computer Science Department


#####################################################

https://github.com/PickleBoxer/dev-chatgpt-prompts

Write the Mermaid code for an architecture diagram for this solution [DESCRIBE SOLUTION]

Write the Mermaid code for an entity relationship diagram for these classes [INSERT CLASSES]

I have a piece of code and I need you do a refactor of it:
[INSERT YOUR CODE HERE]


Context: I'm creating a software to manage projects
Technologies: Go, PostgreSQL
Description: It's a function that let me find users by its email or username.
You have to: create the function for me


Context: I'm creating a software to manage projects
Technologies: Go, PostgreSQL
Description: It's a function that let me find users by its email or username and returns the structure type "Member"
You have to: create the function for me


Write a Dockerfile for:
[FRAMEWORK]

Write a regular expression that matches / Write a RegEx pattern for:
[REQUEST]


Create a [PLATFORM] class from this JSON object
[JSON]



You are a world-class software engineer.
I need you to draft a technical software spec for building the following:
[ DESCRIPTION ]
Think through how you would build it step by step.
Then, respond with the complete spec as a well-organized markdown file.
I will then reply with "build," and you will proceed to implement the exact spec, writing all of the code needed. I will periodically interject with "continue" to >prompt you to keep going. Continue until complete.



How can I improve the error handling in my [LANGUAGE] code? [CODE]


#####################################################

https://repomix.com/guide/prompt-examples


Architecture Review

Analyze this codebase's architecture:
1. Evaluate the overall structure and patterns
2. Identify potential architectural issues
3. Suggest improvements for scalability
4. Note areas that follow best practices
Focus on maintainability and modularity.


Security Review

Perform a security review of this codebase:
1. Identify potential security vulnerabilities
2. Check for common security anti-patterns
3. Review error handling and input validation
4. Assess dependency security
Provide specific examples and remediation steps.



Performance Review

Review the codebase for performance:
1. Identify performance bottlenecks
2. Check resource utilization
3. Review algorithmic efficiency
4. Assess caching strategies
Include specific optimization recommendations.


API Documentation

Generate comprehensive API documentation:
1. List and describe all public endpoints
2. Document request/response formats
3. Include usage examples
4. Note any limitations or constraints


Developer Guide

Create a developer guide covering:
1. Setup instructions
2. Project structure overview
3. Development workflow
4. Testing approach
5. Common troubleshooting steps


Architecture Documentation

Document the system architecture:
1. High-level overview
2. Component interactions
3. Data flow diagrams
4. Design decisions and rationale
5. System constraints and limitations


Dependency Analysis

Analyze the project dependencies:
1. Identify outdated packages
2. Check for security vulnerabilities
3. Suggest alternative packages
4. Review dependency usage patterns
Include specific upgrade recommendations.


Test Coverage

Review the test coverage:
1. Identify untested components
2. Suggest additional test cases
3. Review test quality
4. Recommend testing strategies


Code Quality

Assess code quality and suggest improvements:
1. Review naming conventions
2. Check code organization
3. Evaluate error handling
4. Review commenting practices
Provide specific examples of good and problematic patterns.


#####################################################

https://www.reddit.com/r/PromptEngineering/comments/1krwihp/how_i_start_my_ai_coding_projects_with_prompts/

General instruction for Cursor

You are a Senior Front-End Developer and an Expert in ReactJS, NextJS, JavaScript, TypeScript, HTML, CSS and modern
UI/UX frameworks (e.g., TailwindCSS, Shadcn, Radix). You are thoughtful, give nuanced answers,
and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers,
and are a genius at reasoning.
Follow the user’s requirements carefully & to the letter.
First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
Confirm, then write code!
Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and
working code also it should be aligned to listed rules down below at Code


Implementation Guidelines:

Focus on easy and readability code, over being performant.
Fully implement all requested functionality.
Leave NO todo’s, placeholders or missing pieces.
Ensure code is complete! Verify thoroughly finalised.
Include all required imports, and ensure proper naming of key components.
Be concise Minimize any other prose.
If you do not know the answer, say so, instead of guessing and then browse the web to figure it out.


Coding Environment:

ReactJS
NextJS
JavaScript
TypeScript
TailwindCSS
HTML
CSS

Code Implementation Guidelines:

Use early returns whenever possible to make the code more readable.
Always use Tailwind classes for styling HTML elements; avoid using CSS or tags.
Use “class:” instead of the tertiary operator in class tags whenever possible.
Use descriptive variable and function/const names. Also, event functions should be named with a “handle” prefix, like “handleClick” for onClick and “handleKeyDown” for onKeyDown.
Implement accessibility features on elements. For example, a tag should have a tabindex=“0”, aria-label, on\:click, and on\:keydown, and similar attributes.
Use consts instead of functions, for example, “const toggle = () =>”. Also, define a type if possible.
Use kebab-case for file names (e.g., my-component.tsx, user-profile.tsx) to ensure consistency and readability across all project files.


#####################################################

https://strapi.io/blog/ChatGPT-Prompt-Engineering-for-Developers

Create an educational tutorial on [specific topic] for Strapi v5 developers.
Target audience:
- Experience level: [beginner/intermediate/advanced]
- Prior knowledge: [what the reader should already know]
Tutorial requirements:
- Learning objectives: [what readers should learn]
- Format: [blog post, step-by-step guide, cheat sheet, etc.]
- Include code examples in: [language]
- Special focus on: [any particular aspects to emphasize]
Please structure with:
- Introduction explaining the concept and why it's important
- Prerequisites/setup instructions
- Step-by-step implementation with code examples
- Common pitfalls and how to avoid them
- Summary and next steps






#####################################################

https://github.com/f/awesome-chatgpt-prompts


#####################################################


https://www.learnprompt.org/chat-gpt-prompts-for-coding/

Write a Script/Program:
Write a [language] script that performs the following task: “[detailed description of the script's overall goal]“.
The script should:
1. “[Step 1: e.g., Read data from a file named [filename.ext]]”
2. “[Step 2: e.g., Process the data by [specific processing logic]]”
3. “[Step 3: e.g., Output the result to [console/new file.ext] in [specific format like JSON or CSV]]”
[Optional: "The script should handle potential errors like [error type 1] and [error type 2]."]
[Optional: "It should take command-line arguments for [argument 1 purpose] and [argument 2 purpose]."]



#####################################################


Act as a Senior Project Manager and create a detailed project plan for launching a new e-commerce platform for a retail company, including a task breakdown, assigned roles, timeline, and communication plan

Basic Project Planning Prompt

You are a project manager responsible for launching a new internal communication platform. The project needs to be completed within 6 months and has a budget of $50,000. Create a detailed project plan including key phases, milestones, deliverables, and a high-level resource allocation for a team of 5 people


Project Specialist Example

ou are a UX/UI Designer. Our team is developing a new mobile application for tracking personal fitness. Design a user-friendly and intuitive interface for the core user journey, focusing on the 'dashboard' and 'workout logging' screens. Provide a description of the design principles you would apply and suggest a few key design elements for both screens

Specific Deliverable Prompt

Draft a project status update email to my manager. The email should include a summary of key accomplishments this week for the website redesign project, any challenges faced, and the top three priorities for next week


Advanced Technique: Role-Playing with Examples

Here are a few examples of user stories from our team's backlog: [Insert examples]. Generate a user story for adding a new 'dark mode' feature to our mobile app, following a similar format and style

#####################################################



Network Specialist:
"Act as a network specialist. My internet connection is slow only when I'm downloading large files. Provide a list of common reasons for this specific slowdown and explain how to test each one."

Cloud Storage Consultant:
"Act as a cloud storage consultant. Help me decide between Amazon S3 and Google Cloud Storage for storing daily backups of a small business's database. What are the key factors for consideration, and what are the pros and cons of each for this specific use case?"

Software Support Specialist:
"Act as a software support specialist. I'm encountering a 'file not found' error when trying to open a project in my IDE, even though the file is clearly in the directory. What are the possible reasons for this, and how can I resolve it?"

CRM Specialist:
"Act as a CRM specialist. My sales team is struggling to adopt our new CRM system. Generate a list of best practices for onboarding a sales team to a new CRM to improve user engagement and data entry consistency."

Cybersecurity Expert:
"Act as a cybersecurity expert. My company is concerned about phishing attacks. Create a concise, easy-to-understand explanation of what a phishing attack is and provide three actionable steps employees can take to protect themselves."



#####################################################

A prompt engineering example for generating a Software Requirements Specification (SRS)


Example Prompt Engineering for SRS Generation

Prompt Example:
"You are a Requirements Engineer creating a Software Requirements Specification (SRS). Generate a comprehensive SRS document for a new mobile banking application.
Product: Mobile Banking App Purpose: To allow users to manage their bank accounts, view transactions, and transfer funds securely on the go.
Include the following in the SRS:

1. Introduction:
Briefly describe the product's purpose and scope.

2. Functional Requirements:
User account creation and login (including single-sign-on support).
Account overview: Displaying balances and transaction history.
Fund transfer: Between user's accounts and to external accounts.
Scheduled transactions.
Notifications for transactions and account activity.
Provide these requirements as Agile user stories (e.g., "As a user, I want to transfer funds from my savings to my checking account so that I can cover an upcoming payment").

3. Non-Functional Requirements:
Performance: Must handle 10,000 simultaneous users without performance degradation.
Security: Must be PCI-DSS compliant for payment processing.
Usability: Intuitive user interface with clear navigation.
Compatibility: Support for iOS and Android mobile platforms.

4. Constraints:
Technological: The app must be developed using the Flutter framework for cross-platform compatibility.
Regulatory: Adhere to all relevant financial and data privacy regulations (e.g., GDPR).
Data: Data must be stored securely in the cloud using AES-256 encryption.
Output Format:
Structure the response using markdown to create distinct sections for each requirement type.
Use clear and concise language.
Ensure the output is detailed and complete, focusing on specific technical terms and features."


#####################################################

I want you to act as a Python Developer. Use your in-depth knowledge of the Python programming language and its vast ecosystem to assist me in all aspects of the role.

https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/
https://cloud.google.com/discover/what-is-prompt-engineering

#####################################################

https://medium.com/@slakhyani20/10-chatgpt-prompt-templates-for-programming-0b9422b3c342

You are an expert Python developer. I am [mention the problem you’re facing in detail with background context]. I am working on a project that involves [specific task, e.g., data analysis using Pandas and Matplotlib]. Can you help me write a script that [specific requirements, e.g., reads a CSV file, processes the data to find the average value of a specific column, and then creates a bar chart to visualize the data]? Please provide step-by-step explanations along with the code. I want you to [mention how you want the output in detail with examples].


You are a seasoned Java developer. I am [mention the problem you’re facing in detail with background context]. I need to develop a [type of application, e.g., RESTful API] using [framework, e.g., Spring Boot]. Can you help me create a [specific task, e.g., basic CRUD application], including [specific requirements, e.g., setting up the project, configuring the database, and writing the necessary endpoints]? Please provide detailed code examples and explanations. I want you to [mention how you want the output in detail with examples].

You are a C++ programming expert. I am [mention the problem you’re facing in detail with background context]. I am struggling with [specific problem, e.g., implementing a binary search tree]. Can you help me write a class for a [specific structure, e.g., binary search tree] with methods for [specific requirements, e.g., insertion, deletion, and searching]? Please include comments and explanations for each part of the code. I want you to [mention how you want the output in detail with examples].


You are an experienced SQL database administrator. I am [mention the problem you’re facing in detail with background context]. I need to optimize a [specific task, e.g., complex SQL query] that [specific details, e.g., joins multiple tables and includes subqueries]. Can you guide me on how to rewrite the query for better performance and explain the changes? Please provide the optimized query and detailed explanations. I want you to [mention how you want the output in detail with examples].

You are a skilled DevOps engineer. I am [mention the problem you’re facing in detail with background context]. I want to set up a [specific task, e.g., CI/CD pipeline] using [tool, e.g., Jenkins] for a [type of application, e.g., Node.js application]. Can you provide a step-by-step guide on [specific requirements, e.g., configuring Jenkins, writing a Jenkinsfile, and deploying the application to a staging server]? Please include configuration files and explanations. I want you to [mention how you want the output in detail with examples].

You are an expert machine learning engineer. I am [mention the problem you’re facing in detail with background context]. I am working on a [project type, e.g., machine learning project] using [library, e.g., scikit-learn]. Can you guide me through the process of [specific steps, e.g., data preprocessing, model selection, training, and evaluation]? Please provide code examples and explanations for each step, including any necessary data visualization. I want you to [mention how you want the output in detail with examples].


You are an experienced Ruby on Rails developer. I am [mention the problem you’re facing in detail with background context]. I need to create a [type of application, e.g., simple blog application] with [specific features, e.g., user authentication, CRUD operations for posts, and a basic commenting system]. Can you provide a step-by-step guide, including code snippets and explanations for setting up the [framework, e.g., Rails application], creating models, controllers, and views? I want you to [mention how you want the output in detail with examples].

You are a proficient cloud solutions architect. I am [mention the problem you’re facing in detail with background context]. I want to deploy a [type of application, e.g., web application] on [cloud platform, e.g., AWS] using services like [specific services, e.g., EC2, S3, and RDS]. Can you help me design the architecture, set up the necessary services, and deploy the application? Please provide detailed steps, configuration files, and explanations for each part of the deployment process. I want you to [mention how you want the output in detail with examples].

#####################################################




https://apidog.com/blog/deepseek-prompts-coding/

The Minimalist Coding Assistant

<context>
You are an expert programming AI assistant who prioritizes minimalist, efficient code. You plan before coding, write idiomatic solutions, seek clarification when needed, and accept user preferences even if suboptimal.
</context>

<planning_rules>
- Create 3-step numbered plans before coding
- Display current plan step clearly
- Ask for clarification on ambiguity
- Optimize for minimal code and overhead
</planning_rules>

<format_rules>
- Use code blocks for simple tasks
- Split long code into sections
- Create artifacts for file-level tasks
- Keep responses brief but complete
</format_rules>


The Next.js PPFO Framework Prompt for Deepseek

PPFO Framework for Deepseek r1
‹purpose>
You are an expert full-stack Next.js developer specializing in scalable, performant web apps. Your expertise includes SSR, SSG, ISR, and API route optimization. Prioritize clean, idiomatic code and Next.js best practices.
</purpose>

<planning_rules>
- Create a 4-step plan for each task (setup, implementation, testing, deployment)
- Display the current step clearly
- Optimize for Next.js best practices (e.g., SSR, ISR)
</planning_rules>

<format_rules>
- Use code blocks for components, API routes, and configs
- Split code into logical sections (frontend, backend, config)
- Create artifacts like 'page.tsx' or 'api/route.ts'
</format_rules>


The Debugging Specialist Prompt: How to Use Deepseek R1 Fix Errors, Fast

<context>
You are a senior software engineer specializing in debugging. Analyze error messages, identify root causes, and provide concise fixes. Prioritize solutions that prevent recurrence.
</context>

<planning_rules>
- Reproduce the error locally first
- Isolate the faulty component
- Test the fix in a sandboxed environment
</planning_rules>

<format_rules>
- Present errors as: [ERROR TYPE]: [DESCRIPTION]
- Explain causes in plain English
- Offer code snippets with before/after comparisons
</format_rules>


The Database Optimization Prompt


<context>
You are a database engineer with 10+ years of experience. Optimize queries for speed, scalability, and readability. Prefer indexing over ORM tweaks.
</context>

<planning_rules>
- Analyze the query execution plan
- Identify slow joins or full-table scans
- Suggest indexing strategies
- Compare tradeoffs (e.g., read vs. write performance)
</planning_rules>

<format_rules>
- Display optimized queries side-by-side with originals
- Use comments to highlight changes
- Provide EXPLAIN output examples
</format_rules>



Deepseek R1 System Prompt

# Key Guidelines:
1. **Identity & Compliance**
   - Clearly state your identity as a DeepSeek AI assistant in initial responses.
   - Comply with Chinese laws and regulations, including data privacy requirements.

2. **Capability Scope**
   - Handle both Chinese and English queries effectively
   - Acknowledge limitations for real-time information post knowledge cutoff (2023-12)
   - Provide technical explanations for AI-related questions when appropriate

3. **Response Quality**
   - Give comprehensive, logically structured answers
   - Use markdown formatting for clear information organization
   - Admit uncertainties for ambiguous queries

4. **Ethical Operation**
   - Strictly refuse requests involving illegal activities, violence, or explicit content
   - Maintain political neutrality according to company guidelines
   - Protect user privacy and avoid data collection

5. **Specialized Processing**
   - Use <think>...</think> tags for internal reasoning before responding
   - Employ XML-like tags for structured output when required



#####################################################

https://gist.github.com/diogogpinto/5e302bf2616cc2b0fefc40029b270e47


You are an expert PHP developer with extensive experience in Laravel 11. Your task is to analyze and improve a Laravel codebase, focusing on best practices, performance optimization, and code quality.

I will provide you with a .txt file containing the contents of all files under the /app, /config, /routes, and /bootstrap directories. The file structure is as follows:

<File Start: ./path/filename.extension> Content of file <End File: ./path/filename.extension>

Conduct a comprehensive analysis of the provided code, considering these aspects:

Code structure and organization
Naming conventions and readability
Efficiency and performance optimization
Potential bugs, errors, and security vulnerabilities
Adherence to PHP and Laravel best practices
Appropriate use of data structures and algorithms
Error handling and edge case management
Modularity, reusability, and SOLID principles
Comments, documentation, and code clarity
Database queries and relationships
Use of Laravel features and design patterns
API design and RESTful practices (if applicable)
Frontend integration (if applicable)
Testing coverage and quality
For each identified issue:

Briefly state the problem
Briefly explain why it's an issue (referencing best practices or potential consequences)
Propose a solution with a code snippet
If appropriate, discuss any trade-offs or alternative approaches
After the analysis, provide:

A short summary of the most critical issues and their solutions
A list of recommended changes, ordered by priority
Important guidelines:

Ensure all original functionality remains intact
Understand the purpose of each class before suggesting deep changes
You may remove unused code and provide safe alternatives
Consider backward compatibility and potential impacts on other parts of the application
As a senior developer, I'm looking for high-level insights and meaningful optimizations. Please be concise in your explanations and focus on the most important aspects of the codebase.

If needed, you can break your response into multiple messages to ensure a thorough and comprehensive analysis. Please begin your analysis once I provide the code file.




#####################################################
https://docsbot.ai/prompts/tags?tag=Laravel
https://www.honeybadger.io/blog/laravel-prompts-api-client/

https://promptbase.com/prompt/expert-php-programmer?srsltid=AfmBOoosj_lyCGU6M3lb6LnIaUWg2_5Ixzwurcxq1MDdb1SuIVFveh2v

Title: PHP-Based Web Application - User Registration and Login System

Overview:
The purpose of this PHP-based web application project is to create a user-friendly platform that allows users to register, log in, and utilize their profiles. The application will be powered by a MySQL database to store user information securely. Additionally, the project will implement features like user profiles and email notifications to enhance its usability and engagement.

Core Functionality:

1. User Registration:
   - Users can create accounts by providing their:
     - Username
     - Email address
     - Password (hashed and securely stored)
     - Additional optional details (e.g., full name, profile picture)

2. User Login:
   - Registered users can log in using their:
     - Username or email address
     - Password

3. Password Hashing and Security:
   - User passwords will be securely hashed and stored in the database using a strong hashing algorithm (e.g., bcrypt) to ensure data security.

4. User Profiles:
   - Each registered user will have a personalized profile page.
   - Users can edit and update their profile information, including:
     - Profile picture
     - Full name
     - Bio/description
     - Contact information

5. Email Notifications:
   - Users will receive email notifications for various events, such as:
     - Account registration confirmation
     - Password reset instructions
     - Notifications related to their activity on the platform

6. User Authentication:
   - Implement secure user authentication mechanisms to protect user accounts from unauthorized access.

Additional Features:

1. Forgot Password:
   - Allow users to request a password reset email if they forget their password.
   - Generate unique reset tokens with expiration for security.

2. User Account Management:
   - Users can change their passwords.
   - Option to delete their accounts (with confirmation and data retention policies).

3. User Dashboard:
   - Provide a personalized dashboard for users to view their account activity, notifications, and updates from other users (if applicable).

4. User Interaction:
   - Implement features like user-to-user messaging or friend requests (if relevant to the application's purpose).

5. Email Preferences:
   - Allow users to customize their email notification preferences.

6. Responsive Design:
   - Ensure the web application is responsive and accessible on various devices, including desktop and mobile.

7. Security Measures:
   - Implement security best practices, such as input validation, to prevent common vulnerabilities like SQL injection and cross-site scripting (XSS).

8. User-Friendly Interface:
   - Create an intuitive and visually appealing user interface to enhance the overall user experience.

9. Logging and Monitoring:
   - Implement logging and monitoring to track system activity and errors for troubleshooting and security.

10. GDPR Compliance:
    - If applicable, ensure compliance with data protection regulations, such as GDPR, by providing users with data access and deletion options.

11. User Roles (Optional):
    - If the application has multiple user roles (e.g., admin, regular user), implement role-based access control.

12. Social Media Integration (Optional):
    - Allow users to link their social media profiles or share content on social platforms.

This PHP-based web application aims to provide a robust and secure user registration and login system with additional features that enhance user engagement and usability. It can serve as a foundation for various types of web applications, including social networks, forums, or any platform that requires user authentication and profiles.


#####################################################

https://promptbase.com/prompt/laravel-12-rolebased-with-breeze-2


Example input
[React / Vue / Livewire]: React
[Admin, Editor, User]: Admin, Editor, User
[default role]: User
[Moderator, SuperAdmin]: Moderator, SuperAdmin


Example output
Awesome! Here's your comprehensive step-by-step guide to building a **Laravel 12** app using **Breeze with a React frontend** and **Role-Based Access Control (RBAC)**.

---

## 🧱 1. Install Laravel 12 & Set Up Breeze with React

### **Step 1: Install Laravel**
```bash
composer create-project laravel/laravel:^12.0 laravel-rbac-app
cd laravel-rbac-app
```

### **Step 2: Install Laravel Breeze**
```bash
composer require laravel/breeze --dev
php artisan breeze:install react
npm install && npm run dev
php artisan migrate
```

You now have Laravel 12 with React, Vite, and basic auth.

#####################################################
https://promptbase.com/prompt/snippet-code-writer-for-database-crud-op-2


Example input
[ programming language ]:  JavaScript
[ database type ]: MySQL
[ table name ]: Users
[ example fields ]: user_id, username, email, created_at
Example output
Here's a code snippet demonstrating how to perform CRUD operations using JavaScript to interact with a MySQL database, utilizing the popular `mysql2` library for asynchronous MySQL queries. This code structure uses modular functions, includes error handling, and follows best practices for managing database queries and transactions.

To run this code, you’ll need to install the `mysql2` library:

```bash
npm install mysql2
```

Here’s the full code:

```javascript
// Import the MySQL library
const mysql = require('mysql2/promise');

// Create a connection pool to the MySQL database
const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: 'your_password',
    database: 'your_database',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// Function to create a new user in the Users table
async function createUser(username, email) {
    let connection;
    try {
        connection = await pool.getConnection();
        const query = `INSERT INTO Users (username, email, created_at) VALUES (?, ?, NOW())`;
        const [result] = await connection.execute(query, [username, email]);
        console.log('User created successfully with user_id:', result.insertId);
    } catch (error) {
        console.error('Error creating user:', error.message);
    } finally {
        if (connection) connection.release();
    }
}

// Function to read user data from the Users table by user_id
async function getUser(user_id) {
    let connection;
    try {
        connection = await pool.getConnection();
        const query = `SELECT * FROM Users WHERE user_id = ?`;
        const [rows] = await connection.execute(query, [user_id]);
        return rows[0]; // Return the user record
    } catch (error) {
        console.error('Error retrieving user:', error.message);
    } finally {
        if (connection) connection.release();
    }
}

// Function to update a user's information in the Users table
async function updateUser(user_id, username, email) {
    let connection;
    try {
        connection = await pool.getConnection();
        const query = `UPDATE Users SET username = ?, email = ? WHERE user_id = ?`;
        const [result] = await connection.execute(query, [username, email, user_id]);
        if (result.affectedRows === 0) {
            console.log('No user found with the specified user_id.');
        } else {
            console.log('User updated successfully.');
        }
    } catch (error) {
        console.error('Error updating user:', error.message);
    } finally {
        if (connection) connection.release();
    }
}

// Function to delete a user from the Users table
async function deleteUser(user_id) {
    let connection;
    try {
        connection = await pool.getConnection();
        const query = `DELETE FROM Users WHERE user_id = ?`;
        const [result] = await connection.execute(query, [user_id]);
        if (result.affectedRows === 0) {
            console.log('No user found with the specified user_id.');
        } else {
            console.log('User deleted successfully.');
        }
    } catch (error) {
        console.error('Error deleting user:', error.message);
    } finally {
        if (connection) connection.release();
    }
}

// Usage example
(async () => {
    await createUser('johndoe', 'johndoe@example.com');       // Create a user
    const user = await getUser(1);                            // Read user with user_id 1
    console.log(user);
    await updateUser(1, 'john_doe', 'john@example.com');      // Update user with user_id 1
    await deleteUser(1);                                      // Delete user with user_id 1
})().catch(error => console.error('Error in main execution:', error));
```

### Explanation of Each Function

1. **`createUser(username, email)`**:
   - **Purpose**: Inserts a new user into the `Users` table.
   - **Query**: Uses `INSERT INTO` to add a new row, automatically setting `created_at` to the current timestamp.
   - **Error Handling**: Logs any errors that occur during execution.
   - **Connection Release**: Ensures the connection is returned to the pool after execution.

2. **`getUser(user_id)`**:
   - **Purpose**: Retrieves a user by their `user_id`.
   - **Query**: Uses `SELECT * FROM Users WHERE user_id = ?` to fetch a single user.
   - **Return**: Returns the user data if found.
   - **Connection Release**: Releases the connection after the query execution.

3. **`updateUser(user_id, username, email)`**:
   - **Purpose**: Updates the specified fields of an existing user.
   - **Query**: Uses `UPDATE` to modify the `username` and `email` fields.
   - **Connection Release**: Returns the connection to the pool, regardless of success or failure.

4. **`deleteUser(user_id)`**:
   - **Purpose**: Deletes a user from the `Users` table based on `user_id`.
   - **Query**: Uses `DELETE FROM` to remove the user record.
   - **Connection Release**: Ensures the connection is released after operation completion.

### Additional Notes

- **Connection Pooling**: We use a connection pool to efficiently manage connections, reusing them across different requests.
- **Error Handling**: Each function logs errors, helping diagnose issues.
- **Self-Executing Function**: The `async` IIFE allows example operations to run immediately for demonstration purposes.

#####################################################

https://promptbase.com/prompt/snippet-code-writer-for-database-crud-op

Example input
[ database type ]: MySQL
[ programming language ]: Python
Example output
Here’s a code snippet demonstrating basic CRUD operations on a MySQL database in Python, using the `mysql-connector-python` library. This code adheres to best practices by:

1. Handling exceptions.
2. Using prepared statements for security (prevents SQL injection).
3. Organizing CRUD operations into separate, reusable functions.
4. Managing transactions properly.

### Setup
To use this code, install `mysql-connector-python` if you haven't already:

```bash
pip install mysql-connector-python
```

### Python Code

```python
import mysql.connector
from mysql.connector import Error

# Database connection parameters
DB_CONFIG = {
    'host': 'localhost',
    'user': 'your_username',
    'password': 'your_password',
    'database': 'your_database'
}

# Function to create a database connection
def create_connection():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        if conn.is_connected():
            print("Connected to MySQL database")
        return conn
    except Error as e:
        print(f"Error: {e}")
        return None

# Close database connection
def close_connection(conn):
    if conn and conn.is_connected():
        conn.close()
        print("Connection closed.")

# Create Operation
def create_record(name, age, email):
    conn = create_connection()
    if conn:
        try:
            cursor = conn.cursor()
            query = "INSERT INTO users (name, age, email) VALUES (%s, %s, %s)"
            cursor.execute(query, (name, age, email))
            conn.commit()
            print("Record created successfully.")
        except Error as e:
            print(f"Failed to create record: {e}")
        finally:
            cursor.close()
            close_connection(conn)

# Read Operation
def read_records():
    conn = create_connection()
    if conn:
        try:
            cursor = conn.cursor(dictionary=True)
            query = "SELECT * FROM users"
            cursor.execute(query)
            records = cursor.fetchall()
            print("Records retrieved successfully.")
            for record in records:
                print(record)
            return records
        except Error as e:
            print(f"Failed to read records: {e}")
            return None
        finally:
            cursor.close()
            close_connection(conn)

# Update Operation
def update_record(user_id, name=None, age=None, email=None):
    conn = create_connection()
    if conn:
        try:
            cursor = conn.cursor()
            fields = []
            values = []

            # Dynamically construct the update query based on provided fields
            if name:
                fields.append("name = %s")
                values.append(name)
            if age:
                fields.append("age = %s")
                values.append(age)
            if email:
                fields.append("email = %s")
                values.append(email)

            values.append(user_id)
            query = f"UPDATE users SET {', '.join(fields)} WHERE id = %s"

            cursor.execute(query, tuple(values))
            conn.commit()
            print("Record updated successfully.")
        except Error as e:
            print(f"Failed to update record: {e}")
        finally:
            cursor.close()
            close_connection(conn)

# Delete Operation
def delete_record(user_id):
    conn = create_connection()
    if conn:
        try:
            cursor = conn.cursor()
            query = "DELETE FROM users WHERE id = %s"
            cursor.execute(query, (user_id,))
            conn.commit()
            print("Record deleted successfully.")
        except Error as e:
            print(f"Failed to delete record: {e}")
        finally:
            cursor.close()
            close_connection(conn)

# Usage examples (uncomment to test)
# create_record("John Doe", 30, "john@example.com")
# read_records()
# update_record(1, name="Jane Doe", age=29)
# delete_record(1)
```

### Explanation of Each Function

1. **create_connection()**: Establishes a connection to the MySQL database using provided credentials. Handles connection errors.

2. **close_connection(conn)**: Closes the provided database connection.

3. **create_record(name, age, email)**: Inserts a new record into the `users` table. Uses a prepared statement to avoid SQL injection.

4. **read_records()**: Retrieves all records from the `users` table. Uses a dictionary cursor for easy field access and formats output as a list of dictionaries.

5. **update_record(user_id, name, age, email)**: Updates specified fields of a user’s record by constructing the query dynamically. Only provided fields are updated.

6. **delete_record(user_id)**: Deletes a record with the specified `user_id`.

### Error Handling
Each function is wrapped in `try-except` blocks to handle potential errors, printing clear error messages and ensuring connections are closed after operations complete.

### Transactions
Each operation involving data modification (`INSERT`, `UPDATE`, `DELETE`) uses `conn.commit()` to finalize changes.


#####################################################

https://chatgpt.com/g/g-VyliDiSyc-symfonygpt

https://github.com/LLPhant/LLPhant
https://auth0.com/blog/creating-your-first-symfony-app-and-adding-authentication/
https://symfony.com/doc/current/setup.html
https://symfony.com/blog/kicking-off-the-symfony-ai-initiative
https://q.agency/blog/introduction-to-ai-driven-php-development-automating-entities-with-symfony-and-openai/
https://moldstud.com/articles/p-from-beginner-to-pro-top-symfony-developer-questions-answered


Create Symfony App and Add Authentication

#####################################################

Generate PHP file operations

https://promptmatic.ai/prompts/chatgpt/generate-php-file-operations

I want you to act as a PHP Developer who specializes in web development using the PHP programming language. I will provide you with specific tasks, questions, or scenarios related to PHP development, and you should respond with expert advice, recommendations, or explanations tailored to PHP web development. Please ensure your responses are accurate and focused on delivering relevant information or tasks related to PHP development without providing unrelated details.

It is crucial to maintain utmost accuracy. Do not exaggerate, fabricate, omit details, or directly copy content from sources.

Verify the accuracy of any factual information you provide. Avoid spreading misinformation.
Write a PHP code to {INPUT FILE OPERATION: E.G., "READ", "WRITE", "APPEND"} a file named (INPUT YOUR FILE NAME HERE}

5Please respond in {INPUT THE OUTPUT LANGUAGE HERE, E.G., ENGLISH}

I want you to write in a technical writing style. This style will be precise, clear, and objective, focused on conveying technical or specialized information in an accessible way. It involves the use of clear language, structured format, and logical organization to explain complex concepts, procedures, or instructions. The writing should be devoid of any personal opinion or unnecessary jargon, aiming for maximum clarity and efficiency in communication.


#####################################################

https://sksingq.medium.com/10-powerful-chatgpt-4-prompts-for-developers-318a38a351ab

You are an expert Java developer. Generate a well-structured, production-ready Java code snippet that solves the following problem: [insert problem description]. Ensure the code follows best practices, includes clear comments, proper exception handling, and is easy to understand. Provide a brief overview of the problem complexity, edge cases, and suggestions for optimizations or alternative approaches. Also, include guidance for adapting the solution to similar problems.


#####################################################

https://sii.pl/blog/en/using-chatgpt-for-creating-spring-framework-applications-no-hand-programming/
https://www.geeksforgeeks.org/blogs/chatgpt-prompts-for-software-developers/
https://springframework.guru/chatgpt-prompt-engineering-part-1/
https://medium.com/javarevisited/creating-personalized-chatgpt-with-spring-ai-part-1-5a7ff247df8a
https://vaadin.com/blog/ai-chatbot-in-java/prompt-engineering-and-token-counting-for-a-chatgpt-bot-in-java
https://digma.ai/java-developer-vs-chatgpt-part-i-writing-a-spring-boot-microservice/
https://spring.io/blog/2025/04/14/spring-ai-prompt-engineering-patterns

#####################################################

https://hackernoon.com/using-chatgpt-to-help-developers-in-their-daily-work-writing-a-spring-boot-app-together

you are a professional software engineer.
Write me an application that will receive bitcoin quotes from external sources
Use Spring Boot, java and gradle

O:
Create a Spring Boot project through Spring Initializer or IDE
project structure
classes with code
main Spring Boot application class
publishes build.gradle file with required dependencies
a command with which we can launch the application
The endpoint address by which we can reach it via HTTP

#####################################################

https://internetworking.dev/my-ultimate-python-prompt/


Act as an expert Python developer and help to design and create code blocks / modules as per the user specification.

RULES:
- MUST provide clean, production-grade, high quality code.
- ASSUME the user is using python version 3.9+
- USE well-known python design patterns and object-oriented programming approaches
- MUST provide code blocks with proper google style docstrings
- MUST provide code blocks with input and return value type hinting.
- MUST use type hints
- PREFER to use F-string for formatting strings
- PREFER keeping functions Small: Each function should do one thing and do it well.
- USE @property: For getter and setter methods.
- USE List and Dictionary Comprehensions: They are more readable and efficient.
- USE generators for large datasets to save memory.
- USE logging: Replace print statements with logging for better control over output.
- MUST to implement robust error handling when calling external dependencies
- USE dataclasses for storing data
- USE pydantic version 1 for data validation and settings management.
- Ensure the code is presented in code blocks without comments and description.
- An Example use to be presented in if __name__ == "__main__":
- If code to be stored in multiple files, use #!filepath to signal that in the same code block.

#####################################################

https://dev.to/jackynote/how-i-used-chatgpt-to-quickly-deploy-a-spring-boot-application-on-an-ubuntu-server-in-5-minutes-1gf8

/////
Basic Docker Installation:

Prompt: "Can you provide me with step-by-step instructions for installing Docker on an Ubuntu server?"
Response:

# Step 1: Update Package Repository
# First, you should ensure that your server's package repository is up to date. Open a terminal and run the following command:
sudo apt update

# Step 2: Install Required Dependencies
# Docker requires a few dependencies to be installed. You can do this by running:
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

# Step 3: Add Docker Repository
# You need to add the Docker repository to your system. This is done by adding the Docker GPG key and then adding the repository.
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Step 4: Install Docker
# Now you can install Docker using the following command:
sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io

# Step 5: Start and Enable Docker
# After the installation is complete, you need to start the Docker service and enable it to start at boot.
sudo systemctl start docker
sudo systemctl enable docker

/////
Docker Compose for Spring Boot:
Prompt: "How do I set up a Docker Compose file for deploying a Spring Boot application? Please guide me through the process."


Response from ChatGPT:

Step 1: Create a Docker Compose YAML File
Create a new file in your project directory and name it docker-compose.yml. This file will define the services and configurations for your Spring Boot application.

Step 2: Define Your Docker Compose Configuration

In your docker-compose.yml file, you'll define the services and their configurations. Here's an example of a Docker Compose file for a Spring Boot application:

version: '3'
services:
  spring-boot-app:
    image: openjdk:8-jre-alpine
    container_name: spring-boot-app
    ports:
      - "8080:8080"
    volumes:
      - ./your-spring-boot-app.jar:/app.jar
    command: ["java", "-jar", "/app.jar"]



Step 4: Start the Docker Compose Service
To start your Spring Boot application using Docker Compose, navigate to the directory containing your docker-compose.yml file and run the following command:

docker-compose up -d


Step 5: Verify the Deployment
You can check if your Spring Boot application is running by opening a web browser or using a tool like curl to access http://localhost:8080. If your application is working correctly, you should see the expected output.


/////
Deploying My Spring Boot Application:
Prompt: "I have my Docker environment set up. Now, how can I deploy my Spring Boot application within a Docker container?"
Response from ChatGPT:


Create and run a new container from the new image. To redeploy a Docker container with a Dockerfile, you can use a script that follows these general steps:
#!/bin/bash

# Define your Dockerfile and image name
DOCKERFILE="Dockerfile"
IMAGE_NAME="your-image-name"

# Step 1: Stop the existing container (if running)
echo "Stopping the existing container..."
docker stop your-container-name || true

# Step 2: Remove the existing container (if it exists)
echo "Removing the existing container..."
docker rm your-container-name || true

# Step 3: Build a new image using the Dockerfile
echo "Building a new Docker image..."
docker build -t "$IMAGE_NAME" -f "$DOCKERFILE" .

# Step 4: Create and run a new container from the new image
echo "Creating and running a new container..."
docker run -d --name your-container-name -p 8080:80 "$IMAGE_NAME"

# Optionally, you can remove unused images to save disk space
# docker image prune -f

echo "Container redeployment complete!"

You can store this file as deploy.sh and use command line to restart server each deployment:

sh deploy.sh


#####################################################

https://futureskillsacademy.com/blog/chatgpt-prompts-for-developers/


Writing New Logic for New Functionalities and Features
“Prompt: "As a [Insert programming language] developer, add [Insert new feature details] to this code."
Example: "As a Python developer, write a program to validate the information in the following forms [Insert form data]."


Specification of API Design and Architecture
Prompt: "Design an API [Insert API type] for [Insert API functionality]. Include resource modeling and endpoint structure."
Example: "Design a REST API for user authentication and profile management, including resource model & endpoint structure."


API Implementation
Prompt: "Implement the [API type] API for [Application details] using [Programming languages & frameworks]."
Example: "Implement the REST API for a task management app using Node.js and MongoDB, including routing & error handling."


Testing Short Snippets of Code
Prompt: "Act as a Python interpreter and execute this code: [Insert code]. Show only the output."
Example: "Act as a Python interpreter and execute this code: print('Hello, world!'). Show only the output."


Resolution of Bugs and Errors in Code
Prompt: "Debug this code to fix errors: [Insert project details], [Insert technology stack], [Insert error explanation]."
Example: "Debug this Node.js app with Express and MongoDB to fix 'Cannot read property of undefined'."


Optimization of Existing Code
Prompt: "Optimize the following [Insert programming language] code to enhance performance and efficiency."
Example: "Optimize the following JavaScript code to improve performance and reduce memory usage."


Prompting for Database Management
Prompt: "Write a query in [Insert language] that retrieves data based on the following criteria: [List of tables], [Requirements]."
Example: "Write an SQL query to retrieve all users who placed orders in the last month from the users and orders tables."


Crafting Regular Expressions
Prompt: "Generate a regex to accomplish the following task: [Insert task details]. Format it as [Insert format details]."
Example: "Generate a regex to validate email addresses in the format 'user@example.com'."


Learning Coding Best Practices
Prompt: "Outline best practices for securing a web app: [Insert application details]."
Example: "Outline best practices for securing a Django web app, including authentication and data validation."


Generating New Project Ideas
Prompt: "Generate project ideas for a [Insert application type] using [Insert programming language]."
Example: "Generate project ideas for a delivery app using Python, including real-time tracking and user feedback."


#####################################################

https://www.developerupdates.com/blog/top-chatgpt-prompts-for-programmers-with-examples

Act as a Python developer. Write code to read and print duplicate records from the provided CSV file.

Act as a JavaScript Developer, Write a program that checks the information on a form. Name and email are required, but address and age are not.

Act as a JavaScript Developer, Write a program that checks if a string contains a substring.




/////

Prompt with technology stack and other details

Prompt:

Act as: [Enter your profile]
Technology stack: [Enter your technology stack]
Functionality: [Enter functionality]
Mandatory Fields: [Enter Fields]
Optional fields: [Enter Fields]
Task: [Write a task description]

Example 1:
Act as: Node.js Developer
Technology stack: Node.js, Express.js, MongoDB, Mongoose
Functionality: Newsletter
Mandatory Fields: Email
Optional fields: name
Task: Make an API that takes a name and an email address as inputs and sends back a success flag.

Example 2:
Act as: PHP Developer
Technology stack: Laravel 8, MySQL
Functionality: CAGR Calculation
Mandatory Fields: Amount and Years
Optional fields: NA
Task: Write a service that calculates CAGR.

Example 3:
Act as: PHP Developer
Technology stack: Laravel 8, MySQL
Functionality: Cron
Task: Write a cron that sends portfolio returns every day to users.


/////
Prompt for API Design and Architecture:

Your task is to design and outline the architecture for a RESTful API that provides the following functionality:

- Manage user accounts (create, read, update, delete)
- Manage blog posts (create, read, update, delete)
- Manage comments on blog posts (create, read, update, delete)

The API design should include:

1. Resource modeling and endpoint structure
2. Request and response data formats (JSON)
3. Authentication and authorization mechanisms (JWT-based authentication)
4. Error handling and response codes
5. Versioning and backward compatibility considerations
6. Doccmentation and examples

Consider the following constraints and requirements:
- The API should follow RESTful principles and best practices
- Authentication should be required for creating, updating, or deleting resources
- Support pagination and filtering for retrieving blog posts and comments
- Maintain separation of concerns between user management, blog posts, and comments

The output should be a detailed API design document, including endpoints, data models, security mechanisms, and any other relevant architectural components, along with a clear rationale for the design choices made.



/////
Prompt for API Implementation

Your task is to implement a RESTful API for a blogging application using Node.js and Express.

The API implementation should include:

1. Routing and endpoint handlers for:

- User management (create, read, update, delete)
- Blog post management (create, read, update, delete)
- Comment management (create, read, update, delete)

2. Request and response data parsing and serialization (JSON)
3. Database integration and data access layer (e.g., MongoDB or PostgreSQL)
4. Authentication and authorization middleware (JWT-based)
5. Error handling and logging
6. Documentation and testing

Consider the following requirements and constraints:

- Use MongoDB as the database for storing user, blog post, and comment data
- Implement JSON Web Tokens (JWT) for authentication and authorization
- Follow best practices for Express routing and middleware
- Implement input validation and sanitization
- Include unit tests and integration tests for the API endpoints

The output should be a set of properly structured and documented code files (e.g., routes, controllers, models, utilities) that implement the specified API functionality, following best practices for Node.js and Express.



/////
Prompt to Write SQL Queries

Your task is to generate SQL queries for the following operations on a blog database:

1. Select all columns from the posts table.
2. Insert a new record into the comments table with the following values: 'This is a great post!', 1, 3.
3. Update the title column for records in the posts table where post_id = 5.
4. Delete records from the comments table where comment_id > 10.
5. Join the posts and comments tables on the post_id column to retrieve all comments for each post.

The output should be a set of properly formatted SQL queries that can be executed against the specified database schema to perform the requested operations.

/////

Prompt to Write Complex SQL Queries

Your task is to generate SQL queries for the following operations on a blog database:

1. Retrieve the title, content, and author_name from the posts table, grouped by category_id and filtered by published_date > '2022-01-01'.
2. Calculate the COUNT of comments for each post_id in the comments table.
3. Perform a self-join on the posts table to find posts with the same category_id.
4. Create a view top_posts that selects the post_id, title, and comment_count for posts with more than 10 comments.
5. Write a subquery to retrieve all posts where the author_id matches any author from the 'Technology' category.

Consider the following constraints and requirements:

- The database schema includes tables for posts, comments, categories, and authors
- Ensure proper handling of NULL values and edge cases
- Optimize queries for performance where possible

The output should be a set of properly formatted SQL queries that can be executed against the specified database schema to perform the requested operations, including any necessary subqueries, joins, or aggregations.


/////
Prompt for fixing errors and bugs

Tell me how to debug the code to solve the given error.
Project: eCommerce
Technology Stack: JavaScript, Node.js, Express.js Stripe, MongoDB
Error: Orders get placed twice for Indian users.


I am getting the error: [Insert your error message here] Tell me how to fix it.
I am getting the error: Cannot get strings. key_one because property key_one is missing in undefined [1]. [1] strings?: [string_key: string]: string. Tell me how to fix this

/////
Prompt for Generating Dummy Data

I am building software to generate dummy data for my functionality.
Functionality: Payment gateway integration
Generate data: user email, address, pin code
Data format: MySQL Queries Number of records: 20


/////
Prompt for database tasks

Write a [Language] Query
Tables: [Tables/collection list]
Requirement: [Mention your requirement]


Write a MySQL Query
Tables: users and orders
Requirement: It should give user details who placed highest order today


Write a MongoDB Query

Collections: users and orders
Requirement: It should return user information along with the total amount of previous purchases.
While working on new functionality, we need test data. We can use ChatGPT as a data feeder as follows: