
# make vm swappiness tiny
sudo sysctl -w vm.swappiness=10

# install extras
sudo apt-get install ubuntu-restricted-extras # h264 video codec

# remove empty spaces in files names
sudo apt install rename
rename 's/ /_/g' *

# encoce libx265 fast
mkdir exp && for f in *.*; do ffmpeg -i $f -c:v libx265 -c:a copy -x265-params pools=2,2:tune=fastdecode:preset=superfast -y exp/$f.mp4; done

# encoce libx264 fast
mkdir exp && for f in *.*; do ffmpeg -y -i $f -c:v libx264 -c:a copy -tune fastdecode -preset superfast -threads 2 exp/$f.mp4; done

mkdir exp && for f in *.*; do ffmpeg -y -i $f -c:v libx264 -c:a copy -tune film -preset superfast -threads 2 exp/$f.mp4; done

mkdir exp && for f in *.*; do ffmpeg -y -i $f -c:v libx264 -c:a copy -tune fastdecode -preset veryfast -threads 1 exp/$f.mp4; done

# cut video from to
ffmpeg -i in.mp4 -ss 00:00:03 -to 00:02:23 -c:a copy out.mp4


####################################
# grab screen
####################################

ffmpeg -v warning -video_size 2560x1600 -framerate 25 -f x11grab -i :0.0 -f alsa -ac 2 -i default myvid_$(date +%s).mp4

# grab screen with audio 44100k
ffmpeg -v warning -video_size 2560x1600 -framerate 30 -f x11grab -i :0.0 -f alsa -ac 2 -ar 44100 -i default -probesize 42M -preset ultrafast -pix_fmt yuv420p -vcodec libx264  myvid_$(date +%s).mp4


# using thread_queue_size
ffmpeg -v warning -thread_queue_size 1024 -video_size 192x108 -framerate 30 -f x11grab -i :0.0 -thread_queue_size 1024 -f alsa -ac 2 -ar 44100 -i default   myvid_$(date +%s).mp4
ffmpeg -v warning -thread_queue_size 1024 -video_size 1920x1080 -framerate 30 -f x11grab -i :1.0 -thread_queue_size 1024 -f alsa -ac 2 -ar 44100 -i default   myvid_$(date +%s).mp4


# webcan
ffmpeg -f video4linux2 -i /dev/video0 -acodec libmp3lame -t 20 output.mp4


# screen
ffmpeg -v verbose -f x11grab -y  -s 1920x1080 -r 30  -i :0.0 -vcodec mpeg4 -f alsa -i default  -ar 44100  -ac 2 output.mkv
ffmpeg -f x11grab -s 1920x1080 -i :0.0 output.mp4
ffmpeg -f x11grab -i :0.0 out.webm
ffmpeg -f x11grab -i :0.0 -r 10 -vf format=pix_fmts=yuv420p output.mp4


####################################
mix all wavs in one
####################################
https://superuser.com/questions/587511/concatenate-multiple-wav-files-using-single-command-without-extra-file

sudo apt install sox
sox "*.wav" ../out.wav

#sox short1.wav short2.wav short3.wav long.wav

####################################
repeat-loop
####################################

https://video.stackexchange.com/questions/12905/repeat-loop-input-video-with-ffmpeg
https://superuser.com/questions/1602115/ffmpeg-create-a-looping-video-with-specific-time

ffmpeg -stream_loop 3 -i input.mp4 -c copy output.mp4

ffmpeg -stream_loop -1 -i input.gif -i audio.mp3 -vf crop=" + width + ":" + height + ":0:40,scale=1280:720,setsar=1,format=yuv420p -shortest -fflags +shortest -max_interleave_delta 100M -movflags +faststart output.mp4

####################################
aac audio bitrate
####################################

https://trac.ffmpeg.org/wiki/Encode/AAC

# Constant bit rate using -b:a:
ffmpeg -i input.wav -c:a aac -b:a 160k output.m4a

####################################
# mix video with new audio
####################################

ffmpeg -i in.mp4 -i in.wav -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 xout.mp4

# mix with 44100k
ffmpeg -i in.mp4 -i in.wav -c:v copy -ac 2 -c:a aac -ar 44100 -b:a 160k -map 0:v:0 -map 1:a:0 -y xout.mp4

# scale up to 1080
ffmpeg -i in.mp4 -i in.wav -vf scale=-1:1080 -crf 32 -ac 2 -c:a aac -ar 44100 -b:a 160k -map 0:v:0 -map 1:a:0 -y -threads 2 xout.mp4


####################################
# invert colors
####################################

ffmpeg -i in -vf negate out

####################################
# wave forms vu
####################################

ffmpeg -i in.wav -filter_complex "[0:a]showwaves=split_channels=1:mode=cline:s=1920x1080[v]" -map '[v]' -map '0:a' -pix_fmt yuv420p  -y 8out_$(date +%s).mp4

ffmpeg -v warning -video_size 192x108 -framerate 30 -f x11grab -i :1.0 -f alsa -ac 2 -ar 44100 -i default   myvid_$(date +%s).mp4

####################################
# unsharpmasking
####################################

ffmpeg -i in.mp4 -filter:v "scale=-1:1080:flags=lanczos,unsharp=5:5:1.0:5:5:0.0" -c:a copy output.mp4
ffmpeg -i input -filter:v "scale=-1:1080:flags=lanczos,unsharp=5:5:1.0:5:5:0.0" output

https://ffmpeg.org/ffmpeg-filters.html#unsharp-1
https://trac.ffmpeg.org/wiki/Scaling
https://superuser.com/questions/504637/ffmpeg-settings-for-unsharpmasking-with-and-without-upsampling

####################################
# misc
####################################

ffmpeg -i in.mp4 -ss 00:00:07 -r:a 44100 out.mp4
ffmpeg -i in.mp4 -i in.wav -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 out.mp4
ffmpeg -i in.mp4 -ss 00:00:07 -c:a copy out.mp4
ffmpeg -i in.mp4 -t 145 -c:a copy out.mp4
ffmpeg -v warning -video_size 1920x1080 -framerate 25 -f x11grab -i :0.0 -f alsa -ac 2 -ar 44100 -i default   myvid_$(date +%s).mp4


####################################
# webcam + screen
####################################

ffmpeg -f x11grab -i :0.0 -framerate 25 -video_size 1920x1080  \
    -f v4l2 -i /dev/video0 -framerate 25 -video_size 320x160 \
    -filter_complex "[0:0][1:0]overlay=500:500[out]" \
    -shortest -map [out] \
    -y output.mp4 \

    #-map 0:v \
    # -vf "format=yuv420p" \
    # -f xv display

        #-f alsa -ar 44100 -ac 2 -acodec pcm_s16le \
        #  -s 320x160

    # x=W/2
    # y=770
    # 480:0
    # 5:5
    # 0:H/2
    # W/2:H/2
    # 0:H/2


####################################
# rubberband pitch
####################################

# test sound
mkdir -p test2 && for i in *.*; do ffmpeg -i $i  -af "rubberband=pitch=432/340,rubberband=pitch=432/470:tempo=0.99" -t 64 -y test2/$i.wav; done

# convert
ffmpeg -i in.xm  -af "rubberband=pitch=432/340,rubberband=pitch=432/470:tempo=0.97"  -y out2.wav


####################################
# slow motion
####################################
http://trac.ffmpeg.org/wiki/How%20to%20speed%20up%20/%20slow%20down%20a%20video

ffmpeg -i input.mkv -filter:v "setpts=2.0*PTS" output.mkv

####################################
# go pro flip
####################################

rm -f *.LRV
mkdir -p conv && for i in *.*; do ffmpeg -i $i -vf vflip -shortest -y  -threads 2 conv/$i.flip.mp4; done
mkdir -p conv && for i in *.*; do ffmpeg -i $i -vf hflip -shortest -y  -threads 2 conv/$i.flip.mp4; done
mkdir -p conv && for i in *.*; do ffmpeg -i $i -threads 2 -an conv/$i.mp4; done







####################################
MilkyTracker v1.04.00 installation
####################################

https://github.com/milkytracker/MilkyTracker/blob/master/INSTALL.md
https://github.com/milkytracker/MilkyTracker

sudo apt install cmake -y
sudo apt install git -y
sudo apt-get install build-essential -y
sudo apt-get install libjack-dev liblhasa-dev librtmidi-dev libsdl2-dev libzzip-dev

cd ~
mkdir Git && cd Git
git clone https://github.com/milkytracker/MilkyTracker.git
cd MilkyTracker
mkdir build
cd build
cmake ..
make

~/Git/MilkyTracker/build/src/tracker/milkytracker

v1.04.00
v1.03.00

-------
https://howtoinstall.co/package/libsystemd0
sudo apt-get update
sudo apt-get install libsystemd0

https://zoomadmin.com/HowToInstall/UbuntuPackage/libudev1
sudo apt-get update -y
sudo apt-get install -y libudev1

locale -a





####################################
Voice mix audacity
####################################

ACE EQ
TAP Chorus  Fq 1.33 Delay 30
C Chorus - t 10
TAP Reverberator - Decay 0, uncheck Allpass
Rubber Band - cents 51, semi -12, oct 2, format preserv, Drymix 0.45
ZamTube - tube drv 5, bass 1.3 , mids 2.5, treble 6.5, model 11
TAP Reflector - Frag 321, dry -67




#####################################
video2x
#####################################
https://docs.video2x.org/running/command-line.html
https://github.com/k4yt3x/video2x/releases/tag/6.2.0

apt-get install ./video2x-linux-ubuntu2404-amd64.deb



video2x -i input.mp4 -o output.mp4 -f realesrgan -r 4 -m realesr-animevideov3
video2x -i input.mp4 -o output.mp4 -f libplacebo -s anime4k-v4-a+a -w 3840 -h 2160

https://github.com/kwsou/video2x
https://github.com/k4yt3x/video2x

https://hub.docker.com/r/k4yt3x/video2x
https://hub.docker.com/r/k4yt3x/video2x

docker pull k4yt3x/video2x


python video2x.py -i sample-input.mp4 -o sample-output.mp4 -r 2 -d waifu2x_caffe
python video2x.py -i sample-input.mp4 -o sample-output.mp4 -r 2 -d waifu2x_caffe -- --tta 1

docker run --rm -it --gpus all -v /dev/dri:/dev/dri -v $PWD:/host k4yt3x/video2x:4.6.0 -d waifu2x_ncnn_vulkan -r 2 -i sample_input.mp4 -o sample_output.mp4


https://vchitect.github.io/VEnhancer-project/
https://github.com/Vchitect/VEnhancer
https://github.com/machinelearnear/video-super-resolution-youtube
https://huggingface.co/docs/diffusers/en/using-diffusers/svd
https://huggingface.co/docs/diffusers/v0.24.0/using-diffusers/svd

https://huggingface.co/collections/ridvanpal/enhancer-6553aacea4103ef36795387c
https://huggingface.co/spaces/Tune-A-Video-library/Tune-A-Video-inference
https://huggingface.co/spaces/kadirnar/Tune-A-Video
https://huggingface.co/spaces/kadirnar/Tune-A-Video
https://huggingface.co/spaces?search=real-esrgan
https://huggingface.co/spaces/peterkros/videoenhancer
https://huggingface.co/spaces/asahi417/stable-video-diffusion-upscale
https://github.com/hrishioa/SimpleSlowVideoUpscaler
https://huggingface.co/spaces/nightfury/Image_Face_Upscale_Restoration-GFPGAN
https://huggingface.co/spaces/sczhou/CodeFormer
https://huggingface.co/spaces/hungdang1610/gopro-deblurring-maxim



https://www.waifu2x.net/
https://deepai.org/machine-learning-model/waifu2x
https://github.com/AaronFeng753/Waifu2x-Extension-GUI
https://github.com/akai-katto/dandere2x
https://github.com/nagadomi/waifu2x?


https://audo.ai/

#####################################
#####################################
https://ottverse.com/change-resolution-resize-scale-video-using-ffmpeg/
https://gist.github.com/luizomf/7f74ee08a73898f0c3bff2c700d24530
https://www.mux.com/articles/optimize-video-for-web-playback-with-ffmpeg

ffmpeg -i input.mp4 -vf scale=-1:720 output.mp4
ffmpeg -i input.mp4 -vf scale=1280:720 -preset slow -crf 18 output.mp4

ffmpeg -i in.mp4 -vf scale=3840x2160:flags=lanczos -c:v libx264 -crf 13 -c:a aac -b:a 512k -preset slow -an -y  out.mp4

ffmpeg -i videoplayback.mp4 -vf scale=1920x1080:flags=lanczos -c:v libx264 -crf 13 -c:a aac -b:a 512k -preset slow -an -t 25 out.mp4;

ffmpeg -y -i $FILE1.mp4 -preset slower -profile:v main -level 3.1 -s
720x576 -c:v libx264 -r 25000/1000 -b:v 1750k -maxrate:v 1750k
-minrate:v 1750k -bufsize:v 350k -color_primaries 1 -color_trc 1
-colorspace 1 -c:a mp2 -b:a 128k -nal-hrd cbr -muxrate 2100k -f mpegts
$FILE1.ts

ffmpeg -y -i test.mp4 -strict -2 -vf smartblur=1.5:-0.35:-3.5:0.65:0.25:2.0 -f mp4 test5.mp4

ffmpeg -y -i test.mp4 -strict -2 -vf smartblur=lr=2.00:ls=-0.90:lt=-5.0:cr=0.5:cs=1.0:ct=1.5 -f mp4
test6.mp4

ffmpeg -i input.mov -c:v h264 -b:v 1000k -c:a aac output.mp4



#####################################
enhancing-upscale
#####################################

https://superuser.com/questions/901099/ffmpeg-apply-blur-over-face
https://www.cloudacm.com/?p=3016
https://shotstack.io/learn/convert-video-gif-ffmpeg/
https://dragonquest64.blogspot.com/2020/09/cartoonize-video-with-ffmpeg-take-2.html
https://www.baeldung.com/linux/ffmpeg-best-quality-conversion
https://bitbyte3.com/blogs/ffmpeg-filters-deep-dive-enhancing-video-quality-and-effects
https://www.mux.com/articles/optimize-video-for-web-playback-with-ffmpeg
https://superuser.com/questions/370920/auto-image-enhance-for-ubuntu
https://www.dedoimedo.com/computers/image-upscale-manual.html
https://stackoverflow.com/questions/28136471/image-enhancement-solution
https://stackoverflow.com/questions/28136471/image-enhancement-solution
https://stackoverflow.com/questions/24961127/how-to-create-a-video-from-images-with-ffmpeg
https://superuser.com/questions/1462071/ffmpeg-convert-pngs-to-video-files
https://stackoverflow.com/questions/10802606/how-to-batch-resize-images-in-ubuntu-recursively-within-the-terminal
https://askubuntu.com/questions/135477/how-can-i-scale-all-images-in-a-folder-to-the-same-width
https://stackoverflow.com/questions/12433300/imagemagick-how-to-resize-proportionally-with-mogrify-without-a-background
https://github.com/TahirHafeez/ffmpeg_scripts/blob/main/geq


ffmpeg -i input_video.mp4 -vf "scale=1280:-2" -c:v libx264 -crf 23 -preset medium -c:a aac -b:a 128k output.mp4

ffmpeg -i input_video.mp4 -c:v libx264 -b:v 1M -pass 1 -an -f null /dev/null && ffmpeg -i input_video.mp4 -c:v libx264 -b:v 1M -pass 2 -c:a aac -b:a 128k output.mp4

ffmpeg -i input_video.mp4 -c:v libx264 -crf 23 -g 30 -keyint_min 30 -c:a aac -b:a 128k output.mp4

ffmpeg -i input.mp4 -qscale:v 5 -t 2 scenario1_output_%03d.jpg
ffmpeg -i input.mp4 -qscale:v 20  -t 2 scenario2_output_%03d.jpg


#ok
convert -enhance -equalize -contrast image.jpg image_enhanced.jpg
convert -auto-gamma -auto-level -normalize original.jpg improved.jpg


convert input.png -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 3834,0 0,%h 0,3582' -alpha off -crop 3834x3582+0+0 output.png

# ok 3840x2160
convert  -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 3834,0 0,%h 0,3582' -alpha off -crop 3440x2160+0+0 input.png output.png

convert  -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 4834,0 0,%h 0,3282' -alpha off -crop 4740x3160+0+0 scenario3_output_001.jpg output2.png

convert -threshold 85% -blur 2x1 -sharpen 0x3 -sharpen 0x3 -morphology dilate kirsch   scenario3_output_001.jpg output3.png

convert -blur 2x1 -sharpen 0x3 -sharpen 0x3 scenario3_output_001.jpg output3.png

convert  -enhance  -blur 2x1 -sharpen 0x3 -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 4834,0 0,%h 0,3282' -alpha off -crop 4740x3160+0+0 scenario3_output_001.jpg output2.png

for i in *.jpg; do convert  -enhance  -blur 2x1 -sharpen 0x3 -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 4834,0 0,%h 0,3282' -alpha off -crop 4740x3160+0+0 $i $i.png; done


ffmpeg -framerate 30 -pattern_type glob -i '*.png' -c:v libx264 -pix_fmt yuv420p out.mp4
ffmpeg -framerate 15 -pattern_type glob -i '*.resized.png' -c:v libx264 -pix_fmt yuv420p out.mp4
ffmpeg -i out.mp4 -vf "scale=1280:-2" -c:v libx264 -pix_fmt yuv420p out2.mp4
ffmpeg -i out.mp4 -vf "scale=1920:786" -c:v libx264 -pix_fmt yuv420p -y out2.mp4


ffmpeg -framerate 30 -pattern_type glob -i 'raw/*.png' -ss 0:36 -i orig/audio.ogg -c:v libx264 -c:a copy -shortest -r 30 -pix_fmt yuv420p raw.mp4

ffmpeg -framerate 30 -pattern_type glob -i '*.resized.png' -c:v libx264 -vf "scale=1920:1080" -pix_fmt yuv420p out.mp4
ffmpeg -framerate 30 -pattern_type glob -i '*.resized.png' -c:v libx264 -pix_fmt yuv420p out.mp4




for f in `find . -name "*.jpg"`; do convert $f -resize 50% $f.resized.jpg; done
for f in `find . -name "*.png"`; do convert $f -resize 50% $f.resized.png; done
find . -name "*.jpg" | xargs convert -resize 50%
find . -name "*.jpg" | xargs mogrify -resize 50%
convert '*.jpg[200x]' resized%03d.png


# final ---------------------------------------------------------
ffmpeg -i input.mp4 -t 1 -qscale:v 1 scenario3_output_%03d.jpg
ffmpeg -i input.mp4 -qscale:v 1 scenario3_output_%03d.jpg

# for i in *.jpg; do convert  -enhance  -blur 2x1 -sharpen 0x3 -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 4834,0 0,%h 0,3282' -alpha off -crop 4740x3160+0+0 $i $i.png; done

# for i in *.jpg; do convert -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 4834,0 0,%h 0,3282' -alpha off -crop 4740x3160+0+0 $i $i.png; done

for i in *.jpg; do convert -alpha on -virtual-pixel transparent -filter Triangle +distort Affine '0,0 0,0 %w,0 2434,0 0,%h 0,1682' -alpha off -crop 4740x3160+0+0 $i $i.png; done

#find . -name "*.png" | xargs mogrify -resize 50%
#find . -name "*.png" | xargs mogrify -resize 1400x720 -extent 1400x720 -gravity center -background white
#find . -name "*.png" | xargs mogrify -resize 1400x720 -extent 1400x720 -gravity center
for f in *.png; do convert $f -resize -resize 1400x720 $f.resized.png; done


ffmpeg -framerate 15 -pattern_type glob -i '*.png' -c:v libx264 -pix_fmt yuv420p -y out.mp4
ffmpeg -framerate 15 -pattern_type glob -i '*.png' -c:v libx264 -pix_fmt yuv420p  -strict -2 -vf "scale=1920:720" -y out.mp4



ffmpeg -i out.mp4 -vf scale=1920:1080 -c:v libx264 -pix_fmt yuv420p -y out2.mp4
ffmpeg -i out.mp4 -vf scale=1920:720 -y out2.mp4
ffmpeg -i out.mp4 -vf scale=1280:640 -y out2.avi
ffmpeg -i out.mp4 -vf scale=1280:-1 -y out2.avi

ffmpeg -i i.mp4 -vf 'split[original][copy];[copy]scale=ih*16/9:-1,crop=h=iw*9/16,gblur=sigma=20[blurred];[blurred][original]overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/2' -t 10 -y out.mp4

ffmpeg -i out.mp4 -vf 'split[original][copy];[copy]scale=ih*16/9:-1,crop=h=iw*2/8,gblur=sigma=0[blurred];[blurred][original]overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/2' -y  -strict -2 out3.mp4

ffmpeg -i out5.mp4 -vf 'split[original][copy];[copy]scale=ih*16/9:-1,crop=h=iw*2/8,smartblur=lr=1.5:ls=-0.25:lt=-3.5:cr=0.75:cs=0.250:ct=0.5[blurred];[blurred][original]overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/2' -y  -strict -2 out53.mp4

ffmpeg -i out.mp4 -filter:v "scale=1280:-1:flags=lanczos,unsharp=5:5:1.0:5:5:0.0" out5.mp4
ffmpeg -i out.mp4 -filter:v "scale=1280:-1,smartblur=lr=1.5:ls=-0.25:lt=-3.5:cr=0.75:cs=0.250:ct=0.5" out5.mp4


ffmpeg -i out53.mp4 -vf "pp=hb/vb/dr/fq|8" -c:v libx264 -crf 23 -preset medium \
-tune animation -c:a copy output4444.mkv

ffplay -vf "pp=hb/vb/dr/fq|8" -i out53.mp4

ffmpeg -i out53.mp4 -filter_complex "format=gray,geq=lum_expr='if(lte(lum(X,Y),50),0,if(lte(lum(X,Y),100),50,if(lte(lum(X,Y),150),100,if(lte(lum(X,Y),200),150,if(lte(lum(X,Y),255),200,0)))))'" -acodec copy cartoonX.mp4

ffmpeg -i out53.mp4 -vf "format=gray,geq=lum_expr='(p(X,Y)+(256-p(X-4,Y-4)))/2'" emboss.mp4




#####################################
enhancing-audio-in-video-files
#####################################
https://bitbyte3.com/blogs/enhancing-audio-in-video-files-with-ffmpeg-a-guide-to-sound-quality-improvement
https://bitbyte3.com/blogs/ffmpeg-filters-deep-dive-enhancing-video-quality-and-effects

ffmpeg -i input_video.mp4 -filter:a "volume=2.0" normalized_output_video.mp4
ffmpeg -i input_video.mp4 -af "afftdn=nf=-20" denoised_output_video.mp4

ffmpeg -i example_video.mp4 -filter:a "volume=2.5" step1_normalized_video.mp4
ffmpeg -i step1_normalized_video.mp4 -af "afftdn=nf=-15" final_output_video.mp4

