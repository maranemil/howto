

############################################################
#
#   Batch Vid files
#
############################################################

for i in url_1 url_2; do wget --limit-rate=600k --continue "$i"; done
for f in *.mp4; do ffmpeg -i "$f" -crf 28 -y -threads 2 -y -preset ultrafast -acodec copy  -loglevel panic  "$f"C2.mp4 ; done
for f in *.mp4; do time ffmpeg -i "$f" -crf 28 -y -threads 2 -c:v libx264 -loglevel error -tune fastdecode -acodec copy -c:a copy -preset veryfast "$f"C2.mp4 ; done

for f in *.mp4; do time ffmpeg -i "$f" -preset ultrafast -acodec copy -threads 2 -vf eq=0.9:0:0.1:0:1:1:0:0 -crf 35  -y -c:v libx264 -acodec copy -c:a copy  "$f"C2.mp4 ; done

-----------------------------------

time ffmpeg -i in.mp4 -preset ultrafast -acodec copy -threads 2 -vf eq=0.9:0:0.1:0:1:1:0:0 -crf 35  -y out.mp4
time ffmpeg -i in.mp4 -b:v 1000 -b:a 96   -q:a 330 -cutoff 10000 -y   out.mp4

-acodec libmp3lame -b:a 8k -ac 1
-c:a aac -b:a 32k
-ac 1  # Mix a single stereo stream down to a mono stream
-af "pan=mono|c0=c1" #  pan audio filter to include only the right channel https://trac.ffmpeg.org/wiki/AudioChannelManipulation

-----------------------------------
FFMPEG -loglevel
-----------------------------------
{ "quiet"  , AV_LOG_QUIET   },
{ "panic"  , AV_LOG_PANIC   },
{ "fatal"  , AV_LOG_FATAL   },
{ "error"  , AV_LOG_ERROR   },
{ "warning", AV_LOG_WARNING },
{ "info"   , AV_LOG_INFO    },
{ "verbose", AV_LOG_VERBOSE },
{ "debug"  , AV_LOG_DEBUG   },


-----------------------------------
FFMPEG -tune
-----------------------------------
film – intended for high-bitrate/high-quality movie content. Lower deblocking is used here.
animation – intended for cartoons, etc., where deblocking is boosted to compensate for larger, flat areas. More reference frames are used.
grain – this should be used for material that is already grainy. Here, the grain won't be filtered out as much.
stillimage – like the name says, it optimizes for still image encoding by lowering the deblocking filter.
psnr and ssim – these are debugging modes to optimize for good PSNR and SSIM values only. Better metrics don't necessarily mean better quality though.
fastdecode – disables CABAC and the in-loop deblocking filter to allow for faster decoding on devices with lower computational power.
zerolatency – optimization for fast encoding and low latency streaming

-----------------------------------
FFMPEG -preset
-----------------------------------
ultrafast 	45x    - 6min - 4h / x240 - size 1/2
superfast 	32x
veryfast    31x
faster		18x
fast 		17x 	- 18min - 4h / x240 - size 1/4
medium 		12x - default
slow 		7x
slower 		5x
veryslow    2x



-----------------------------------
11 min   - 200mb
06 min   - 100mb
-----------------------------------

ffmpeg -i input.mp4  -q:a 330 -cutoff 15000 output.wav
ffmpeg -i in.mp4 -crf 30 out.mp4
ffmpeg -i in.mp4 -crf 30 -vf format=gray,format=yuv422p   out.mp4

-vcodec h264
-vcodec mpeg2_qsv
-vcodec vc1_qsv
-vcodec hevc_qsv
-b:v 800K
-preset veryfast
-vframes 2000
-framerate 50
-filter:v select="mod(n-1\,2)"  # skip frames
-filter:v select="not(mod(n-1\,2))"
-format rawvideo
-vf scale=-1:240
-vf scale=-1:144

ffmpeg -i in.mp4 -crf 30 -vf scale=-1:240  out.mp4
ffmpeg -i input.mp4 -vcodec h264 -acodec mp2 crf 30 -vf scale=-1:360 -preset ultrafast output.mp4
ffmpeg -i input.avi -vcodec msmpeg4v2 output.avi
ffmpeg -i input.mp4 -acodec mp2 output.mp4
ffmpeg -i input.mp4 -b 1000000 output.mp4
ffmpeg -i input.mp4 -vcodec libx264 -crf 20 output.mp4
ffmpeg -i <inputfilename> -s 640x480 -b:v 512k -vcodec mpeg1video -acodec copy <outputfilename>
ffmpeg -i input.mp4 -c:v libx264 -crf 24 -b:v 1M -c:a aac output.mp4
ffmpeg -i <input.mp4> -b:v 2048k -s 1000x600 -fs 2048k -vcodec mpeg4 -acodec copy <output.mp4>
ffmpeg -i android_record1.mp4 -crf 18 -r 30 ../corrected/output.mp4



############################################################
#
# Audio Compression
#
############################################################

-acodec libmp3lame -ab 128k
-acodec libmp3lame -aq 5
-acodec mp3 -ab 128k
-acodec mp3 -b:a 320k
-codec:a libmp3lame -qscale:a 4 -q:a 4
-vol 509 -acodec flac -compression_level 8 -ac 2

"--colormatrix bt709" for HD
-vf eq=brightness=0.06:saturation=2 -c:a copy
-x264opts colormatrix=bt709
eq=contrast=1:brightness=0:saturation=1:gamma=1


############################################################
#
# Compress 5X
#
############################################################

time ffmpeg -i in.mp4 -acodec libmp3lame  -crf 35 -q:a 9 -aq 9 -ac 2 -y -threads 2 -preset ultrafast out.mp4  # 5x

...

time ffmpeg -i in.mp4 -acodec libmp3lame  -crf 28 -q:a 9 -ac 2 -y -aq 5 -vf eq=0.4:0:0.1:0:1:1:0:0 -threads 2 -preset ultrafast out.mp4
time ffmpeg -i in.mp4 -acodec libmp3lame  -crf 28 -q:a 9 -ac 2 -y -aq 5 -threads 2 -preset ultrafast out.mp4
ffmpeg -i in.mp4 -acodec libmp3lame  -crf 38   -x264opts colormatrix=bt709  -y -threads 3 -preset ultrafast  -vf eq=contrast=0.8:brightness=0:saturation=0.5:gamma=1.7  out.mp4


############################################################

How to stream audio using FFMPEG?

############################################################

Stream in real time
$ ffmpeg -f avfoundation -i ":1" -t 10 -f mpegts "tcp://remote_host_or_IP_:port"
Set remote computer to "listen"
ffplay -i tcp://local_host_or_IP_addr:port?listen -hide_banner


###############################################################################
#
#	https://trac.ffmpeg.org/wiki/How%20to%20speed%20up%20/%20slow%20down%20a%20video
#	https://davidwalsh.name/video-speed
#	http://ffmpeg.org/ffmpeg-all.html#atempo
#	https://gist.github.com/LightningStalker/f30119cf8f772bf805873dd47c15ce31
#
###############################################################################

speed up

ffmpeg -i input.mkv -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]" -map "[v]" -map "[a]" output.mkv # double speed  2x
ffmpeg -i input.mkv -filter_complex "[0:v]setpts=0.75*PTS[v];[0:a]atempo=1.333333[a]" -map "[v]" -map "[a]" output.mkv # double speed  1.25x
ffmpeg -i input.mkv -filter_complex "[0:v]setpts=1*PTS[v];[0:a]atempo=1[a]" -map "[v]" -map "[a]" output.mkv   # same speed
ffmpeg -i input.mkv -r 16 -filter:v "setpts=0.25*PTS" output.mkv  # 4x

slow
ffmpeg -i input.mkv -filter:v "setpts=2.0*PTS" output.mkv
ffmpeg -i input.mkv -filter:v "minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120'" output.mkv



###############################################################################

Sharp and Unsharp

###############################################################################

ffmpeg -i output2.avi -vf unsharp=7:7:-2:7:7:-2 output3.avi # unsharp
ffmpeg -i output2.avi -vf unsharp=5:5:1.5:5:5:0.0 output3.avi  # sharp
ffmpeg -i output2.avi -vf unsharp=3:5:3 output3.avi  # sharp


###############################################################################

slow motion video

###############################################################################

ffmpeg -i input.mkv -filter_complex \
"[0:v]trim=0:10,setpts=PTS-STARTPTS[v1]; \
 [0:v]trim=10:30,setpts=PTS-STARTPTS[v2]; \
 [0:v]trim=start=30,setpts=PTS-STARTPTS[v3]; \
 [v2]setpts=PTS/0.5[slowv]; \
 [v1][slowv][v3]concat=n=3:v=1:a=0[out]" \
-map [out] output.mp4


ffmpeg -i input.mkv -filter_complex \
"[0:v]trim=0:10,setpts=PTS-STARTPTS[v1]; \
 [0:v]trim=10:30,setpts=(PTS-STARTPTS)*2[v2]; \
 [0:v]trim=start=30,setpts=PTS-STARTPTS[v3]; \
 [0:a]atrim=0:10,asetpts=PTS-STARTPTS[a1]; \
 [0:a]atrim=10:30,asetpts=PTS-STARTPTS,atempo=0.5[a2]; \
 [0:a]atrim=start=30,asetpts=PTS-STARTPTS[a3]; \
 [v1][a1][v2][a2][v3][a3]concat=n=3:v=1:a=1[v][a]" \
-map [v] -map [a] output.mp4



###############################################################################
#
#   FX
#
###############################################################################

ffplay -i out.mp4 -vf unsharp=3:3:2,negate


############################################################################
#
#	15 Useful ‘FFmpeg’ Commands for Video, Audio and Image Conversion in Linux – Part 2
#	https://www.tecmint.com/ffmpeg-commands-for-video-audio-and-image-conversion-in-linux/
#
############################################################################

ffmpeg -i video.flv -vn -ar 44100 -ac 2 -ab 192 -f mp3 audio.mp3
ffmpeg -i video.mpg -ab 26k -f flv video1.flv
ffmpeg -i video.avi -target pal-dvd -ps 2000000000 -aspect 16:9 video.mpeg
ffmpeg -i video.mpg -target vcd vcd_video.mpg
ffmpeg -i video1.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 audio3.mp3
ffmpeg -i audio.mp3 -i video.avi video_audio_mix.mpg
ffmpeg -i video.mpg -vf "setpts=0.5*PTS" highspeed.mpg
ffmpeg -i video.mpg -vf "setpts=4.0*PTS" lowerspeed.mpg -hide_banner
ffmpeg -loop 1 -i image.jpg -i Bryan\ Adams\ -\ Heaven.mp3 -c:v libx264 -c:a aac -strict experimental -b:a 192k -shortest output.mp4
ffmpeg -i video.mp4 -i subtitles.srt -map 0 -map 1 -c copy -c:v libx264 -crf 23 -preset veryfast video-output.mkv

############################################################################
#
#   Creating a video from a single image for a specific duration in ffmpeg
#
#   https://video.stackexchange.com/questions/12905/repeat-loop-input-video-with-ffmpeg
#   https://stackoverflow.com/questions/25891342/creating-a-video-from-a-single-image-for-a-specific-duration-in-ffmpeg
#
############################################################################

ffmpeg -i input -filter_complex loop=loop=3:size=75:start=25 output
ffmpeg -loop 1 -i input.jpg -c copy -t 15 output.mp4
ffmpeg -loop 1 -i image.png -c:v libx264 -t 15 -vf scale=320:240 out.mp4

The -t 15 makes it 15 seconds long.
The -vf scale=320:240 sets the width/height.

##################################################################
#
#   metadata video
#
##################################################################

https://unix.stackexchange.com/questions/131186/get-metadata-from-a-video-in-the-terminal
https://en.savefrom.net/10/
https://libre-software.net/edit-metadata-exiftool/


sudo apt-get install mediainfo
$ mediainfo foo.mp4

sudo apt-get install libimage-exiftool-perl
exiftool video_file.mp4 > medatata.txt
exiftool -h . > example.html

ffprobe foo.mp4

#######################################################################
#
#  FFMPEG tips, tricks and and lessons learned.
#  https://medium.com/@dernis/ffmpeg-tips-tricks-and-and-lessons-learned-a6f3c1187085#
#
#######################################################################

FFMPEG Video Conversion

ffmpeg -i input.mp4 -y -vcodec libx264 -pix_fmt yuv420p -preset fast -crf 24 -vf scale="'w=if(gt(a,16/9),854,-2):h=if(gt(a,16/9),-2,480)'" -codec:a libfdk_aac -b:a 128k -movflags faststart -threads 4 output.mp4

ffmpeg -i input.mp4 self explanatory

-y overwrite files if they exist
-vcodec libx264 use the h264 codec
-px_fmt yuv420p select the pixel format for maximum compatibility
-preset fast choose a basket of settings that will result in faster encoding
-crf 24 quality setting
-vf scale=”w=if(gt(a,16/9),854,-2):h=if(gt(a,16/9),-2,480)”

------------------------------------
FFMPEG Preview Video
------------------------------------

ffmpeg -i input.mp4 -y -filter_complex "
[0:v]trim=185.0:188.0,setpts=PTS-STARTPTS[v0];[0:a]atrim=185.0:188.0,asetpts=PTS-STARTPTS[a0];
[0:v]trim=370.0:373.0,setpts=PTS-STARTPTS[v1]; [0:a]atrim=370.0:373.0,asetpts=PTS-STARTPTS[a1];
[0:v]trim=555.0:558.0,setpts=PTS-STARTPTS[v2]; [0:a]atrim=555.0:558.0,asetpts=PTS-STARTPTS[a2];
[0:v]trim=740.0:743.0,setpts=PTS-STARTPTS[v3];[0:a]atrim=740.0:743.0,asetpts=PTS-STARTPTS[a3];
[v0][a0][v1][a1][v2][a2][v3][a3]concat=n=4:v=1:a=1 [out_v2] [out_a];
[out_v2]scale='w=if(gt(a,16/9),854,-2):h=if(gt(a,16/9),-2,480)'[out_v]"
-vcodec libx264
-pix_fmt yuv420p
-preset fast
-crf 24
-codec:a libfdk_aac
-b:a 128k -ac 2
-movflags faststart
-threads 4
-map "[out_v]" -map "[out_a]" output.mp4


------------------------------------
CROPPING AND PADDING THE IMAGE
http://howto-pages.org/ffmpeg/
------------------------------------

ffmpeg -i in.mp4 -croptop 30 -cropbottom 30 -target ntsc-dvd -aspect 16:9 out.169.mp4
ffmpeg -i in.mp4 -acodec mp3 -ar 44100 -ab 128k -vcodec msmpeg4v2 -b 500k -s 480x270 -r 15 -padtop 44 -padbottom 46 -padcolor 000000 -f avi outbox.mp4
ffmpeg -i in.mp4 -cropleft 90 -cropright 90 -target ntsc-dvd  -aspect 4:3 out.mp4
ffmpeg -i in.wmv -t 10 -c:v mpeg2video -q:v 0 -pix_fmt yuv422p -intra -c:a mp2 -ar 48000 outfile.mp4

screen capture (alsa+x11grab)

ffmpeg  -f alsa -ac 2 -i hw:0  -f x11grab -r 30 -s 1600x900 -i :0.0 -acodec mp3 -vcodec libx264 -preset ultrafast -threads 0  -f matroska -y ofile.mkv


------------------------------------
FFmpeg
https://offset.skew.org/wiki/User:Mjb/FFmpeg
http://paulbourke.net/miscellaneous/ffmpeg/FFmpeg_Book.pdf
------------------------------------

Rotate degrees
ffmpeg -i inputfile -map_metadata 0 -metadata:s:v rotate="0" -codec copy outputfile
ffmpeg -i inputfile -vf "vflip,hflip" outputfile
ffmpeg -i inputfile -vf "vflip,hflip" -metadata:s:v:0 rotate=0 outputfile
ffmpeg -i input.mp4 -metadata:s:v rotate="0" -vf "hflip,vflip" -c:v libx264 -acodec copy output.mp4

Convert DV AVI to H.264 MP4

ffmpeg -i inputfile.avi -vf "yadif,hue=s=1.25" -c:v libx264 -preset veryslow -crf 20 -tune grain -c:a aac -b:a 160k outputfile.mp4
ffmpeg -i input.avi -vf "yadif,hue=s=1.25" -c:v libx264 -preset veryslow -pass 1 -b:v 11000k -f mp4 -y NUL
ffmpeg -i input.avi -vf "yadif,hue=s=1.25" -c:v libx264 -preset veryslow -pass 2 -b:v 11000k -y output.mp4

Make a slideshow for YouTube
ffmpeg -framerate 30 -loop 1 -i image.jpeg -i audio.m4a -c:a copy -shortest -pix_fmt yuv420p out.mp4
ffmpeg -framerate 2 -loop 1 -i image.jpeg -i audio.m4a -c:a copy -t duration -vf "scale=min(iw*%h%/ih\,%w%):min(%h%\,ih*%w%/iw),pad=%w%:%h%:(%w%-iw)/2:(%h%-ih)/2" -pix_fmt yuv420p out.mp4



------------------------------------
ffmpeg 360 and settings
------------------------------------

ffmpeg -i in.wav -filter_complex "showfreqs=s=640x320:mode=bar[v]" -map '[v]' -map 0:a:0 -vcodec mpeg4 -b:v 466k -r:v 24 out.mp4

ffmpeg -i in.wav -filter_complex  "showfreqs=s=640x320:mode=bar[v]"  -map '[v]' -map 0:a:0 -vcodec mpeg4 -b:v 466k -r:v 24 out2.mp4
ffmpeg -i in.wav -filter_complex  "showvolume=w=200:h=40[v]"  -map '[v]' -map 0:a:0 -vcodec mpeg4 -b:v 466k -r:v 24 out3.mp4
ffmpeg -i in.wav -filter_complex  "showwaves=s=200x40[v]"  -map '[v]' -map 0:a:0 -vcodec mpeg4 -b:v 466k -r:v 24 out4.mp4

ffplay -i out2.mp4  -vf lenscorrection=k1=-0.16:k2=0.12
ffplay -i out2.mp4  -vf perspective=x0=310:y0=10:x1=1100:y1=5:sense=destination
ffplay -i out2.mp4  -vf perspective=x0=310:y0=10:x1=1100:y1=5:sense=source

ffplay -i out2.mp4 -vf scale=640x480,perspective=200:0:420:0:0:H:W:H:sense=1
ffplay -i out2.mp4 -vf perspective=200:0:420:0:0:H:W:H:sense=0.1
ffplay -i out2.mp4 -vf lenscorrection=k1=-0.9927:k2=-0.002
ffplay -i out2.mp4 -vf lenscorrection=k1=-0.627:k2=-0.72
ffplay -i out2.mp4 -vf lenscorrection=k1=0.41:k2=0.4
ffplay -i out2.mp4 -vf stereo3d=sbsl:ml
ffplay -i out2.mp4 -af extrastereo=m=2.5
ffplay -i out2.mp4 -af stereowiden=drymix=0.5
ffplay -i out2.mp4 -vf loop=loop=-1:size=1:start=0
ffplay -i out2.mp4 -vf random=frames=2:5
ffmpeg -i out2.mp4 -vf thumbnail,scale=300:200 -frames:v 1 out.png
ffplay -f lavfi 'amovie=out2.mp4, asplit [a][out1];[a] avectorscope=zoom=1.3:rc=2:gc=200:bc=10:rf=1:gf=8:bf=7 [out0]'

http://www.astro-electronic.de/FFmpeg_Book.pdf
http://www.vsubhash.com/sss-dls/ffmpeg-quick-hacks-book-sample.pdf

https://stackoverflow.com/questions/49603155/perspective-filter-in-ffmpeg-quality
http://www.vsubhash.com/ffmpeg-quick-hacks-book.html
https://hhsprings.bitbucket.io/docs/programming/examples/ffmpeg/manipulating_video_colors/curves.html

https://ffmpeg.org/ffmpeg-filters.html
https://ffmpeg.org/ffmpeg-filters.html#v360

http://manpages.ubuntu.com/manpages/bionic/man1/ffmpeg-filters.1.html
https://processors.wiki.ti.com/index.php/Open_Source_Video_Processing_Tools_-_MPlayer,_FFMpeg,_AviSynth,_MKVToolnix,_MP4Box
https://www.reddit.com/r/ffmpeg/comments/gy5yeb/some_help_with_the_new_v360_filter_for/
https://linuxize.com/post/how-to-install-ffmpeg-on-ubuntu-18-04/
https://tecadmin.net/install-ffmpeg-on-linux/
https://itsfoss.com/ffmpeg/#filters

ffmpeg -i sample_image.jpg -vf v360=input=fisheye:output=c3x2:id_fov=360 output.jpg
ffmpeg -i sample_image.jpg -vf v360:input=fisheye:output=e:id_fov=360 output.jpg

ffplay -i out2.mp4 -vf 'lensfun=make=GoPro:model=HERO5 Black:lens_model=fixed lens:mode=geometry:target_geometry=rectilinear'
ffplay -i out2.mp4 -vf 'lensfun=make=GoPro:model=HERO5 Black:lens_model=fixed lens:mode=geometry:target_geometry=rectilinear:scale=0.4'

ffplay -i out2.mp4 -vf 'lensfun=make=GoPro:model=HERO5 Black:lens_model=fixed lens:mode=geometry:target_geometry=rectilinear:interpolation=lanczos'
ffplay -i out2.mp4 -vf 'lensfun=make=GoPro:model=HERO5 Black:lens_model=fixed lens:mode=geometry:target_geometry=fisheye_stereographic,v360=input=sg:ih_fov=122.6:iv_fov=94.4:output=flat:d_fov=140:pitch=-105:w=320:h=240'

ffplay -i out2.mp4 -vf 'v360=input=sg:ih_fov=122.6:iv_fov=94.4:output=flat:d_fov=149.2:pitch=-90:w=320:h=240'
ffplay -i out2.mp4 -vf 'v360=input=sg:ih_fov=122.6:iv_fov=94.4:output=flat:d_fov=149.2:pitch=-105:w=320:h=240'
ffplay -i out2.mp4 -vf 'v360=input=fisheye:output=c3x2:id_fov=360'
ffplay -i out2.mp4 -vf 'v360:input=fisheye:output=e:id_fov=360'

ffmpeg version 4.3:- v360 filter
avfilter: add v360 filter
ffmpeg -version






ffmpeg -version:            show version
ffmpeg -formats:            show available formats
ffmpeg -codecs:             show available codecs
ffmpeg -decoders:           show available decoders
ffmpeg -encoders:           show available encoders
ffmpeg -bsfs:               show available bit stream filters
ffmpeg -protocols:          show available protocols
ffmpeg -filters:            show available filters
ffmpeg -pix_fmts:           show available pixel formats
ffmpeg -layouts:            show standard channel layouts
ffmpeg -sample_fmts:        show available audio sample formats




https://hhsprings.bitbucket.io/docs/programming/examples/ffmpeg/audio_visualization/_showfreqs_.html
https://gist.github.com/seyoum/4455e9bed74241bfbd640a8083fd38qb3

https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#extrastereo
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#stereotools
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#stereowiden
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#lenscorrection
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#Examples-122
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#perspective
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#random
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#thumbnail
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#ahistogram
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-utils.html#video-size-syntax
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#avectorscope
https://download.mediathekview.de/stabil/tmp/ffmpeg-4.1.4-win64-static/doc/ffmpeg-filters.html#spectrumsynth
https://www.danielplayfaircal.com/blogging/ffmpeg/lensfun/v360/lenscorrection/fisheye/dodgeball/2020/03/24/correcting-lens-distortion-with-ffmpeg.html
https://gist.github.com/nickkraakman/e351f3c917ab1991b7c9339e10578049
https://www.reddit.com/r/ffmpeg/comments/gy5yeb/some_help_with_the_new_v360_filter_for/
https://manpages.debian.org/experimental/ffmpeg/ffmpeg-filters.1.en.html
http://oioiiooixiii.blogspot.com/2018/09/ffmpeg-fapa-frame-averaged-pixel-array.html
https://www.arj.no/tag/ffmpeg/
https://www.arj.no/2011/07/13/videogram-of-bergensbanen/
https://www.arj.no/2011/07/13/difference-between-videogram-and-motiongram/
https://trac.ffmpeg.org/wiki/Scaling
https://qastack.com.de/superuser/556029/how-do-i-convert-a-video-to-gif-using-ffmpeg-with-reasonable-quality
https://trac.ffmpeg.org/wiki/colorspace
https://www.hellocatfood.com/motion-interpolation-for-glitch-aesthetics-using-ffmpeg-part-9/


################################################################################################
#
#	Stop the recording after some period of time / record desktop save every 30 minutes
#
################################################################################################

https://askubuntu.com/questions/436956/stop-the-recording-after-some-period-of-time
https://stackoverflow.com/questions/22763031/record-desktop-save-every-30-minutes
https://trac.ffmpeg.org/wiki/Capture/Desktop

timeout 3600 avconv -f video4linux2 -r 25 -i /dev/video0  -vcodec mpeg4 -y out.mp4
timeout 10s ffmpeg -f x11grab  -y -r 1  -video_size 1920x1080 -i :1.0 -vf format=gray -pix_fmt yuv420p myfile

ffmpeg -f v4l2 -i /dev/video0 -t 01:00:00 output
ffmpeg -f v4l2 -i /dev/video0 -t 3600 output

ffmpeg -f dshow -framerate 30 -i video="screen-capture-recorder" -t 1800 output
ffmpeg -f dshow -framerate 30 -i video="screen-capture-recorder" -t 00:30:00 output

ffmpeg -f dshow -framerate 30 -i video="screen-capture-recorder" -f segment -segment_time 1800 out%03d.flv

################################################################################################
#
#	perfect screen recording quality?
#
################################################################################################
https://unix.stackexchange.com/questions/73622/how-to-get-near-perfect-screen-recording-quality

ffmpeg -f x11grab -s SZ -r 30 -i :0.0 -qscale 0 -vcodec huffyuv grab.avi
ffmpeg -i grab.avi grab.mkv


# check source
echo $DISPLAY
:1

# set source
export DISPLAY=:0.0
export DISPLAY=localhost:0.0
firefox &

https://gist.github.com/kfei/ef3c7fb7d4101f7dc537
https://trac.ffmpeg.org/wiki/Capture/Desktop
https://github.com/cytopia/ffscreencast

################################################################################################
Add Fade In and Fade Out Effects With FFMPEG
################################################################################################
https://dev.to/dak425/add-fade-in-and-fade-out-effects-with-ffmpeg-2bj7


ffmpeg -i video.mp4 -vf "fade=t=in:st=0:d=3" -c:a copy out.mp4
ffmpeg -i video.mp4 -vf "fade=t=out:st=10:d=5" -c:a copy out.mp4

ffmpeg -i music.mp3 -af "afade=t=in:st=0:d=5" out.mp3
ffmpeg -i music.mp3 -af "afade=t=out:st=5:d=5" out.mp3

ffmpeg -i video.mp4 -vf "fade=t=in:st=0:d=10,fade=t=out:st=10:d=5" -c:a copy out.mp4


################################################################################################
# remove recusrively invalid MP4 files
################################################################################################
# show invalid file or write info into files
for i in *.mp4;do ffprobe  -hide_banner $i 2>&1 | grep -io invalid && > $i.txt; done

# remove invalid files
for i in *.mp4;do ffprobe  -hide_banner $i 2>&1 | grep -io invalid && rm $i; done



################################################################################################
# detect error partial file
################################################################################################

#
ffmpeg -v error -i file.avi -f null - 2>error.log

output
[h264 @ 0x56390a5e8280] Invalid NAL unit size (9140 > 3260).
[h264 @ 0x56390a5e8280] Error splitting the input into NAL units.
[mov,mp4,m4a,3gp,3g2,mj2 @ 0x56390a4fd0c0] stream 1, offset 0xaca094: partial file
kaputt_2475801-720p.mp4: Invalid data found when processing input

ffmpeg -v error -i file.avi -f null - 2>&1 | grep -io -m1 'partial file'
# partial file

# recursive
for file in *.mp4; do ffmpeg -v error -i $file -t 5 -ss 00:02:00 -f null - 2>&1 | grep -io -m1 'partial file' && echo $file; done

----------------------------------------------

for file in *.mp4; do ffmpeg -v error -i "$file" -f null - >error.log 2>&1; print "$file"; done

find . -name "*.mp4" -exec ffmpeg -v error -i "{}" -map 0:1 -f null - 2>error.log \;

find . -name "*.mp4" -exec sh -c "ffmpeg -v error -i '{}' -map 0:1 -f null - 2>'{}.log'" \;


################################################################################################
# FFprobeTips
################################################################################################

https://trac.ffmpeg.org/wiki/FFprobeTips
https://ffmpeg.org/ffprobe.html
https://superuser.com/questions/100288/how-can-i-check-the-integrity-of-a-video-file-avi-mpeg-mp4
https://stackoverflow.com/questions/34077302/quickly-check-the-integrity-of-video-files-inside-a-directory-with-ffmpeg
https://stackoverflow.com/questions/14093452/grep-only-the-first-match-and-stop
https://unix.stackexchange.com/questions/269342/how-to-check-if-a-video-is-completely-downloaded


# show all info
ffprobe -v error -show_format -show_streams

# show size
ffprobe -v error -show_entries format=size -of default=noprint_wrappers=1

# show size only value
ffprobe -v error -show_entries format=size -of default=noprint_wrappers=1:nokey=1

# show duration
ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1
ffprobe -v error -select_streams v:0 -show_entries stream=duration -of default=noprint_wrappers=1:nokey=1

# frame rate
ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1

# size
ffprobe -v error -select_streams v:0 -show_entries stream=height,width -of csv=s=x:p=0





