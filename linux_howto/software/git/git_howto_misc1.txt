####################################################################
# save your uncommited changes
# git switch branch without discarding local changes
# https://github.com/rotati/wiki/wiki/How-we-use-master,-staging-and-stable-branch-in-Github
####################################################################

    git stash
    git stash apply
    git stash clear
    git stash list
    git stash apply stash@{x}

    How to test a merge without actually merging first

    git reset --merge
    git merge --abort
    git rebase --abort
    git merge --ff-only

####################################################################
#
#   Git unstage last commits
#
####################################################################

     Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)
    Untracked files:
      (use "git add <file>..." to include in what will be committed)

#######################################################################
#
#   git statistics
#
#######################################################################

    https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/1838938#1838938
    https://stackoverflow.com/questions/9839083/git-number-of-commits-per-author-on-all-branches

    git log --pretty=format:"author: %an, %ae %n commiter: %cn, %ce %n --------------- %n Info: %s"
    git log --graph --oneline --full-history --all
    git log --graph --full-history --all

    # pretty v1
    git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'

    # pretty v2
    git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'

    # pretty v3
    git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n'' %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    # count total commits by branchname
    git log branchname --pretty=oneline | wc -l
    git rev-list --all | wc -l
    git log --all --format=%h | wc -l

    # count total commits by user
    git shortlog -s
    git shortlog -s -n

    # get commits by day
    git log --pretty=format:%cd --date=short | uniq -c
    git log --pretty=format:%cd --date=short | uniq -c | grep -i '2019'

    # top commits DESC + Email
    git shortlog -s -n --all --no-merges
    git shortlog -s -n -e --all --no-merges
    git shortlog -s -n -e --all --no-merges --since="22 Aug 2018" --before="01 Feb 2019"

###################################################
#
#	Viewing Unpushed Git Commits - uncommited unmerged changes
#
###################################################

    https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits
    https://makandracards.com/makandra/927-git-see-all-unpushed-commits-or-commits-that-are-not-in-another-branch

    git log origin/master..HEAD --graph --oneline --all --decorate --color
    git diff origin/master..HEAD
    git log origin..


    git log --branches --not --remotes
    git log --branches --not --remotes --simplify-by-decoration --decorate --oneline
    git cherry -v

###################################################
Git Tutorial - Command-Line Fundamentals
https://www.youtube.com/watch?v=e2IbNHi4uCI
https://www.youtube.com/watch?v=HVsySz-h9r4
###################################################

    git checkout branch_name # switch
    git switch branch_name  # switch

    git branch -m new_branch_name # rename
    git push -u origin  branch_name # push

    git branch --track feature/proj1 origin/feature/proj1 # tracking connection
    git checkout --track origin/feature/proj1  # tracking connection

    git push origin --delete feature/proj1

    git merge branch_name  # merge
    git rebase branch_name # merge

    git log main..feature/proj1 # diff compaire


    git config --list
    git config --global user.name "some user"
    git config --global user.email "some email"

    #git config --global color.ui true
    #git config --global diff.tool diffmerge
    #git config --global difftool.diffmerge.cmd diffmerge "$LOCAL" "$REMOTE"
    #git config --global merge.tool diffmerge

    git help config
    git config --help
    git help merge

    get init
    get status
    touch .gitignore
    git add .gitignore
    git reset .gitignore # remove add
    git reset # remove all files from add .

    git remote -v # view info
    git branch -a # view info

    git branch proj123
    git checkout proj123
    git branch

###################################################
#  performance update - git gc
###################################################

    Auto packing the repository in background for optimum performance.
    See "git help gc" for manual housekeeping.

-----------------------
remove local untracked files from the current Git branch
-----------------------
    git clean -fd

    To remove directories, run git clean -f -d or git clean -fd.
    To remove ignored files, run git clean -f -X or git clean -fX.
    To remove ignored and non-ignored files, run git clean -f -x or git clean -fx.


###################################################
#   git pull --rebase
###################################################

    Hinweis: Es wird davon abgeraten zu Pullen, ohne anzugeben, wie mit abweichenden
    Hinweis: Branches umgegangen werden soll. Sie können diese Nachricht unterdrücken,
    Hinweis: indem Sie einen der folgenden Befehle ausführen, bevor der nächste Pull
    Hinweis: ausgeführt wird:
    Hinweis:
    Hinweis:   git config pull.rebase false  # Merge (Standard-Strategie)
    Hinweis:   git config pull.rebase true   # Rebase
    Hinweis:   git config pull.ff only       # ausschließlich Vorspulen
    Hinweis:
    Hinweis: Sie können statt "git config" auch "git config --global" nutzen, um
    Hinweis: einen Standard für alle Repositories festzulegen. Sie können auch die
    Hinweis: Option --rebase, --no-rebase oder --ff-only auf der Kommandozeile nutzen,
    Hinweis: um das konfigurierte Standardverhalten pro Aufruf zu überschreiben.



###################################################
#   Git Basics - Tagging
###################################################

    https://git-scm.com/book/en/v2/Git-Basics-Tagging
    https://git-scm.com/docs/git-tag
    https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag
    https://www.freecodecamp.org/news/git-tag-explained-how-to-add-remove/

    // show tags
    git tag
    git tag -l "v1.8.5*"

    // Annotated Tags
    git tag -a v1.4 -m "my version 1.4"
    git show v1.4

    // Lightweight Tags
    git tag v1.4-lw
    git tag

    // tag to commit
    git tag -a v1.2 9fceb02

    // push tag rmote
    git push origin v1.5
    git push origin --tags

    // checkout
    git checkout v0.0.3


    // Deleting Tags
    git tag -d v1.4-lw
    git tag --delete v0.0.2
    git push origin :refs/tags/v1.4-lw

    git log --pretty=oneline
    ----------------------------------------

    git restore --staged file # remove file from list
    git restore file #

####################################################
undo merge
#######################################################

    https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet

    git reset --hard HEAD~1
    # git reset --hard commit_sha
    # git reset --hard origin/master
    # git reset --merge ORIG_HEAD


    # undo a merge that was already pushed:
    git revert -m 1 commit_hash


####################################################
git checkout a Remote Branch
####################################################

    https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch
    https://www.git-tower.com/learn/git/faq/checkout-remote-branch
    https://www.freecodecamp.org/news/git-checkout-remote-branch-tutorial/
    https://stackify.com/git-checkout-remote-branch/


    With One Remote

    git fetch
    git checkout test

    git checkout -b test <name of remote>/test
    git checkout -t <name of remote>/test

    With >1 Remotes

    git fetch origin
    git branch -v -a

    git checkout -b test origin/test

    git fetch origin test
    git fetch origin feature/blab-44

------------------------------------------------------------------------

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by switching back to a branch.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -c with the switch command. Example:

      git switch -c <new-branch-name>

    Or undo this operation with:

      git switch -

    Turn off this advice by setting config variable advice.detachedHead to false

    ------------------------------------------------------------------------

    hint: Pulling without specifying how to reconcile divergent branches is
    hint: discouraged. You can squelch this message by running one of the following
    hint: commands sometime before your next pull:
    hint:
    hint:   git config pull.rebase false  # merge (the default strategy)
    hint:   git config pull.rebase true   # rebase
    hint:   git config pull.ff only       # fast-forward only
    hint:
    hint: You can replace "git config" with "git config --global" to set a default
    hint: preference for all repositories. You can also pass --rebase, --no-rebase,
    hint: or --ff-only on the command line to override the configured default per
    hint: invocation.

    # git merge --abort
    git fetch origin feature/name-1:feature/name-1
    ------------------------------------------------------------------------

    (use "git restore --staged <file>..." to unstage)



####################################################
Delete merged branches
####################################################

    https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged
    https://www.edmondscommerce.co.uk/handbook/Development-Tools/Git/Git-Toolbox/
    https://github-wiki-see.page/m/zielu/GitToolBox/wiki/Manual
    https://dev.to/rajmaharjan/delete-merged-branches-using-one-command-557k

    git branch --merged
    git branch --merged| egrep -v "(^\*|master|main|dev)"
    git branch --merged | egrep -v "(^\*|master|main|dev)" | xargs git branch -d

    git branch -d branchname


    GitToolBox in IntelliJ

    Cleanup can be executed manually from Git / GitToolBox / Git Branches Cleanup or automatically.
    Branches can be excluded using glob patterns.


####################################################
How to remove local untracked files from the current Git branch
####################################################

    https://koukia.ca/how-to-remove-local-untracked-files-from-the-current-git-branch-571c6ce9b6b1
    https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree

    # see which files will be deleted
    git clean -n
    git clean --dry-run

    # delete the files
    git clean -f
    git clean -fd

    # remove directories
    git clean -f -d
    git clean -fd

    # remove ignored files
    git clean -f -X
    git clean -fX

    # remove ignored and non-ignored files
    git clean -f -x
    git clean -fx

####################################################
GIT Messages
####################################################

    https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/

    Basic:
    git commit -m <message>

    Detailed:
    git commit -m <title> -m <description>

####################################################
Marking Unfinished Pull Requests
https://www.kubernetes.dev/docs/guide/pull-requests/
####################################################

    If you want to solicit reviews before the implementation of your pull request is complete, you should hold
    your pull request to ensure that Tide does not pick it up and attempt to merge it. There are two methods to achieve this:

    You may add the /hold or /hold cancel comment commands
    You may add or remove a WIP or [WIP] prefix to your pull request title

####################################################
Your branch is based on 'origin/blabla', but the upstream is gone.
(use "git branch --unset-upstream" to fixup)
####################################################

    git status

    https://stackoverflow.com/questions/21609781/why-call-git-branch-unset-upstream-to-fixup
    https://stackoverflow.com/questions/37770467/why-do-i-have-to-git-push-set-upstream-origin-branch

    git branch -a

    git fetch
    git pull
    git pull --rebase origin master
    git fetch remote
    git push origin master

    git remote add origin https://(address of your repo) it can be https or ssh
    then
    git push -u origin master
    # git push --set-upstream origin fix-some

    git branch --set-upstream-to origin/solaris


    git checkout master
    git checkout -b solaris123
    git push --set-upstream origin solaris123

    git checkout solaris123
    git commit -m "new change"
    git review solaris123

    git checkout master
    git cherry-pick 6de64624gf67
    git review
    git pull origin solaris123

####################################################
reset  emote repository
####################################################

    https://stackoverflow.com/questions/2006172/git-how-to-reset-a-remote-git-repository-to-remove-all-commits
    https://www.cloudsavvyit.com/14460/how-to-completely-reset-a-git-repository-including-untracked-files/
    https://www.educative.io/edpresso/how-to-reset-a-git-branch-to-a-remote-repository

    rm -rf .git
    git init
    git add .
    git commit -m 'Initial commit'

    #git commit .gitignore -m "first file"
    #git rm --cached .gitignore
    #git restore --staged .gitignore

    git remote add origin <url>
    git push --force --set-upstream origin main






####################################################
github: Adding commits to existing pull request
####################################################

https://stackoverflow.com/questions/10147445/github-adding-commits-to-existing-pull-request
https://tighten.co/blog/adding-commits-to-a-pull-request/
https://www.digitalocean.com/community/tutorials/how-to-rebase-and-update-a-pull-request###
https://www.burntfen.com/2015-10-30/how-to-amend-a-commit-on-a-github-pull-request####
https://web-platform-tests.org/reviewing-tests/git.html
https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests
https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork
https://www.coursera.org/lecture/introduction-git-github/updating-an-existing-pull-request-aRZ95


git commit -m "These changes are in response to PR comments"
git push -f origin HEAD

Create a new pull request which is bound to master instead of a specific abc1234 revision.
Any new commit/push to your repository will be added to the pull request.

?
git commit --amend

https://www.coursera.org/lecture/introduction-git-github/squashing-changes-6ODVl
Squashing Changes
git rebase -i

-------------------------
####################################################
Rewriting history
####################################################
git commit --amend

https://www.atlassian.com/git/tutorials/rewriting-history
https://linuxize.com/post/change-git-commit-message/
https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message


To change the message of the most recent commit that has not been pushed to the remote repository, commit it again using the --amend flag.
Navigate to the repository directory in your terminal.

Run the following command to amend (change) the message of the latest commit:
git commit --amend -m "New commit message."

---

Commit has not been pushed online
If the commit only exists in your local repository and has not been pushed to GitHub.com,
you can amend the commit message with the git commit --amend command.
On the command line, navigate to the repository that contains the commit you want to amend.

Type git commit --amend and press Enter.

In your text editor, edit the commit message, and save the commit.

---

git add .
git commit --amend -m "New commit message."



####################################################
Is there a command to undo git init?
####################################################
https://stackoverflow.com/questions/3212459/is-there-a-command-to-undo-git-init

rm -rf .git




###########################################################################
How to stack a second pull request on top of an existing one before either are accepted? Stacked pull
###########################################################################


https://stackoverflow.com/questions/39662798/how-to-stack-a-second-pull-request-on-top-of-an-existing-one-before-either-are-a
https://blog.logrocket.com/using-stacked-pull-requests-in-github/
https://docs.github.com/en/codespaces/overview

If your second change absolutely depend on the first one, then... yes.

That being said, you should resolve PR A first, meaning the maintainer of the original
repo should evaluate, accept and merge your first PR.

In the meantime, you can make a new branch for B, based on A, and push that
branch to your fork, but you should not make a new PR before the first is resolved.
Especially if the first PR is rejected.

In the OP's case:

I ended up treating all my stacked changes as one pull request and if they want to review
sensibly they could click into each commit one by one

That makes sense when all those changes can be reviewed as one big new evolution.
The best practice recommends small incremental changes but in this instance, adding commit
to an existing PR (since, indeed, there is no way to "stack PR") is the way
to move forward with the development process.

stacked pull requests
-----------------------------------
When and why should you use stacked PRs?
TL;DR:

To split large PRs
To share a piece of code between multiple feature branches
To make it easy for two people to work on the same feature

How to stack pull requests
----------------------------
git status # we are on master
On branch master

$ git checkout -b ts-setup # checkout from master
$ npm i -D typescript && npx tsc --init
$ git add . && git commit -m 'Setup TypeScript'
$ git push -u origin ts-setup


git status
On branch ts-setup
----------------------------
$ git checkout -b migrate-components # checkout from ts-setup
$ mv components/Button.jsx components/Button.tsx
$ git add . && git commit -m 'Migrate button to TS'
$ git push -u origin migrate-components


Splitting an existing large PR into a stack of PRs
----------------------------
git checkout migrate-to-firebase
$ git reset --soft develop
$ git restore --staged .


How can I count number of commits between two branches?
----------------------------
https://stackoverflow.com/questions/26413617/how-can-i-count-number-of-commits-between-two-branches

git log --oneline mybranch ^master
git log --oneline mybranch ^master | wc -l
git rev-list --count my-branch ^master
git rev-list --count master..my-branch
git cherry master | wc -l



###########################################
Working on a branch with a dependence on another branch that is being reviewed
###########################################
https://softwareengineering.stackexchange.com/questions/351727/working-on-a-branch-with-a-dependence-on-another-branch-that-is-being-reviewed
https://softwareengineering.stackexchange.com/questions/241267/developers-blocked-by-waiting-on-code-to-merge-from-another-branch-using-gitflow?rq=1
https://softwareengineering.stackexchange.com/questions/289309/proper-git-repository-usage-that-accommodates-feature-branches-and-parallel-test?rq=1
https://softwareengineering.stackexchange.com/questions/290391/avoid-branch-conflicts-race-conditions-with-task-branches?rq=1

https://softwareengineering.stackexchange.com/questions/406621/git-commit-hashes-and-git-merging-between-branches?rq=1
https://stackoverflow.com/questions/38206196/merge-one-local-branch-into-another-local-branch
https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
https://www.git-tower.com/learn/git/commands/git-merge
https://www.jetbrains.com/help/webstorm/apply-changes-from-one-branch-to-another.html
https://www.jetbrains.com/help/phpstorm/apply-changes-from-one-branch-to-another.html#rebase-branch

git checkout -b featureA
git push featureA # PR

git checkout -b featureB
git merge featureA
git push featureB # PR


Important Options
--no-ff
Creates a merge commit even when a fast-forward would be possible.

--squash
Combines all integrated changes into a single commit, instead of preserving them as individual commits.

--abort
When a conflict occurs, this option can be used to abort the merge and restore the project's state as it was before starting the merge.



....
###########################################
Difference between git pull --rebase and git pull --ff-only
###########################################
--ff-only applies the remote changes only if they can be fast-forwarded.

Refuse to merge and exit with a non-zero status unless the current HEAD is already up-to-date or the merge can be resolved as a fast-forward

https://stackoverflow.com/questions/25430600/difference-between-git-pull-rebase-and-git-pull-ff-only
https://blog.sffc.xyz/post/185195398930/why-you-should-use-git-pull-ff-only-git-is-a

/// A -- B -- C -- D
git pull --rebase

[is roughly equivalent to:]

git fetch
git rebase origin/master
///


///
git pull --ff-only

[corresponds to]

git fetch
git merge --ff-only origin/master
///



# git fetch origin master:master && git rebase master
# git pull --rebase
# git pull --ff-only
# git config --global pull.ff only

------------------


###################################################################
fatal: unsafe repository ('/home/repon' is owned by someone else)
###################################################################
https://stackoverflow.com/questions/71901632/fatal-unsafe-repository-home-repon-is-owned-by-someone-else
https://community.atlassian.com/t5/Jira-questions/Exited-with-code-128-saying-fatal-unsafe-repository/qaq-p/2005499
https://github.com/actions/checkout/issues/766
https://github.com/actions/checkout/issues/760
https://community.mailcow.email/d/1547-error-updating-from-2022-03a-fatal-unsafe-repository

git config --global --add safe.directory *
git config --global --add safe.directory your-directory
git config --global --add safe.directory <repo-path>

Here are 4 possible solutions:

trust git directory (do it if you know the directory contents are safe)
git config --global --add safe.directory /home/repon

This adds to ~/.gitconfig the safe group as shown in this example

[safe]
    directory = /home/repon
run the command as the correct user, for example:
sudo -u ubuntu -- git status

you will need to add a new file inside /etc/sudoers.d/ with the following contents:

www-data ALL=(ubuntu) NOPASSWD: /usr/bin/git

This may have security implications so refer to your security guy first.

change git repository owner to www-data
sudo chown -R www-data:www-data /home/repon


################################################################################
Configure Git to merge using ort
################################################################################

https://medium.com/the-scale-factory/configure-git-to-merge-using-ort-92fc0d450169
https://stackoverflow.com/questions/55998614/merge-made-by-recursive-strategy
https://github.blog/2021-08-16-highlights-from-git-2-33/
https://git-scm.com/docs/git-pull

git config pull.twohead ort
git config --global pull.twohead ort

git config pull.twohead recursive
git config --global pull.twohead recursive

git merge -s ort <branch>
git merge -sort <branch>
git merge --strategy=ort <branch>