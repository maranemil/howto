####################################################################
# save your uncommited changes
# git switch branch without discarding local changes
# https://github.com/rotati/wiki/wiki/How-we-use-master,-staging-and-stable-branch-in-Github
####################################################################

    git stash
    git stash apply
    git stash clear
    git stash list
    git stash apply stash@{x}

    How to test a merge without actually merging first

    git reset --merge
    git merge --abort
    git rebase --abort
    git merge --ff-only

####################################################################
#
#   Git unstage last commits
#
####################################################################

     Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)
    Untracked files:
      (use "git add <file>..." to include in what will be committed)

#######################################################################
#
#   git statistics
#
#######################################################################

    https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/1838938#1838938
    https://stackoverflow.com/questions/9839083/git-number-of-commits-per-author-on-all-branches

    git log --pretty=format:"author: %an, %ae %n commiter: %cn, %ce %n --------------- %n Info: %s"
    git log --graph --oneline --full-history --all
    git log --graph --full-history --all

    # pretty v1
    git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'

    # pretty v2
    git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'

    # pretty v3
    git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n'' %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    # count total commits by branchname
    git log branchname --pretty=oneline | wc -l
    git rev-list --all | wc -l
    git log --all --format=%h | wc -l

    # count total commits by user
    git shortlog -s
    git shortlog -s -n

    # get commits by day
    git log --pretty=format:%cd --date=short | uniq -c
    git log --pretty=format:%cd --date=short | uniq -c | grep -i '2019'

    # top commits DESC + Email
    git shortlog -s -n --all --no-merges
    git shortlog -s -n -e --all --no-merges
    git shortlog -s -n -e --all --no-merges --since="22 Aug 2018" --before="01 Feb 2019"

###################################################
#
#	Viewing Unpushed Git Commits - uncommited unmerged changes
#
###################################################

    https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits
    https://makandracards.com/makandra/927-git-see-all-unpushed-commits-or-commits-that-are-not-in-another-branch

    git log origin/master..HEAD --graph --oneline --all --decorate --color
    git diff origin/master..HEAD
    git log origin..


    git log --branches --not --remotes
    git log --branches --not --remotes --simplify-by-decoration --decorate --oneline
    git cherry -v

###################################################
Git Tutorial - Command-Line Fundamentals
https://www.youtube.com/watch?v=e2IbNHi4uCI
https://www.youtube.com/watch?v=HVsySz-h9r4
###################################################

    git checkout branch_name # switch
    git switch branch_name  # switch

    git branch -m new_branch_name # rename
    git push -u origin  branch_name # push

    git branch --track feature/proj1 origin/feature/proj1 # tracking connection
    git checkout --track origin/feature/proj1  # tracking connection

    git push origin --delete feature/proj1

    git merge branch_name  # merge
    git rebase branch_name # merge

    git log main..feature/proj1 # diff compaire


    git config --list
    git config --global user.name "some user"
    git config --global user.email "some email"

    #git config --global color.ui true
    #git config --global diff.tool diffmerge
    #git config --global difftool.diffmerge.cmd diffmerge "$LOCAL" "$REMOTE"
    #git config --global merge.tool diffmerge

    git help config
    git config --help
    git help merge

    get init
    get status
    touch .gitignore
    git add .gitignore
    git reset .gitignore # remove add
    git reset # remove all files from add .

    git remote -v # view info
    git branch -a # view info

    git branch proj123
    git checkout proj123
    git branch

###################################################
#  performance update - git gc
###################################################

    Auto packing the repository in background for optimum performance.
    See "git help gc" for manual housekeeping.

-----------------------
remove local untracked files from the current Git branch
-----------------------
    git clean -fd

    To remove directories, run git clean -f -d or git clean -fd.
    To remove ignored files, run git clean -f -X or git clean -fX.
    To remove ignored and non-ignored files, run git clean -f -x or git clean -fx.


###################################################
#   git pull --rebase
###################################################

    Hinweis: Es wird davon abgeraten zu Pullen, ohne anzugeben, wie mit abweichenden
    Hinweis: Branches umgegangen werden soll. Sie können diese Nachricht unterdrücken,
    Hinweis: indem Sie einen der folgenden Befehle ausführen, bevor der nächste Pull
    Hinweis: ausgeführt wird:
    Hinweis:
    Hinweis:   git config pull.rebase false  # Merge (Standard-Strategie)
    Hinweis:   git config pull.rebase true   # Rebase
    Hinweis:   git config pull.ff only       # ausschließlich Vorspulen
    Hinweis:
    Hinweis: Sie können statt "git config" auch "git config --global" nutzen, um
    Hinweis: einen Standard für alle Repositories festzulegen. Sie können auch die
    Hinweis: Option --rebase, --no-rebase oder --ff-only auf der Kommandozeile nutzen,
    Hinweis: um das konfigurierte Standardverhalten pro Aufruf zu überschreiben.



###################################################
#   Git Basics - Tagging
###################################################

    https://git-scm.com/book/en/v2/Git-Basics-Tagging
    https://git-scm.com/docs/git-tag
    https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag
    https://www.freecodecamp.org/news/git-tag-explained-how-to-add-remove/

    // show tags
    git tag
    git tag -l "v1.8.5*"

    // Annotated Tags
    git tag -a v1.4 -m "my version 1.4"
    git show v1.4

    // Lightweight Tags
    git tag v1.4-lw
    git tag

    // tag to commit
    git tag -a v1.2 9fceb02

    // push tag rmote
    git push origin v1.5
    git push origin --tags

    // checkout
    git checkout v0.0.3


    // Deleting Tags
    git tag -d v1.4-lw
    git tag --delete v0.0.2
    git push origin :refs/tags/v1.4-lw

    git log --pretty=oneline
    ----------------------------------------

    git restore --staged file # remove file from list
    git restore file #

####################################################
undo merge
#######################################################

    https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet

    git reset --hard HEAD~1
    # git reset --hard commit_sha
    # git reset --hard origin/master
    # git reset --merge ORIG_HEAD


    # undo a merge that was already pushed:
    git revert -m 1 commit_hash


####################################################
git checkout a Remote Branch
####################################################

    https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch
    https://www.git-tower.com/learn/git/faq/checkout-remote-branch
    https://www.freecodecamp.org/news/git-checkout-remote-branch-tutorial/
    https://stackify.com/git-checkout-remote-branch/


    With One Remote

    git fetch
    git checkout test

    git checkout -b test <name of remote>/test
    git checkout -t <name of remote>/test

    With >1 Remotes

    git fetch origin
    git branch -v -a

    git checkout -b test origin/test

    git fetch origin test
    git fetch origin feature/blab-44

------------------------------------------------------------------------

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by switching back to a branch.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -c with the switch command. Example:

      git switch -c <new-branch-name>

    Or undo this operation with:

      git switch -

    Turn off this advice by setting config variable advice.detachedHead to false

    ------------------------------------------------------------------------

    hint: Pulling without specifying how to reconcile divergent branches is
    hint: discouraged. You can squelch this message by running one of the following
    hint: commands sometime before your next pull:
    hint:
    hint:   git config pull.rebase false  # merge (the default strategy)
    hint:   git config pull.rebase true   # rebase
    hint:   git config pull.ff only       # fast-forward only
    hint:
    hint: You can replace "git config" with "git config --global" to set a default
    hint: preference for all repositories. You can also pass --rebase, --no-rebase,
    hint: or --ff-only on the command line to override the configured default per
    hint: invocation.

    # git merge --abort
    git fetch origin feature/name-1:feature/name-1
    ------------------------------------------------------------------------

    (use "git restore --staged <file>..." to unstage)



####################################################
Delete merged branches
####################################################

    https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged
    https://www.edmondscommerce.co.uk/handbook/Development-Tools/Git/Git-Toolbox/
    https://github-wiki-see.page/m/zielu/GitToolBox/wiki/Manual
    https://dev.to/rajmaharjan/delete-merged-branches-using-one-command-557k

    git branch --merged
    git branch --merged| egrep -v "(^\*|master|main|dev)"
    git branch --merged | egrep -v "(^\*|master|main|dev)" | xargs git branch -d

    git branch -d branchname


    GitToolBox in IntelliJ

    Cleanup can be executed manually from Git / GitToolBox / Git Branches Cleanup or automatically.
    Branches can be excluded using glob patterns.


####################################################
How to remove local untracked files from the current Git branch
####################################################

    https://koukia.ca/how-to-remove-local-untracked-files-from-the-current-git-branch-571c6ce9b6b1
    https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree

    # see which files will be deleted
    git clean -n
    git clean --dry-run

    # delete the files
    git clean -f
    git clean -fd

    # remove directories
    git clean -f -d
    git clean -fd

    # remove ignored files
    git clean -f -X
    git clean -fX

    # remove ignored and non-ignored files
    git clean -f -x
    git clean -fx

####################################################
GIT Messages
####################################################

    https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/

    Basic:
    git commit -m <message>

    Detailed:
    git commit -m <title> -m <description>

####################################################
Marking Unfinished Pull Requests
https://www.kubernetes.dev/docs/guide/pull-requests/
####################################################

    If you want to solicit reviews before the implementation of your pull request is complete, you should hold
    your pull request to ensure that Tide does not pick it up and attempt to merge it. There are two methods to achieve this:

    You may add the /hold or /hold cancel comment commands
    You may add or remove a WIP or [WIP] prefix to your pull request title

####################################################
Your branch is based on 'origin/blabla', but the upstream is gone.
(use "git branch --unset-upstream" to fixup)
####################################################

    git status

    https://stackoverflow.com/questions/21609781/why-call-git-branch-unset-upstream-to-fixup
    https://stackoverflow.com/questions/37770467/why-do-i-have-to-git-push-set-upstream-origin-branch

    git branch -a

    git fetch
    git pull
    git pull --rebase origin master
    git fetch remote
    git push origin master

    git remote add origin https://(address of your repo) it can be https or ssh
    then
    git push -u origin master
    # git push --set-upstream origin fix-some

    git branch --set-upstream-to origin/solaris


    git checkout master
    git checkout -b solaris123
    git push --set-upstream origin solaris123

    git checkout solaris123
    git commit -m "new change"
    git review solaris123

    git checkout master
    git cherry-pick 6de64624gf67
    git review
    git pull origin solaris123

####################################################
reset  emote repository
####################################################

    https://stackoverflow.com/questions/2006172/git-how-to-reset-a-remote-git-repository-to-remove-all-commits
    https://www.cloudsavvyit.com/14460/how-to-completely-reset-a-git-repository-including-untracked-files/
    https://www.educative.io/edpresso/how-to-reset-a-git-branch-to-a-remote-repository

    rm -rf .git
    git init
    git add .
    git commit -m 'Initial commit'

    #git commit .gitignore -m "first file"
    #git rm --cached .gitignore
    #git restore --staged .gitignore

    git remote add origin <url>
    git push --force --set-upstream origin main
