##############################################################
Git force commit and push , when getting "nothing to commit"
##############################################################
https://stackoverflow.com/questions/56396762/git-force-commit-and-push-when-getting-nothing-to-commit
https://stackoverflow.com/questions/7929369/how-to-rebase-local-branch-onto-remote-master

git commit --allow-empty -m "testing"

##############################################################
rebase vs merge
##############################################################
https://www.youtube.com/watch?v=k74B8sc3pRo

https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/How-to-git-rebase-master-to-any-branch-example
https://git-scm.com/book/de/v2/Git-Branching-Rebasing
https://git-scm.com/book/en/v2/Git-Branching-Rebasing
https://stackoverflow.com/questions/7929369/how-to-rebase-local-branch-onto-remote-master
https://www.algolia.com/blog/engineering/master-git-rebase/
https://www.algolia.com/developers-tech-blog/code-and-deep-dives/master-the-rebase-and-the-other-way-around/

git rebase develop master
git fetch origin            # Updates origin/master
git rebase origin/master    # Rebases current branch onto origin/master

##############################################################
This commit is unreachable from any branch or tag in this repository. It may be from a fork outside of this repository.
##############################################################

https://stackoverflow.com/questions/3765234/listing-and-deleting-git-commits-that-are-under-no-branch-dangling
https://www.atlassian.com/git/tutorials/git-prune
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository
https://github.com/grafana/grafana/issues/45642
https://stackoverflow.com/questions/3765234/listing-and-deleting-git-commits-that-are-under-no-branch-dangling
https://sethrobertson.github.io/GitFixUm/fixup.html

git fsck --no-reflogs
Checking object directories: 100% (256/256), done.
Checking objects: 100% (7077/7077), done.
dangling commit ac925c04c874765b96d2afcf479c86f91971bc56
dangling blob 201cd37043554b923e14d3c549421bc85c9d6433

git fsck | grep "dangling blob" | while read x x s; do
  git show $s | less;
done

git fsck --unreachable


git stash clear
git reflog expire --expire-unreachable=now --all
git fsck --unreachable
#git fsck --full
git gc --prune=now


git fsck --no-reflogs
git reflog expire --expire-unreachable=now --all
git gc --prune=now


git branch --contains <commit>
git reflog expire --expire-unreachable=now --all
git gc --prune=now
git show <commit>


git prune --dry-run --verbose
git reflog expire --expire=now --expire-unreachable=now --all
git prune --dry-run --verbose --expire=now
# git fetch --all && git remote prune


git reflog expire --expire-unreachable=now --all
git gc --prune=now
git fsck --unreachable --no-reflogs   # no output
git branch -a --contains <commit>     # no output
git show <commit>                     # still shows up
git tag -d <tagname>


##############################################################
How do I remove/decline a commit that's been appended to an open pull request ?
##############################################################

https://community.atlassian.com/t5/Bitbucket-questions/How-do-I-remove-decline-a-commit-that-s-been-appended-to-an-open/qaq-p/978093
https://community.atlassian.com/t5/Jira-Software-questions/How-to-reset-the-number-of-commits-associate-with-a-Jira-issue/qaq-p/1821250
https://www.atlassian.com/git/tutorials/merging-vs-rebasing
https://support.atlassian.com/jira-software-cloud/docs/reference-issues-in-your-development-work/
https://community.atlassian.com/t5/Jira-questions/How-to-clean-up-the-commits-in-Jira-if-we-commit-and-push/qaq-p/1403003
https://community.atlassian.com/t5/Jira-questions/Disable-hide-the-commits-tab-in-the-activity-section-of-the/qaq-p/285946
https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/

git checkout PR-SOURCE-BRANCH
git checkout -b PR-SOURCE-BRANCH-backup
git push
git push --force origin <COMMIT-ID-TO-GO-BACK-TO>:refs/heads/PR-SOURCE-BRANCH


Decline the open pull request.
Checkout the branch locally in your repository.
Remove the branch in Bitbucket (we will recreate it later).
Do a fetch in your local repository to remove the reference to the removed branch.
Create a new branch for the new commits.
Reset the original branch to the last commit that was approved in the Pull Request.
Push the original branch back to Bitbucket.
Reopen the declined Pull Request





git checkout YourBranch
git pull --rebase
git push --force-with-lease


git fetch origin
git rebase origin/master
git add .
git rebase --continue
git push --force


git checkout [master branch]
git pull [master branch]
git checkout [source branch]
git rebase [master branch]
git pull [source branch] (remote/source branch)
git push [source branch]
git push -u origin [source branch]




##############################################################
misc
##############################################################

https://stackoverflow.com/questions/7929369/how-to-rebase-local-branch-onto-remote-master
https://www.jetbrains.com/help/phpstorm/commit-and-push-changes.html#force-push
https://docs.gitlab.com/ee/topics/git/git_rebase.html
https://www.codegrepper.com/code-examples/shell/force+commit+in+git
https://www.git-tower.com/learn/git/commands/git-revert
https://www.git-tower.com/learn/git/faq/git-force-push
https://stackoverflow.com/questions/5509543/how-do-i-properly-force-a-git-push
https://ncona.com/2011/07/how-to-delete-a-commit-in-git-local-and-remote/
https://stackoverflow.com/questions/37770467/why-do-i-have-to-git-push-set-upstream-origin-branch
https://devconnected.com/how-to-set-upstream-branch-on-git/
https://stackoverflow.com/questions/66153340/how-to-recover-code-after-git-push-set-upstream-origin-master
https://www.codegrepper.com/code-examples/shell/git+push+--set-upstream
https://www.atlassian.com/git/tutorials/merging-vs-rebasing
https://stackoverflow.com/questions/14836696/delete-last-commit-in-bitbucket
https://wiki.eclipse.org/EGit/User_Guide
https://www.atlassian.com/git/tutorials/big-repositories
https://www.clock.co.uk/insight/deleting-a-git-commit
https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git

https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/
git revert
git revert a72ef02
git revert a72ef02 --no-commit

git push --set-upstream




##############################################################
How do I export my project as a .zip of git repository?
##############################################################
https://stackoverflow.com/questions/55515678/how-do-i-export-my-project-as-a-zip-of-git-repository

git archive --format zip --output /full/path/to/zipfile.zip master


##############################################################
git pull vs git fetch
##############################################################

git pull origin master
git pull --rebase origin master

git fetch --prune
git fetch origin --recurse-submodules=no --progress --prune

git pull origin <remote branch name>, it will fetch the remote branch and then merge it into your current local branch.


##############################################################
Idiot proof git
##############################################################

https://softwaredoug.com/blog/2022/11/09/idiot-proof-git-aliases.html

[alias]
  # *********************
  # Rebase workflow
    mainbranch = "!git remote show origin | sed -n '/HEAD branch/s/.*: //p'"
    synced = "!git pull origin $(git mainbranch) --rebase"
    update = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"
    squash = "!git rebase -v -i $(git mainbranch)"
    publish = push origin HEAD --force-with-lease
    pub = publish



#####################################################
Branch naming conventions
#####################################################


https://stackoverflow.com/questions/273695/what-are-some-examples-of-commonly-used-practices-for-naming-git-branches
https://codingsight.com/git-branching-naming-convention-best-practices/
https://hackernoon.com/git-branch-naming-convention-7-best-practices-to-follow-1c2l33g2

The best practices of the Git branch naming convention

1. Starting branch name with a category word
	WIP - Work in progress and needs your attention.
	Bug - A bug or an error that needs fixing promptly.
2. Using unique issue tracker IDs in branch names
3. Using hyphen or slash separators
4. Using author name in Git branch
5. Avoid using just numerals
6. Avoid simultaneous naming convention
7. Avoid long names



Bug – The bug which needs to be fixed soon
WIP – The work is in progress, and I am aware it will not finish soon

bug-logo-alignment-issue
wip-8712-add-testing-module
wip-ioc-container-added
feature_upgrade_jquery_version_login_module
rajeev.bera_feature_new-experimental-changes
wip_feature_login_module


wip       Works in progress; stuff I know won't be finished soon
feat      Feature I'm adding or expanding
bug       Bug fix or experiment
junk      Throwaway branch created to experiment


Bug Fix
Hot Fix
Feature Branches
Experimental Branches
WIP branches

wip-8712-add-testing-module
featureupgradejqueryversionloginmodule

new/frabnotz
new/foo
new/bar
test/foo
test/frabnotz
ver/foo


Driessen's model includes

A master branch, used only for release. Typical name master.

A "develop" branch off of that branch. That's the one used for most main-line work. Commonly named develop.

Multiple feature branches off of the develop branch. Name based on the name of the feature.
These will be merged back into develop, not into the master or release branches.

Release branch to hold candidate releases, with only bug fixes and no new features. Typical name rc1.1.

Hotfixes are short-lived branches for changes that come from master and will go into master
without development branch being involved.

#################################################################
Is there a way to put multiple projects in a git repository
#################################################################

https://stackoverflow.com/questions/14679614/is-there-a-way-to-put-multiple-projects-in-a-git-repository
https://github.com/korfuri/awesome-monorepo
https://www.happycoders.eu/java/monorepo-pros-and-cons/
https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b
https://presumably.de/monorepos-and-the-fallacy-of-scale.html
https://kinsta.com/blog/monorepo-vs-multi-repo/
https://www.atlassian.com/git/tutorials/monorepos
https://www.toptal.com/front-end/guide-to-monorepos

Hybrid-repo / Mono-repo / multiple branches

git branch software EMPTY
git checkout software

git branch thesis EMPTY
git checkout thesis


Tools

Bazel is Google’s monorepo-oriented build system. More on Bazel: awesome-bazel
Yarn is a JavaScript dependency management tool that supports monorepos through workspaces.
Lerna is a tool for managing JavaScript projects with multiple packages, built on Yarn.




#################################################################
List Commits Not Pushed to the Remote Repository in Git
#################################################################

https://www.delftstack.com/howto/git/git-list-commits-not-pushed/
https://www.brainstormcreative.co.uk/git/git-show-unpushed-commits/
https://mkyong.com/git/git-how-to-list-committed-files-that-are-going-to-push/
https://linuxhint.com/list-git-commits-not-pushed-to-origin-yet/

# list commits
git log
git log --branches --not --remotes
git log origin/master..HEAD
git log --oneline
git log --oneline --branches

# list files
git show f5f3fa6e012adf5d2caf2e1310421ad8258950d3 --name-only

# reset
git reset --soft HEAD~1
git status



#################################################################
remote: warning: There are too many unreachable loose objects; run 'git prune' to remove them.
#################################################################

https://git-scm.com/docs/git-prune
https://stackoverflow.com/questions/36082788/what-is-git-pruning
https://www.git-tower.com/learn/git/faq/cleanup-remote-branches-with-git-prune
https://dillionmegida.com/p/delete-outdated-branches/

git prune --dry-run

# removes your local remote tracking branches where the branch no longer exists on the remote.
git remote prune


git fetch --prune origin
git remote prune origin
git config --global fetch.prune true


-n
--dry-run
Do not remove anything; just report what it would remove.

-v
--verbose
Report all removed objects.

--progress
Show progress.