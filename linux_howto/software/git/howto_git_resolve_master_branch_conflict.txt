
#######################################################
#
# 	Get changes from master into branch in Git
# 	... have 1 and 8 different commits each, respectively.
#
#######################################################

git dev
git reset --hard HEAD~2
git status
git merge master
git stash
git pull
# CONFLICT (content): Merge conflict in ...
# top half - branch you a merging into
# from the commit that you are trying to merge in
git commit -am "solved conflict"
# fatal: cannot do a partial commit during a merge.

-----------------
alternativ ideas
-----------------
# remove the last commit
git reset --hard HEAD^

# remove the last two commits.
git reset --hard HEAD~2

# throw away any uncommitted changes
git reset --hard HEAD

# Get changes from master into branch in Git
git checkout aq
git rebase master

# Get changes from master into branch in Git
git checkout aq
git merge origin/master

# --
# First, rewinding head to replay your work on top of it...
# Fast-forwarded develop to master.
# --

# 'git merge' failed .....

# Your branch and 'origin/develop' have diverged,
# and have 1 and 8 different commits each, respectively.
# (use "git pull" to merge the remote branch into yours)
# nothing to commit, working directory clean

# short way
git log HEAD..origin/master
git merge origin/master
git rebase origin/master
git pull --rebase
git pull --rebase origin/master

#  You will lose all changes not yet pushed to origin/master.
git reset --hard origin/master


git reset --hard HEAD~3  # Go back in time, throwing away 3 changes
git reset --soft HEAD~3  # Set HEAD to point to an earlier commit
git reset --hard  # Wipe out differences in the working tree
git stash
git checkout -b new-branch HEAD~3   # head back in time!
git branch -D master  # goodbye old master (still in reflog)
git branch -m new-branch master  # the new-branch is now my master
git reset --hard HEAD@{1}   # restore from reflog before the change


git stash  # because it's always a good thing to do
git reset --hard HEAD~3  # go back in time
git reset --hard HEAD@{1}  # oops, that was a mistake, undo it!
git stash apply  # and bring back my working tree changes

[resources]
https://www.atlassian.com/git/tutorials/saving-changes/git-stash
https://www.atlassian.com/git/tutorials/undoing-changes/git-reset
http://www.artificialworlds.net/presentations/difficult-merges-in-git/difficult-merges-in-git.html
https://jwiegley.github.io/git-from-the-bottom-up/3-Reset/4-doing-a-hard-reset.html
https://www.theserverside.com/video/How-to-use-the-git-reset-hard-command-to-change-a-commit-history


#######################################################
#
# List all modified files in git merge commit - even the fast forwarded
#
#######################################################

git log -m --name-only

#######################################################
#
# List history
#
#######################################################

git log --graph --decorate --abbrev-commit --all --pretty=oneline

#######################################################
#
#   How to remove local (untracked) files from the current Git working tree
#   https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree
#
#######################################################

# Print out the list of files which will be removed (dry run)
git clean -n

# Delete the files from the repository
git clean -f

# Delete the files and directories from the repository
git clean -d -f
git clean -fd

#To remove ignored files, run
git clean -f -X or git clean -fX

#############################################################################
#
#   Reset Current Branch to Here
#   https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000713344--Reset-Current-Branch-to-Here-on-local-untracked-branch-commit-history-lost-
#   https://stackoverflow.com/questions/5473/how-can-i-undo-git-reset-hard-head1
#   https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
#
#############################################################################

git reset --hard <sha1 of desired commit>
git reset / git reflog

git reset --hard HEAD@{1}	# go one commit backward
git reset --hard HEAD^ 		# go one commit backward
git reset --hard f6e5064 	# reset to specific commit


[test reset]

$ git init 						# Initialized empty Git repository in .git/
$ echo "testing reset" > file1
$ git add file1
$ git commit -m 'added file1' 	# Created initial commit 1a75c1d: added file1  1 files changed, 1 insertions(+), 0 deletions(-)  create mode 100644 file1
$ echo "added new file" > file2
$ git add file2
$ git commit -m 'added file2' 	# Created commit f6e5064: added file2  1 files changed, 1 insertions(+), 0 deletions(-)  create mode 100644 file2
$ git reset --hard HEAD^ 		# HEAD is now at 1a75c1d... added file1
$ cat file2						# cat: file2: No such file or directory
$ git reflog					# 1a75c1d... HEAD@{0}: reset --hard HEAD^: updating HEAD     f6e5064... HEAD@{1}: commit: added file2
$ git reset --hard f6e5064 		# HEAD is now at f6e5064... added file2
$ cat file2						# added new file

#############################################################################
#
#   What's the difference between git reset --mixed, --soft, and --hard?
#   https://stackoverflow.com/questions/2530060/in-plain-english-what-does-git-reset-do
#   https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard
#
#############################################################################

--soft: uncommit changes, changes are left staged (index).
--mixed (default): uncommit + unstage changes, changes are left in working tree.
--hard: uncommit + unstage + delete changes, nothing left.

#############################################################################
#
#   Restore a deleted folder in a Git repo
#   https://stackoverflow.com/questions/30875205/restore-a-deleted-folder-in-a-git-repo
#
#############################################################################

Files are deleted from working tree but not committed yet:
git checkout -- path/to/folder

If the deletion is already indexed, you should reset that first:
git reset -- path/to/folder
git checkout -- path/to/folder

Restore the full working tree (not a single folder), but lose all uncommitted changes
git reset --hard HEAD

When files are deleted in some commit in the past:
git rev-list -n 1 HEAD -- <file_path>
git checkout <deleting_commit>^ -- <file_path>

Restore the full working tree from a distant commit
git reset --hard <revision>

If you have not yet commited your changes you can revert content or a directory:
git checkout -- removed_directory

If you want to revert all changes do:
git reset --hard HEAD



git merge --squash feature # merge all commits once
git rebase master # get changes from master into feature being in feature
git rebase feature # get changes from feature into master being in master


#############################################################################

Resolve Conflicts / Resolve Git conflicts

#############################################################################




https://www.jetbrains.com/help/phpstorm/resolving-conflicts.html
https://www.jetbrains.com/help/phpstorm/resolve-conflicts.html
https://www.jetbrains.com/help/phpstorm/resolving-text-conflicts.html
https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts
https://docs.typo3.org/m/typo3/guide-contributionworkflow/master/en-us/HandlingAPatch/ResolveMergeConflicts.html
https://git-scm.com/book/de/v2/Git-Branching-Einfaches-Branching-und-Merging
https://blog.jessitron.com/tag/intellij-idea/
https://www.tilcode.com/7-intellij-idea-tips-settings/
https://about.gitlab.com/blog/2016/09/06/resolving-merge-conflicts-from-the-gitlab-ui/
http://dev.tiki.org/Semi-automatic-merging-period
https://www.ralfebert.de/git/mergekonflikte-beheben/

..............

Identify files with conflicts (cherry-pick)
git cherry-pick
git status


Resume
git add <path1>

Resume git rebase
git rebase --continue

Resume git cherry-pick
git cherry-pick --continue

Cancel
git merge --abort

git mergetool --tool-help

Search for <<<<<<< HEAD =======

..............

Resolve conflicts﻿
Click Merge in the Conflicts dialog, or select the conflicting file in the editor and choose VCS | <your_VCS> | Resolve Conflicts from the main menu.

To automatically merge all non-conflicting changes, click the Apply Non-Conflicting Changes button (Apply All Non-Conflicting Changes) on the toolbar. You can also use the the Apply Non-Conflicting Changes from the Left button (Apply Non-Conflicting Changes from the Left Side) and the Apply Non-Conflicting Changes from teh Right button (Apply Non-Conflicting Changes from the Right Side) to merge non-conflicting changes from the left/right parts of the dialog respectively.

Productivity tips﻿
Apply non-conflicting changes automatically
You can configure PhpStorm to always apply non-conflicting changes automatically instead of telling it to do so from the Merge dialog. To do this, in the Settings/Preferences dialog Ctrl+Alt+S, go to Tools | Diff Merge on the left and select the Automatically apply non-conflicting changes option.

..............

Clicking on the merge option will bring up the visual tool.
Once there, you will have the same tool appear as the local history or compare differences tools.





###############################################################################
#
#   stash
#
###############################################################################

https://git-scm.com/book/en/v2
https://www.atlassian.com/git/tutorials/saving-changes/git-stash
https://www.git-tower.com/learn/git/faq/save-changes-with-git-stash
https://www.git-tower.com/learn/git/ebook/en/command-line/branching-merging/stashing
https://code-maven.com/git-stash
https://stackoverflow.com/questions/24669528/git-temporarily-save-current-work
https://mohitgoyal.co/2018/10/23/save-your-changes-temporarily-in-git-using-git-stash/
https://www.freecodecamp.org/news/git-stash-explained/
https://gitguys.com/topics/temporarily-stashing-your-work/
https://ramanisandeep.wordpress.com/2020/01/21/git-stash-how-to-save-your-changes-temporarily/


git status

git stash save       # save changes in a side location
git stash save "some text here"

git stash            # save changes tempor
git stash apply      # Re-applying your stashed changes

git stash list       # Listing the content of the stash
git stash show       # Viewing stash diffs
git stash show 0     # Showing the content of a stash
git stash show 1     # Showing the content of a stash
git stash show -p 0  # show the actual diff of the change saved
git stash show -p 1  # show the actual diff of the change saved
git stash drop 1     # Removing an entry from the stash

git stash -p         # Partial stashes
git stash branch add-stylesheet stash@{1} # Creating a branch from your stash

git stash drop stash@{1}   # Cleaning up your stash
git stash clear

git log --oneline --graph stash@{0} # inspect with git log


git stash pop        # return changes to the working directory
git stash pop 1
git stash pop stash@{2}

git stash clear      # Cleaning up the stash
git stash -u         # Stashing new, untracked files

###############################################################################
#
#   reset restore branch to remote one
#
###############################################################################

You have not concluded your merge (MERGE_HEAD exists).
Please, commit your changes before you can merge.

# https://stackoverflow.com/questions/9301782/need-to-reset-git-branch-to-origin-version/9302259
# https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head
# Reset local repository branch to be just like remote repository HEAD

# save work in other branch
git commit -a -m "Saving my work, just in case"
git branch my-saved-work

# restore branch to remote one
git fetch origin
git reset --hard origin/master

----------------------------------------------------

git log

git merge --abort [Since git version 1.7.4]
git reset --merge [prior git versions]
git status

Your branch and 'origin/develop' have diverged,
git log HEAD..origin/master

git pull
git pull --rebase
git rebase --continue
---
git fetch
git rebase origin/master
---
git rebase <upstream> <branch>
---
git checkout <branch> # master
git rebase <upstream> # origin
---


-------------------------------------------------------------------
Why doesn't git allow me to safely delete a branch?
https://stackoverflow.com/questions/12495756/why-doesnt-git-allow-me-to-safely-delete-a-branch
-------------------------------------------------------------------
git branch -d second
warning: not deleting branch 'second' that is not yet merged to
         'refs/remotes/origin/second', even though it is merged to HEAD.
error: The branch 'second' is not fully merged.
If you are sure you want to delete it, run 'git branch -D second'.


FIX:

$ git checkout second
$ git push origin second
$ git checkout first
$ git branch -d second
$ git branch -D second


-------------------------------------------------------------------
stash
-------------------------------------------------------------------

git add . is considered a bad practise in professional software development.
I would suggest git add -p as an alternative. It will show all the changes that are getting included in the commit.

git add .
git add -A
git add -p

git merge --squash feature  	# get on merge the feature change at the end
git merge rebase 		# in feature branch

git stash		# backup
git stash apply		# restore
git stash list
git stash push -m "comment"
git stash apply 2
git stash drop 2

# Rewriting Git History - Amend, Reword, Delete, Reorder, Squash and Split


git stash -u # save for later
git stash pop # add temp code back
git merge feature --squash # merge multiple commits in single one


# push github remote
git remote add origin https://github.com/.....
git push -u origin master


-------------------------------------------------------------------
Show last change by branch
-------------------------------------------------------------------
https://stackoverflow.com/questions/2514172/listing-each-branch-and-its-last-revisions-date-in-git

for k in `git branch | perl -pe s/^..//`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k -- | head -n 1`\\t$k; done | sort -r
for k in `git branch | sed s/^..//`; do echo -e `git log -1 --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k --`\\t"$k";done | sort
for k in `git branch -r | perl -pe 's/^..(.*?)( ->.*)?$/\1/'`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k -- | head -n 1`\\t$k; done | sort -r

git for-each-ref --sort='-committerdate:iso8601' --format=' %(committerdate:iso8601)%09%(refname)' refs/heads
git for-each-ref --sort='-committerdate:iso8601' --format=' %(committerdate:iso8601)%09%(refname)' refs/remotes
git for-each-ref --sort='-committerdate:iso8601' --format='%(committerdate:relative)|%(refname:short)|%(committername)' refs/remotes/ | column -s '|' -t
git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/heads



-------------------------------------------------------------------
check merged && abord merge
-------------------------------------------------------------------
git merge --abord
graph
git branch --merged
#
-------------------------------------------------------------------
fatal: Unable to create '/home/user/git/project/.git/index.lock': File exists.
-------------------------------------------------------------------
If no other git process is currently running, this probably means a
git process crashed in this repository earlier. Make sure no other git
process is running and remove the file manually to continue.

rm .git/index.lock


