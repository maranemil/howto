
#############################################
#Install Git with apt-get:
#############################################

sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git

#or sudo apt-get install git-core # How to Install Git with Apt-Get

#############################################
#How to Install Git from Source
#############################################

sudo apt-get update
sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev build-essential
wget https://git-core.googlecode.com/files/git-1.8.1.2.tar.gz
tar -zxf git-1.8.1.2.tar.gz
cd git-1.8.1.2
make prefix=/usr/local all
sudo make prefix=/usr/local install
git clone git://git.kernel.org/pub/scm/git/git.git


###########################################################
#
# Conf git
#
###########################################################
*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"


#############################################
#Config Git:
#############################################

su git

git config --global user.name "Criss"
git config --global user.email "criss@blabla.de"

git config --list
// git commit --amend --reset-author
git --version

#############################################
# Create folder git in home:
#############################################

#Create a bare (empty) repository for our project

mkdir ~/Repos; cd ~/Repos
mkdir wonderproject.git
cd wonderproject.git
git init --bare #create git structurte

#mkdir ~/GitProjects; cd ~/GitProjects


mkdir ~/SGProjects
cd ~/SGProjects
git init # create git for clone folder

#############################################
# Get local ip
#############################################

ip addr show eth0 # get eth ip
ip addr show wlan0 # get wlan ip

#############################################
# install ssh
#############################################

#variant 1
sudo apt-get install ssh # install shh if not installed
sudo nano /etc/ssh/sshd_config # add "AllowGroups sshusers"
sudo adduser git sshusers

#variant 2
sudo apt-get install openssh-server openssh-client
ps -ef | grep ssh
ssh localhost # your password

#############################################
# create ssh key
#############################################

#Goto the home directory and execute the below ssh-keygen command
#$ cd
#$ ssh-keygen -t rsa

ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/criss/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/criss/.ssh/id_rsa.
Your public key has been saved in /home/criss/.ssh/id_rsa.pub.
The key fingerprint is:
dc:05:82:50:51:7d:1e:af:54:12:bb:e3:f3:4a:bf:50 criss@Pro
The key's randomart image is:
+--[ RSA 2048]----+
|    .oo=. .      |
|      o ..o.     |
|         o o.    |
|       .+B+o     |
+-----------------+


#check dir ssh
~/.ssh$ ls -lrt

#create a new file called authorized_keys2 in .ssh folder and copy the contents of id_rsa.pub.
cat id_rsa.pub >> authorized_keys2
$ ssh localhost

ssh criss@localhost

$ ssh-keygen
$ touch ~/.ssh/authorized_keys
$ chmod 0600 ~/.ssh/authorized_keys

#############################################

    cd
    sudo cp .ssh/id_rsa_git.pub ~git/.ssh/authorized_keys

#If doesn't work, open an other console:
   sudo su - git
   cd
   mkdir .ssh

#You can close this console.

    sudo chown git:git ~git/.ssh/authorized_keys
    sudo chmod 600 ~git/.ssh/authorized_keys



#############################################
# Clone git
#############################################

git remote add origin ssh://git@192.168.1.6/home/git/Repos/wonderproject.git
git clone ssh://criss@192.168.1.6/home/criss/Repos/wonderproject.git

#############################################
# PHP STORM SETTINGS
#############################################

#From where to clone with phpstorm
/home/criss/Repos/sugarcrm.git

#Parent dir
/home/criss/PhpstormProjects/SGProjects

#Dir
wonderproject

#############################################
# Checkout git
#############################################

Vew all existing branches by typing the following:
git branch -a

Create a new branch, named develop, type the following:
git checkout -b develop
// git checkout develop

Assuming we do not yet have a branch named "develop", the output would be as follows:
Switched to a new branch 'develop'

Switch back and forth between your two branches:
git checkout master
//or git checkout develop

#############################################
Making changes to our development branch
#############################################

Create a new blank file:
touch develop

Add the "develop" file to git:
git add develop

Commit file:
git commit -m "development file" develop

Confirm that we are currently on the development branch:
git branch

Running the "ls" command will show us that the two files exist:
ls

#############################################
Merging code between branches
#############################################

After we switch back to our master branch, which we can do with the git checkout command:
git checkout master

Check if master branch is:
git branch

Running "ls" again, it appears that our new file is missing.

Merge changes from the development branch to the master branch:
git merge development --no-ff

Push changes:
git push


#############################################
# more git commands
#############################################

Use different name and email address:
git config --global user.name "Your Name"
git config --global user.email you@example.com

Add project files to Git: –
git add wonderproject.c
git commit -m "First commit!"

Upload changes to master branch on the server:
git push origin master

Check log changes:
git log

Details on remote repository:
git remote show origin

Get changes that other users have made:
git pull origin

You can then make changes to the project and sync your changes with the remote master branch with: –
git push origin

#############################################
# Alternatives to watch files in linux
#############################################

Grunt
http://moduscreate.com/get-up-and-running-with-grunt-js/
https://github.com/fyfey/sugar7-dev
http://gruntjs.com/

Nagios
http://www.nagios.org/

AppArmor
https://help.ubuntu.com/community/AppArmor

Auditd
http://www.linuxscrew.com/2012/07/04/track-file-changes-auditd/
--------------------------


##########################################
# Add git project
# http://joshua14.homelinux.org/blog/?tag=git
##########################################

sudo useradd git; sudo passwd git
su - git
sudo apt-get install git
mkdir ~/Repos; cd ~/Repos
mkdir wonderproject.git; cd wonderproject.git
git init --bare
mkdir ~/GitProjects; cd ~/GitProjects
git init
git remote add origin ssh://git@192.168.1.6/home/git/Repos/wonderproject.git
git clone ssh://git@192.168.1.6/home/git/Repos/wonderproject.git

touch wonderproject.c;
git add wonderproject.c ;

git config --global user.name "User"
git config --global user.email user@example.de

git commit -m "First commit!"

git log
git remote show origin

git pull origin
git push origin



##########################################
#
# development and Branches
#
##########################################

Create file

	echo "Test Text" >> contributors.txt
	git add contributors.txt
	git commit -m 'Initial commit with contributors'
	git push -u origin master


Create Bracnh

	git branch -a
	git checkout -b myfeature development  #build
	git checkout myfeature

	git checkout develop
	git merge --no-ff myfeature
	git branch -d myfeature #delete
	$ git push origin develop


Creating a release branch

	git checkout -b release-1.2 develop
	git checkout master
	git merge --no-ff release-1.2
	git commit -a -m "Bumped version number to 1.2"
	git tag -a 1.2
	git push origin master
	git push -u origin master
	git push -u origin release-1.2

Create hotfix

	git checkout -b hotfix-1.2.1 master
	git commit -a -m "Bumped version number to 1.2.1"
	git commit -m "Fixed severe production problem"

Push Tags

	git fetch && git checkout release-1.2
    git tag -a 1.2.0 release-1.2
    git push --follow-tags

Check Difference

	git diff --name-status master brachname
	git diff --stat --color master brachname
	#git difftool -d master brachname # is using meld diff-checker





http://nvie.com/posts/a-successful-git-branching-model/
https://de.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
http://nvie.com/files/Git-branching-model.pdf

--



git checkout develop
git merge --no-ff release-1.2
git branch -d release-1.2

##########################################
#
# GIT restore old version
#
##########################################

#remove files from commit
git rm -r --cached .idea/
git rm -f  --cached .gitignore
git rm file.txt removes the file from the repo but also deletes it from the local file system.

# restore old version - redo
git revert 2757d8d

#jump to version
#https://de.atlassian.com/git/tutorials/undoing-changes/git-reset
#https://blog.seibert-media.net/blog/2015/09/07/git-tipps-reset-checkout-und-revert-fuer-fortgeschrittene-teil-2/
#http://rypress.com/tutorials/git/undoing-changes
#https://github.com/blog/2019-how-to-undo-almost-anything-with-git
git checkout 2757d8d

#make a branch with old version
git checkout -b old-state 0d1d7fc32

#show versions Commit Checksums
git log --oneline

#ignore
#https://git-scm.com/docs/gitignore
#cat .gitignore
#touch .gitignore
# exclude everything except directory foo/bar
/*
!/foo
/foo/*
!/foo/bar




------------------------------
StackOverFlow Topics
------------------------------
# How to delete a Git branch both locally and remotely
git branch -d branch_name
git push origin --delete <branchName>
git push origin :<branchName>
-------------------------------
# Edit an incorrect commit message in Git
git commit --amend
git commit --amend -m "New commit message"

git push <remote> <branch> --force
# Or
git push <remote> <branch> -f
----------------------------------------------
# How to undo last commit(s) in Git
$ git commit -m "Something terribly misguided"              (1)
$ git reset HEAD~                                           (2)
<< edit files as necessary >>                               (3)
$ git add ...                                               (4)
$ git commit -c ORIG_HEAD                                   (5)
----------------------------------------------
$ git reset HEAD <file>..." to unstage file
----------------------------------------------
# What are the differences between 'git pull' and 'git fetch'
# In the simplest terms, git pull does a git fetch followed by a git merge.
----------------------------------------------
# How to rename a local Git branch?
git branch -m <oldname> <newname>
git branch -m <newname>
----------------------------------------------
# How to checkout a remote Git branch
git fetch
git checkout test



##########################################################################
#
#	How To Use Git Commands From Linux Terminal by By Mohammad Forhad Iftekher
#	https://www.unixmen.com/use-git-commands-linux-terminal/
#
##########################################################################


sudo apt-get install git

git config --global user.name "Mf Iftekher"
git config --global user.email xyz@xyz.com

git config --list
git clone https://gitlab.com/xyz/abc.git

git init
git status

vim demo.txt
git add demo.txt
git commit -m 'first commit'
git commit -m 'second commit'
git push

git rm documentation.txt
git commit -m "documentation.txt  file removed"
git push

git reset --hard commit number/HEAD
sudo git stash
git pull
git log
git branch

--------------

Create the branch on your local machine
git checkout -b [name_of_your_new_branch]

Push the branch on git :
git push origin [name_of_your_new_branch]

see all branches :
$ git branch

Add a new remote for your branch :
git remote add [name_of_your_remote]

Push changes from your commit into your branch :
$ git push [name_of_your_new_remote] [name_of_your_branch]

Update your branch when the original branch from official repository has been updated :
$ git fetch [name_of_your_remote]

apply to merge changes, if your branch is derivated from development you need to do :
$ git merge [name_of_your_remote]/develop

Delete a branch on your local filesystem :
$ git branch -d [name_of_your_new_branch]

To force the deletion of local branch on your filesystem :
$ git branch -D [name_of_your_new_branch]

Delete the branch on github :
$ git push origin :[name_of_your_new_branch]

https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
git log --graph --oneline --decorate --all
git log --graph


git log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset) %C(auto)%d%C(reset)\n         %C(black)[%cr]%C(reset)  %x09%C(black)%an: %s %C(reset)'

# logx
git log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative

# tree
git log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''    %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit

# tree
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset' --abbrev-commit --date=relative --name-status


#logx
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset' --abbrev-commit --date=relative

# logx
git log --all --graph --pretty=format:'%C(auto)%h%C(auto)%d %s %C(dim white)(%aN, %ar)'

# logx
git log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset)+%C(bold black)(%cr)%C(reset)+%C(auto)%d%C(reset)++\n+++       %C(bold black)%an%C(reset)%C(bold black): %s%C(reset)'

# lox
git log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset) %C(auto)%d%C(reset)\n     /
    %C(bold black)[%cr]%C(reset)  %x09%C(bold black)%an: %s %C(reset)'

# logx
git log --pretty=format:"%h%x09%an%x09%ad%x09%s"


#######################
# best grapth #########
#######################

git log --graph --abbrevgit log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all

git log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''    %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit

git log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative

git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset' --abbrev-commit --date=relative --name-status





-----
https://git-scm.com/book/tr/v2/Git-Basics-Git-Aliases

git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'
git config --global alias.changed 'show --pretty="format:" --name-only'

- - - - -
# list files

git ls-tree --full-tree -r HEAD
git ls-files
git ls-tree -r master --name-only
git log --pretty=format: --name-only --diff-filter=A | sort - | sed '/^$/d'
git log --pretty=format: --name-status | cut -f2- | sort -u

git diff-tree --no-commit-id --name-only -r bd61ad98
git show --pretty="" --name-only bd61ad98
git diff-tree --no-commit-id --name-only -r bd61ad98

https://git-scm.com/docs/git-ls-files

git show <branchname>

git show HEAD@{0}
git show HEAD@{1}


git checkout branch_name
git commit -a -m 'some changes'
git push origin branch_name
git pull

git log --graph --oneline --branches
git log --pretty=oneline

# https://git-scm.com/docs/git-log
# https://github.com/tib/dot-git/blob/master/aliases.sh

git log --graph --color --all --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"
git log --graph --full-history --all --pretty=format:"%h%x09%d%x20%s"
git log --graph --full-history --all --color \
        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"


[alias]
  gr = log --graph --full-history --all --color --pretty=tformat:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s%x20%x1b[33m(%an)%x1b[0m"



[alias]
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'



[alias]
     lg = log --graph --pretty=format:'%Cred%h%Creset %ad %s %C(yellow)%d%Creset %C(bold blue)<%an>%Creset' --date=short
     hist = log --graph --full-history --all --pretty=format:'%Cred%h%Creset %ad %s %C(yellow)%d%Creset %C(bold blue)<%an>%Creset' --date=short



[alias]
l = log --all --graph --pretty=format:'%C(auto)%h%C(auto)%d %s %C(dim white)(%aN, %ar)'



[alias] # ok
 gg='git log --oneline --abbrev-commit --all --graph --decorate --color'
 gg20='git log --oneline --abbrev-commit --all --graph --decorate --color --max-count=20'

# git config --system --edit

git config --global alias.lg 'log --oneline --abbrev-commit --all --graph --decorate --color --max-count=20'
git config --global --edit # to remove alias
git config --global alias.gs 'status'
git config --global --unset alias.gs # to remove alias


------ Add colors to Diff output ------
git diff --color-words file_from_repo
git diff --color=always --color-words file_from_repo
git diff --color file_from_repo
git diff --word-diff=color file_from_repo


###################################################################
#
# 	19 Tips For Everyday Git Use - September 8, 2015 by Alex Kras 66 Comments
#	https://www.alexkras.com/19-git-tips-for-everyday-use/
#
###################################################################


Table of Contents:

Parameters for better logging
git log --oneline --graph

Log actual changes in a file
git log -p filename

Only Log changes for some specific lines in file
git log -L 1,1:some-file.txt

Log changes not yet merged to the parent branch
git log --no-merges master..

Extract a file from another branch
git show some-branch:some-file.js

Some notes on rebasing
git pull --rebase

Remember the branch structure after a local merge
git merge --no-ff

Fix your previous commit, instead of making a new commit
git commit --amend

Three stages in git, and how to move between them
git reset --hard HEAD and git status -s

Revert a commit, softly
git revert -n

See diff-erence for the entire project (not just one file at a time) in a 3rd party diff tool
git difftool -d

Ignore the white space
git diff -w

Only “add” some changes from a file
git add -p

Discover and zap those old branches
git branch -a

Stash only some files
git stash -p

Good commit messages
Git Auto-completion

Create aliases for your most frequently used commands
Quickly find a commit that broke your feature (EXTRA AWESOME)
git bisect


########################################################################
#
# Get all not pushed commits from all branches
#
########################################################################

git log --branches --not --remotes

show you all your local commits
git log origin/master..HEAD

show you all your local commits diffs
git diff origin/master..HEAD




########################################################################
#
# Get Branch List and Status
#
########################################################################

git branch -a

git status -s | grep "M " | wc -l

# M - modified
# D - deleted
# A - added


git -a -m "message"
git push origin <branch>


git checkout develop
git pull origin develop
git checkout <branch>
git merge develop
git checkout develop
git merge <branch>
git status -s

----------------------------------------------------

# git ls-files --modified | xargs git add # to add modified files
# git add -u # add . && git add -u.


# see status
git whatchanged -1
git whatchanged -1 --format=oneline | wc -l
git whatchanged -1 --format=oneline | tail -n +2 | wc -l
git show --stat
git status -s | grep "M " | wc -l

----------------------------------------------------

#############################################
#
# How PHPStorm does Rebase / Commit / Push
#
##############################################

git -c core.quotepath=false stash save "Uncommitted changes before Update at 21.03.17 18:36"
git -c core.quotepath=false rebase origin/master
git -c core.quotepath=false commit --only -F /tmp/git-commit-msg-.txt -- linux_howto/lubuntu_optimization.txt
git -c core.quotepath=false push --progress --porcelain origin refs/heads/master:master


##################################################
#
# Fix Merge Error
# Automatic merge failed; fix conflicts and then commit the result.
#
#####################################################

git checkout <branch1>
git merge origin <branch2>
# Automatic merge failed; fix conflicts and then commit the result.

# change conflict files
git add lib/hello.html
git commit -m "Merged master fixed conflict."

# https://githowto.com/resolving_conflicts

-------------------------------------------

Your branch is ahead of 'origin/<branch>' by 9 commits.
git push origin <branch2>
git pull #  origin <branch2>



#############################################################################
#
# Branch Management
# https://git-scm.com/book/en/v1/Git-Branching-Branch-Management
#
##############################################################################

Find out which remote branch a local branch is tracking
https://stackoverflow.com/questions/171550/find-out-which-remote-branch-a-local-branch-is-tracking

git branch -vv          #
git branch -r -vv       # remote
git branch -a -vv       # locale
git branch -ra -vv      # all

git branch -v		    # get status branches
git branch --merged	    # get status branches merged
git branch --no-merged  # get status branches not merged

git branch -d testing 	# delete branch
git branch -D testing 	# delete branch

git checkout -b hotfix 	# create new branch and switch to - short way
git branch hotfix && git checkout hotfix  # create new branch and switch to -long way

git commit -a -m 'add a new footer [hotfix 53]'

git checkout master 	# switch to master
git merge hotfix 	    # merge hotfix into master


#################################################
#
# add file to gitignore
#
#################################################

touch .gitignore
nano .gitignore
#add folder in file and save

git update-index --assume-unchanged <file>
git update-index --no-assume-unchanged <file>
git rm --cached FILENAME


Now either do
git stash -u && git stash pop
or
git clean -df


git config --global core.excludesfile ~/.gitignore_global

https://help.github.com/articles/ignoring-files/
https://git-scm.com/docs/gitignore
https://www.visualstudio.com/en-us/docs/git/tutorial/ignore-files
https://stackoverflow.com/questions/4308610/how-to-ignore-certain-files-in-git
https://stackoverflow.com/questions/8527597/how-do-i-ignore-files-in-a-directory-in-git


#################################################
#
# push to branch git 2.0
#
#################################################

To push the current branch and set the remote as upstream, use
git push --set-upstream origin some branch

# equivalents

git branch --set-upstream-to <remote-branch>
git branch --set-upstream-to origin feature-branch
git branch -vv

git push -u origin local-branch

##########################################################
#
#	Delete Git Branch
#
##########################################################

Executive Summary
$ git push -d <remote_name> <branch_name>
$ git branch -d <branch_name>

Delete Local Branch To delete the local branch use one of the following:

$ git branch -d branch_name
$ git branch -D branch_name

--------------------------------------------------------------------------------

git rm --cached asd
git commit -m "the file asd is gone from the repository"
versus

git reset HEAD -- asd
git commit -m "the file asd remains in the repository"

https://alvinalexander.com/git/git-rm-file-git-repository-dont-track-accidentally-added
git rm --cached filename

prevernt from ignore
echo '!/vmlinux*' >arch/foo/kernel/.gitignore

https://github.com/hsz/idea-gitignore











######################################
#
# Git Commands Examples
#
#####################################

####################################################
#
#	FIX CRLF LF
#
####################################################

$ echo "* text=auto" >>.gitattributes
## echo "* -crlf" >>.gitattributes
$ rm .git/index     # Remove the index to force Git to
$ git reset         # re-scan the working directory
$ git status        # Show files that will be normalized
$ git add -u
$ git add .gitattributes
$ git commit -m "Introduce end-of-line normalization"

Result:
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in somefile.data.

---------------------------------------------------------------------------------------------

git config --global core.filemode false
git config core.filemode false
git update-index --chmod=(+|-)x path/to/file
git update-index --chmod=(+|-)x <path>.

old mode 100644
new mode 100755

cd .git/
vi config
[Core]
filemode = false

git update-index --chmod=+x git
git status

---------------------------------------------------------------------------------------------

$ echo "Hello World" > example.txt
$ unix2dos example.txt #Make sure it uses CRLF
$ git add example.txt
$ git commit -m "commit 1"
$ #Instruct git that all .txt files should be normalized
$ echo '*.txt text' >> .gitattributes
$ git add .gitattributes
$ git commit -m "commit 2"
------------

git status -uno
# git status --untracked-files=no
git rev-parse
git status --porcelain

no: do not show untracked files
normal: show untracked files and directories
all: a more-verbose variant of normal

---------
git diff --ignore-space-at-eol.
git config -l
git config --global core.autocrlf input  # convert all CRLF line endings to LF
#git config --global core.autocrlf false
git config --global core.safecrlf true # prevent git from updates to change the line-ending

  - git config --global core.autocrlf false        # per-user solution
  - git config --local core.autocrlf false          # per-project solution

find ./ -type f -exec dos2unix {} \; # Convert Cloned Files

# Local Settings
echo "# LF (not CRLF) for line endings" > .gitattributes
echo "* text eol=lf" >> .gitattributes

echo "* text=auto" >>.gitattributes
rm .git/index
git rm --cached -r .
git reset
git reset --hard
git reset HEAD^
git reset HEAD^ --hard

UNIX(LF) -> DOS(CRLF) conversion.
unix2dos filename
dos2unix -D filename

In your .gitattributes you can:
# normalize text files to use lf
text eol=lf
# except these which we want crlf
*.txt eol=crlf

# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html


# http://lexsheehan.blogspot.de/2014/05/warning-crlf-will-be-replaced-by-lf-in.html
# https://help.github.com/articles/dealing-with-line-endings/

git config --global core.whitespace trailing-space,space-before-tab,indent-with-non-tab
git config --global core.whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
git config --global core.safecrlf false # for windows
git ls-files --eol

---------------------------------------------------------------------------------------------


#reproduce

git init
git add .

warning: CRLF will be replaced by LF in .bowerrc.
The file will have its original line endings in your working directory.

git clone git@github.com:yarnpkg/yarn
cd yarn
git status

---------------------------------------------------------------------------------------------

http://stackoverflow.com/questions/5787937/git-status-shows-files-as-changed-even-though-contents-are-the-same

ls-files: add eol diagnostics

When working in a cross-platform environment, a user may want to check if text files are stored normalized in the repository and if .gitattributes are set appropriately.

Make it possible to let Git show the line endings in the index and in the working tree and the effective text/eol attributes.

The end of line ("eolinfo") are shown like this:
"-text"        binary (or with bare CR) file
"none"         text file without any EOL
"lf"           text file with LF
"crlf"         text file with CRLF
"mixed"        text file with mixed line endings.


The effective text/eol attribute is one of these:
"", "-text", "text", "text=auto", "text eol=lf", "text eol=crlf"
git ls-files --eol gives an output like this:
i/none   w/none   attr/text=auto      t/t5100/empty
i/-text  w/-text  attr/-text          t/test-binary-2.png
i/lf     w/lf     attr/text eol=lf    t/t5100/rfc2047-info-0007
i/lf     w/crlf   attr/text eol=crlf  doit.bat
i/mixed  w/mixed  attr/               locale/XX.po
to show what eol convention is used in the data in the index ('i'), and in the working tree ('w'), and what attribute is in effect, for each path that is shown.


#############################################################################################


git reset --hard HEAD
git clean -f -d
git pull

git fetch --all
rm .git/index.lock
git reset --hard origin/master
git reset --hard origin/develop

git checkout master
git branch new-branch-to-save-current-commits
git fetch --all
git reset --hard origin/master

git reset --hard HEAD
git pull
git pull --rebase

git diff branch_1 branch_2
git diff branch_1 branch_2 -- # show files too

git log.

git diff branch_1..branch_2
git diff branch_1...branch_2

#################################################################

First do a commit of your changes

 git add *
 git commit -a -m "local file server commit message"
Then fetch the changes and overwrite if there is a conflict

 git fetch origin master
 git merge -s recursive -X theirs origin/master

****

Instead of doing:

git fetch --all
git reset --hard origin/master
I'd advise doing the following:

git fetch origin master
git reset --hard origin/master

git clean

git stash --include-untracked
git pull

git stash list
git stash drop stash@{0}
git stash drop stash@{1}
git stash clear
git stash apply stash@{5}

git clean -f
git clean -fd
git clean -f -d

git reset --hard HEAD
git pull
#git push


git reset --hard HEAD
git clean -f
git pull

git fetch
git reset --hard @{u}

git fetch --all
git reset --hard origin/master
git reset --hard HEAD
git clean -f -d
git pull

git reset --hard HEAD
git checkout origin/master
git branch -D master
git checkout -b master
git pull origin master



git checkout -b tmp # "tmp" or pick a better name for your local changes branch
git add -A
git commit -m 'tmp'
git pull
git checkout master # Or whatever branch you were on originally
git pull
git diff tmp
git checkout master && git merge tmp
git reset origin/master


git add -A stages All
git add . stages new and modified, without deleted
git add -u stages modified and deleted, without new

http://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add



git checkout -b tmp
git add *; git commit -am "my temporary files"
git checkout master

git fetch origin master
git merge -s recursive -X theirs origin master

######################################################
#
# https://git-scm.com/docs/git-pull
#
######################################################

git pull --rebase

You asked me to pull without telling me which branch you
want to rebase against, and 'branch.develop.merge' in
your configuration file does not tell me, either. Please
specify which branch you want to use on the command line and
try again (e.g. 'git pull <repository> <refspec>').
See git-pull(1) for details.

If you often rebase against the same branch, you may want to
use something like the following in your configuration file:

    [branch "develop"]
    remote = <nickname>
    merge = <remote-ref>
    rebase = true

    [remote "<nickname>"]
    url = <url>
    fetch = <refspec>

See git-config(1) for details.




git pull branch --rebase

error: unknown option `rebase'
usage: git fetch [<options>] [<repository> [<refspec>...]]
   or: git fetch [<options>] <group>
   or: git fetch --multiple [<options>] [<repository> | <group>]...
   or: git fetch --all [<options>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --all                 fetch from all remotes
    -a, --append          append to .git/FETCH_HEAD instead of overwriting
    --upload-pack <PATH>  path to upload pack on remote end
    -f, --force           force overwrite of local branch
    -m, --multiple        fetch from multiple remotes
    -t, --tags            fetch all tags and associated objects
    -n                    do not fetch all tags (--no-tags)
    -p, --prune           prune tracking branches no longer on remote
    --dry-run             dry run
    -k, --keep            keep downloaded pack
    -u, --update-head-ok  allow updating of HEAD ref
    --progress            force progress reporting
    --depth <DEPTH>       deepen history of shallow clone


##########################

git show
and undo the bad part by restoring the original symlink pathname into the file and git adding it. Or you could really get rid of the symlink properly with git rm, then create a new file and git add that. If you choose the first option, be aware that the content of a symlink is just a pathname. It's not a text file - it doesn't have a newline on the end. If you edit it with a text editor that adds a newline, you'll have a broken symlink (pointing to a file with a newline in its name).

After you've done your git add, reinsert the fixed commit into its place in history:

git commit --amend
git rebase --continue
If you changed multiple commits from pick to edit you'll have to repeat that procedure for each one. The final git rebase --continue will bring you back to the present.



######################################################
#
#	git error: there are still refs under 'refs/remotes/origin/
#
######################################################

# git remote show uat
git branch -r # show remote branches
git branch -a # show all branches
git branch -rD remotes/origin/branch # delete remote branch
git branch -d remotes/origin/branch # delete local branch


git branch -rD remotes/origin/Branchname # delete remote branch
git branch -d remotes/origin/Branchname # delete local branch
git branch -D remotes/origin/Branchname # delete local branch


# To remove a local branch from your machine:
# git branch -d {the_local_branch} (use -D instead to force deletion without checking merged status)



# git gc --prune=now
# git remote prune origin
# git pull
# git push -u -f origin master



# Deleting a local branch:
git branch --delete <branch>
git branch -d <branch> # Shorter version
git branch -D <branch> # Force delete un-merged branches



#Deleting a local remote-tracking branch:
git branch --delete --remotes <remote>/<branch>
git branch -dr <remote>/<branch> # Shorter
git fetch <remote> --prune # Delete multiple obsolete tracking branches
git fetch <remote> -p      # Shorter



# View just remote-tracking branches
git branch --remotes
git branch -r

# View both strictly local as well as remote-tracking branches
git branch --all
git branch -a

git branch --delete --remotes origin/X
git branch -dr origin/X # Shorter

# http://stackoverflow.com/questions/2003505/how-to-delete-a-git-branch-both-locally-and-remotely


######################################################
#
#  branch show delete create
#
######################################################

git branch  -l
git branch  --remote
git branch -d branchname # local
git branch -rD origin/branchname # remote
git checkout -b newbeanch

################################################################################
#
#  branch diff
#
################################################################################

git diff branch_1..branch_2
git diff branch_1...branch_2

################################################################################
#
#  reverse file changes

################################################################################

git checkout file 		# restore original file after edit
git reset HEAD  file	# restore original file after delete

################################################################################
#
#	Show when branch was created
#
################################################################################

git show --summary `git merge-base <branch> master`
git show $(git merge-base <branch> master)

Other logs infos
-----------
git show --summary
git reflog --date=local --all
git reflog --date=relative
git reflog --date=relative
git reflog --date=local

git log <branch> --not master
gitk <branch> --not master
git reflog --date=local | grep <branch>

If when branch was created within gc.reflogexpire days (default 90 days)
git log -g <branch>
git reflog show <branch>


-----
# https://davidwalsh.name/sort-git-branches
# find branches I've recently used
git for-each-ref --sort=-committerdate refs/heads/

# see the date of last commit
git for-each-ref --sort='-committerdate' --format='%(refname)%09%(committerdate)' refs/heads | sed -e 's-refs/heads/--'

################################################################################
set no-pager
################################################################################
https://stackoverflow.com/questions/34704066/show-most-recent-commit-on-each-remote-branch-on-origin-using-git-for-each-ref/34704396

for ref in $(git for-each-ref --format='%(refname:short)' | grep 'origin/')
do
    git --no-pager log $ref -n 1 --oneline
done

################################################################################
#
# Autocomplete Git Commands and Branch Names in terminal
#
################################################################################

https://apple.stackexchange.com/questions/55875/git-auto-complete-for-branches-at-the-command-line
https://stackoverflow.com/questions/12399002/how-to-configure-git-bash-command-line-completion
https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion
http://blog.pagepro.co/2016/12/28/autocomplete-git-commands-and-branch-names-in-terminal/

http://code-worrier.com/blog/autocomplete-git/
http://code-worrier.com/blog/autocomplete-git/
https://coderwall.com/p/d2w7oa/auto-completion-within-complex-git-alias
http://clubmate.fi/tab-complete-git-commands-and-branches/    #

https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks

git fetch --prune --all

################################################################################
#
#    Undo a commit and redo
#
################################################################################

$ git commit -m "Something terribly misguided"              (1)
$ git reset HEAD~                                           (2)
<< edit files as necessary >>                               (3)
$ git add ...                                               (4)
$ git commit -c ORIG_HEAD

git reset <file>
git reset

git fetch origin
git pull origin master

git mergetool

Oh me, oh my, upstream changed some things, but just to use my changes...no...their changes...

git checkout --ours filename.c
git checkout --theirs filename.c
git add filename.c
git commit -m "using theirs"

DiffMerge
https://sourcegear.com/diffmerge/

git mergetool -t diffmerge .
git diff --name-status --diff-filter=U
git merge --strategy-option ours # theirs
git merge --strategy-option theirs

git pull --rebase origin master
git rebase --continue
git merge -s recursive -X patience other-branch

git pull -s recursive -X theirs <remoterepo or other repo>
git pull -X theirs
git checkout --theirs path/to/file
git merge --strategy-option theirs
git checkout --theirs path/to/the/
git checkout --ours path/to/the/




################################################################################
Undo / Reset last commit
################################################################################

https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git
https://www.git-tower.com/learn/git/faq/undo-last-commit/
https://devconnected.com/how-to-undo-last-git-commit/
https://www.atlassian.com/de/git/tutorials/undoing-changes/git-revert
https://code.likeagirl.io/how-to-undo-the-last-commit-393e7db2840b
https://opensource.com/article/18/6/git-reset-revert-rebase-commands
https://git-scm.com/docs/git-revert

git reset HEAD~
git reset --soft HEAD~1
git reset --hard HEAD~1
git revert HEAD


// ----------------------------
//
//  GIT MERGE Strategy
// https://stackoverflow.com/questions/173919/is-there-a-theirs-version-of-git-merge-s-ours
// https://stackoverflow.com/questions/4911794/git-command-for-making-one-branch-like-another/4912267#4912267
//
// ----------------------------

git merge -s ours branchname
git merge -s theirs branchname


git merge --strategy-option ours # theirs
git merge -s recursive -X theirs origin/master
git merge --strategy-option theirs
git pull -s recursive -X theirs



git checkout --theirs .
git add .

git checkout --ours .
git add

git diff --name-only --diff-filter=U | xargs git checkout ${branchName}
git diff --name-only --diff-filter=U | xargs git checkout master

git merge -X theirs branchB

https://stackoverflow.com/questions/10697463/resolve-git-merge-conflicts-in-favor-of-their-changes-during-a-pullgit pull -s recursive -X theirs <remoterepo or other repo>
https://stackoverflow.com/questions/173919/is-there-a-theirs-version-of-git-merge-s-ours
https://apple.stackexchange.com/questions/210617/git-auto-complete-branches-with-checkout-alias
https://stackoverflow.com/questions/17933401/how-do-i-remove-deleted-branch-names-from-autocomplete
https://superuser.com/questions/137689/git-pull-auto-complete-osx
https://stackoverflow.com/questions/927358/how-do-i-undo-the-last-commits-in-git?rq=1
https://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit?rq=1
https://stackoverflow.com/questions/161813/how-to-resolve-merge-conflicts-in-git?rq=1
https://stackoverflow.com/questions/4785107/resolve-conflicts-using-remote-changes-when-pulling-from-git-remote

################################################################################
#
#	GIT MERGE OPTIONS
#
################################################################################

usage: git merge [options] [<commit>...]
   or: git merge [options] <msg> HEAD <commit>
   or: git merge --abort

    -n                    do not show a diffstat at the end of the merge
    --stat                show a diffstat at the end of the merge
    --summary             (synonym to --stat)
    --log[=<n>]           add (at most <n>) entries from shortlog to merge commit message
    --squash              create a single commit instead of doing a merge
    --commit              perform a commit if the merge succeeds (default)
    -e, --edit            edit message before committing
    --ff                  allow fast-forward (default)
    --ff-only             abort if fast-forward is not possible
    --rerere-autoupdate   update the index with reused conflict resolution if possible
    --verify-signatures   Verify that the named commit has a valid GPG signature
    -s, --strategy <strategy>
                          merge strategy to use
    -X, --strategy-option <option=value>
                          option for selected merge strategy
    -m, --message <message>
                          merge commit message (for a non-fast-forward merge)
    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --abort               abort the current in-progress merge
    --progress            force progress reporting
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit
    --overwrite-ignore    update ignored files (default)

################################################################################
#
#	Resolving a Git conflict with binary files - Stack Overflow
#
#	git pull
#	Auto-merging files/file.jpg
#	CONFLICT (add/add): Merge conflict in files/file.jpg
#	https://stackoverflow.com/questions/278081/resolving-a-git-conflict-with-binary-files
#
################################################################################

git checkout accepts an --ours or --theirs option for cases like this. So if you have a merge conflict, and you know you just want the file from the branch you are merging in, you can do:

$ git checkout --theirs -- path/to/conflicted-file.txt
to use that version of the file. Likewise, if you know you want your version (not the one being merged in) you can use

$ git checkout --ours -- path/to/conflicted-file.txt

################################################################################
#
#   You have not concluded your merge (MERGE_HEAD exists).
#   Please, commit your changes before you can merge.
#
#   FIX
#
#   https://stackoverflow.com/questions/2113050/how-to-conclude-your-merge-of-a-file/2113068
#   https://stackoverflow.com/questions/11646107/you-have-not-concluded-your-merge-merge-head-exists
#   https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-reset.html
#
################################################################################

git commit -m "fixing merge conflicts"
git push

or
#git merge --abort
#git cherry-pick --abort
#git reset --merge
#git pull

or

#git reset –merge ORIG_HEAD
#git add file
#git push

################################################################################
#
#	Find out git branch creator
#	https://makandracards.com/makandra/26903-git-listing-branches-with-their-latest-author
#	https://code.i-harness.com/en/q/b7f29e
#	https://git-scm.com/docs/git-show-branch
#	https://git-scm.com/docs/git-branch
#	https://stackoverflow.com/questions/12055198/find-out-git-branch-creator/19135644
#	https://stackoverflow.com/questions/2255416/how-to-determine-when-a-git-branch-was-created
#
################################################################################

Git: Listing branches with their latest author
git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n
git for-each-ref --format='%(authorname) %09 -%(refname)' | sort

git for-each-ref --format='%(color:cyan)%(authordate:format:%m/%d/%Y %I:%M %p)    %(align:25,left)%(color:yellow)%(authorname)%(end) %(color:reset)%(refname:strip=3)' --sort=authordate refs/remotes

git show-branch --reflog="10,1 hour ago" --list master
git log <branch> --not master
git reflog --format=full

################################################################################
#
#	How can I delete branches in Git / Delete Local Branch
#	https://www.git-tower.com/learn/git/faq/delete-remote-branch
#	https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely
#
################################################################################

// remote
git push --delete <remote_name> <branch_name>
git push origin --delete <branch_name>

// locale
git branch -d <branch_name>
git branch -d branch_name
git branch -D branch_name

################################################################################
#
#	HEAD detached from origin/master
#
################################################################################

http://loekvandenouweland.com/content/head-detached-from-origin-master.html
http://redgreenrepeat.com/2018/06/08/how-to-push-a-detached-git-head/
https://stackoverflow.com/questions/17667023/git-how-to-reset-origin-master-to-a-commit
https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely
https://stackoverflow.com/questions/29149823/why-is-my-local-git-branch-detached
https://stackoverflow.com/questions/41863484/clear-git-local-cache
https://www.alexmoreno.net/head-detached-originmaster

################################################################################
#
#   SHOW deleted remote branches
#
################################################################################

https://stackoverflow.com/questions/5751582/fetch-from-origin-with-deleted-remote-branches

git fetch -p
git fetch -p origin

################################################################################
#
#	How to remove local untracked files from the current Git branch
#	https://koukia.ca/how-to-remove-local-untracked-files-from-the-current-git-branch-571c6ce9b6b1
#
################################################################################

see which files will be deleted
git clean -n

delete the files for real!
git clean -fd

remove directories
git clean -f -d or git clean -fd

remove ignored files
git clean -f -X or git clean -fX

remove ignored and non-ignored files
git clean -f -x or git clean -fx

################################################################################
#
#	You have not concluded your merge (MERGE_HEAD exists).
#	Please, commit your changes before you can merge.
#
################################################################################

git commit -m "fixing merge conflicts"
git push

To undo a merge:

git merge --abort [Since git version 1.7.4]
git reset --merge [prior git versions]

################################################################################
#
#	Merge conflict / git commit file.php -m "message"
#	fatal: cannot do a partial commit during a merge.
#
################################################################################

git merge <branch>

Keep or review your changes are between <------< HEAD and =======
Remove or review merge changes are between ======= and >------> origin/master

FIX:
git commit -i myfile.php
git push origin <branch>

-...-

MAC Xcode : git mergetool -t opendiff

<------< HEAD #Where the conflict starts

#Previous Revision

========== # The point where things look iffy

#Things that changed

>------>  New Commit # Point where the conflict ends



################################################################################
#
#   Command line instructions
#
################################################################################

Git global setup

git config --global user.name "Administrator"
git config --global user.email "admin@example.com"

Create a new repository

git clone http://pc-X551CA/root/mytest.git
cd mytest
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder

cd existing_folder
git init
git remote add origin http://pc-X551CA/root/mytest.git
git add .
git commit
git push -u origin master

Existing Git repository

cd existing_repo
git remote add origin http://pc-X551CA/root/mytest.git
git push -u origin --all
git push -u origin --tags

################################################################################
#
#   Check git branch
#
################################################################################

ls -ld /usr/local
ls -lA /usr/local
find /usr/local -user root
cd /usr/local
git branch
git status
git stash -p
git shelve
--------------------------------------------------------------

$ git --version
git version 1.7.5.4
$ which git
/usr/bin/git

--------------------------------------------------------------
git add
git commit -a
git help status
git status -uno
git status -s # short format
git status -b # branch format


################################################################################
#
#   rebase with stash and pull --rebase
#
################################################################################

git status
git stash
#git stash list
#git stash apply
#git stash apply --index
git pull -r
#git pull --rebase
git stash pop

--------------------------------------------------------------

git stash -u             	# This will stash everything, including unstaged files
git stash pop stash@{1}  	# This will apply your original stash
git stash drop 			# remove your "safe" stash.
git stash drop [stash-id] 	# (default is the latest stash, see all with git stash list).

--------------------------------------------------------------

usage: git stash list [<options>]
   or: git stash show [<stash>]
   or: git stash drop [-q|--quiet] [<stash>]
   or: git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
   or: git stash branch <branchname> [<stash>]
   or: git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
                       [-u|--include-untracked] [-a|--all] [<message>]]
   or: git stash clear

--------------------------------------------------------------

# Show what git will be remove
git clean -n

# If all is good
git clean -f

# If not all is good, see
git clean --help

# Finish
git stash pop

################################################################################
#
#   fix rebase error
#
################################################################################

--------------------------------------------------------------
# rebase error
# Cannot rebase: Your index contains uncommitted changes.
# You have unstaged changes.
# Please commit or stash them.
--------------------------------------------------------------

git status
#git checkout -- <file name>
git reset --hard
git stash
git pull --rebase
#git pull --no-rebase
git stash apply stash@{0}
git stash pop
#git stash applies
#git fetch && git merge --ff-only origin/master
git checkout somebranch

git update-index -q --ignore-submodules --refresh
git diff-files --ignore-submodules
git diff-index --cached --ignore-submodules HEAD --

git fetch
git rebase -p origin/master

################################################################################
#
#   unstash
#
################################################################################

git stash show -p stash@{0} | git apply -R
git stash show -p | git apply -R

git config --global alias.stash-unapply '!git stash show -p | git apply -R'
$ git stash apply
$ #... work work work
$ git stash-unapply

git stash branch testchanges

################################################################################
#
#   Config git
#
################################################################################

git config --global user.email "you@example.com"
git config --global user.name "Your Name"

git config core.fscache true 	# Enable the filesystem cache
git config core.ignoreStat true # Avoid inspecting large working trees
--------------------------------------------------------------

git log --graph --all

--------------------------------------------------------------

git rm --cached .idea/*

git commit -a
git add -u
git reset HEAD path/to/file
git commit

git commit -a
git update-index --assume-unchanged <file>
git update-index --no-assume-unchanged <file>

git status
git update-index --assume-unchanged README.textile
git update-index --no-assume-unchanged README.textile


git update-index --assume-unchanged [<file>...]
git update-index --skip-worktree [<file>...]
git update-index --no-assume-unchanged my-file.php

git config --global alias.ignore 'update-index --skip-worktree'
git config --global alias.unignore 'update-index --no-skip-worktree'
git config --global alias.ignored '!git ls-files -v | grep "^S"'

------------------------------------------------
################################################################################
#
#   Remove cache
#
################################################################################

git rm --cached file1 file2 dir/file3
git rm --cached `git ls-files -i --exclude-from=.gitignore`
#git ls-files -i --exclude-from=.gitignore | xargs git rm --cached
#git ls-files -i -z --exclude-from=.gitignore | xargs -0 git rm --cached
#git ls-files -i --exclude-from=.gitignore | %{git rm --cached $_}

git rm --cached .
git rm -r --cached .
git add .
git commit -m "Removing all files in .gitignore"

git clean -h
git clean -xdn

################################################################################
#
#   Git Commands Examples
#
################################################################################

git checkout developer
Your branch is behind 'origin/develop' by 2 commits, and can be fast-forwarded.
Your branch is behind  commits, and can be fast-forwarded.

git branch -a

  developer
  master

git branch -b <new_branch>

-------------------------------------------------------------

Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	new file:   htdocs/css/jquery-ui-1.12.0.custom.css
#	new file:   htdocs/javascript/jquery/jquery-ui-1.12.1.custom.js
#
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   htdocs/css/jquery-ui-1.12.0.custom.css
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#

-------------------------------------------------------------

git commit -a -m "scripts" test.php    # single file
git commit -m "scripts"  test.php    test2.php    # multiple files

################################################################################
#
# Your branch is ahead of 'origin/master' by x commits FIX
# http://stackoverflow.com/questions/16288176/your-branch-is-ahead-of-origin-master-by-3-commits
#
################################################################################

git reset --hard origin/master

# 4 simple commands
git checkout <branch_name>
git pull -s recursive -X theirs
git status
git reset --hard origin/<branch_name>
git fetch

# git push origin branch
# git pull origin branch

# git fetch origin other-branch && git merge other-branch
# git fetch origin other-branch
# git fetch
# git pull -- pull is a combination of fetch and merge

$ git merge origin/other-branch
# Fix merge conflicts, if they occur
# Add merge conflict fixes
$ git commit  # And commit the merge!

--------------------------------------------------------------

/etc/aliases
/etc/passwd

Create a file named ~/.ssh/config and put this in there:

Host h
User christopher
HostName my.domain.top
Now you only have to type ssh h and it does the same thing!

You can also use a wildcard:

Host *
User christopher

--------------------------------------------------------------

git ls-files -m
git status | grep modified
git status -uno
git status -s | grep '^M'
git status -s | awk '{if ($1 == "M") print $2}'
git status -s | awk '$1 == "M" { print $2 }'
git diff --name-only
git diff --name-only --diff-filter=M
git log -n1 --oneline --name-status | grep '^M'
https://git-scm.com/docs/git-status/1.7.0

# https://git-scm.com/docs/git-checkout


--------------------------------------------------------------

#brew upgrade
#brew update -v
#brew --config

--------------------------------------------------------------

ls -ld /usr/local
ls -lA /usr/local
find /usr/local -user root
cd /usr/local
git branch
git status
git stash -p
git shelve
---------
$ git --version
git version 1.7.5.4
$ which git
/usr/bin/git
------
git add
git commit -a
git help status
git status -uno
git status -s # short format
git status -b # branch format

--------------------------------------------------------------
# rebase stash

git status
git stash
#git stash list
#git stash apply
#git stash apply --index
git pull -r
#git pull --rebase
git stash pop

----

git stash -u             	# This will stash everything, including unstaged files
git stash pop stash@{1}  	# This will apply your original stash
git stash drop 			# remove your "safe" stash.
git stash drop [stash-id] 	# (default is the latest stash, see all with git stash list).

----

usage: git stash list [<options>]
   or: git stash show [<stash>]
   or: git stash drop [-q|--quiet] [<stash>]
   or: git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
   or: git stash branch <branchname> [<stash>]
   or: git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
                       [-u|--include-untracked] [-a|--all] [<message>]]
   or: git stash clear

--------------------------------------------------------------

# Show what git will be remove
git clean -n

# If all is good
git clean -f

# If not all is good, see
git clean --help

# Finish
git stash pop

--------------------------------------------------------------

#unstash

git stash show -p stash@{0} | git apply -R
git stash show -p | git apply -R

git config --global alias.stash-unapply '!git stash show -p | git apply -R'
$ git stash apply
$ #... work work work
$ git stash-unapply

git stash branch testchanges

------------------------------------------------
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

git config core.fscache true 	# Enable the filesystem cache
git config core.ignoreStat true # Avoid inspecting large working trees
------------------------------------------------
--color
git log --graph --all
------------------------------------------------

git rm --cached .idea/*

git commit -a
git add -u
git reset HEAD path/to/file
git commit

git commit -a
git update-index --assume-unchanged <file>
git update-index --no-assume-unchanged <file>

git status
git update-index --assume-unchanged README.textile
git update-index --no-assume-unchanged README.textile

git update-index --assume-unchanged [<file>...]
git update-index --skip-worktree [<file>...]
git update-index --no-assume-unchanged my-file.php

git config --global alias.ignore 'update-index --skip-worktree'
git config --global alias.unignore 'update-index --no-skip-worktree'
git config --global alias.ignored '!git ls-files -v | grep "^S"'

------------------------------------------------

# remove

git rm --cached file1 file2 dir/file3
git rm --cached `git ls-files -i --exclude-from=.gitignore`
#git ls-files -i --exclude-from=.gitignore | xargs git rm --cached
#git ls-files -i -z --exclude-from=.gitignore | xargs -0 git rm --cached
#git ls-files -i --exclude-from=.gitignore | %{git rm --cached $_}

git rm --cached .
git rm -r --cached .
git add .
git commit -m "Removing all files in .gitignore"

git clean -h
git clean -xdn

################################################################################
#
#	Git error on commit after merge - fatal: cannot do a partial commit during a merge
#	fatal: cannot do a partial commit during a merge.
# 	Fix: git commit -i my_filename
#
################################################################################

------------------------------------------------------------

Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

-----------------------------------------------------------

warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

----------------------------------------------------

################################################################################
#
# 	GIT DELETED FILES
#
# 	http://blog.kablamo.org/2013/12/08/git-restore/
# 	https://gist.github.com/infusion/b2cfefbea3fd0f601eec9755c69a7b66
# 	https://gitguys.com/repositories/how-to-recover-a-deleted-a-file-from-my-git-repository/
#	https://stackoverflow.com/questions/4099742/how-to-compare-files-from-two-different-branches
#	https://stackoverflow.com/questions/38664421/how-do-i-call-git-diff-on-the-same-file-between-2-different-local-branches/38664474
#
################################################################################

# find an old releted reference file ****
git log --diff-filter=D --summary | grep -i filename

# to restore the deleted file. ****
git checkout $commit~1 path/to/file.ext
git checkout <commit>~1 <filename>
git checkout 81eeccf~1 <your-lost-file-name>

# get list of current deleted files in working tree
git ls-files --deleted

# restore all those deleted files in a folder enter the following command. ***
git ls-files -d | xargs git checkout --

# If the deletion has been committed, find the commit where it happened, then recover the file from this commit.
git rev-list -n 1 HEAD -- <file>
git checkout <commit>^ -- <file>

# restore fresh deleted file
git checkout -- <file>

# show all deleted
git log --diff-filter=D --summary                  # all deleted files ever
git log --diff-filter=D --summary .                # all deleted files in cwd
git log --diff-filter=D --author=Batman --summary  # all files deleted by Batman

# search the contents of deleted files
git rev-list --all | xargs git grep 'string'
git log --summary -S<string> [<path/to/file>] [--since=2009.1.1] [--until=2010.1.1]

# Find last commit for the deleted file
git rev-list -n 1 HEAD -- $path

# Restore a file that has been deleted from a git repository:
git rev-list -n 1 HEAD -- [deleted-filename]

# Checkout the commit before the the delete happened
git checkout $commit^ -- $path
git checkout ~1 -- [deleted-filename]

# List information about a particular filename that has been deleted from a git repository
git log -- [deleted-filename]
git log -- deletedFile.txt

# List all files that have been deleted from a git repository
git log --diff-filter=D --summary | grep delete

# read deleted file code
- recreate file on the same path / compare with other branches / copy code back to new file or use diff
git diff mybranch master -- myfile.cs
git diff mybranch..master -- myfile.cs



################################################################################
#
#   GIT UI, Workflows & Features
#
################################################################################

git status --short --branch # angezeigten Branches lassen sich jetzt konfigurieren
git clone # hat jetzt die neue Option --no-tags,


https://raw.githubusercontent.com/git/git/master/Documentation/RelNotes/2.14.0.txt
https://github.com/git/git

 * The colors in which "git status --short --branch" showed the names
   of the current branch and its remote-tracking branch are now
   configurable.

 * "git clone" learned the "--no-tags" option not to fetch all tags
   initially, and also set up the tagopt not to follow any tags in
   subsequent fetches.

 * "git archive --format=zip" learned to use zip64 extension when
   necessary to go beyond the 4GB limit.

 * "git reset" learned "--recurse-submodules" option.

 * "git diff --submodule=diff" now recurses into nested submodules.

 * "git repack" learned to accept the --threads=<n> option and pass it
   to pack-objects.

################################################################################
#
#  config and diff
#
################################################################################

git config --global alias.lg 'log --oneline --abbrev-commit --all --graph --decorate --color --max-count=20'
git config --global --edit # to remove alias
git config --global alias.gs 'status'
git config --global --unset alias.gs # to remove alias

git diff --word-diff=color file_from_repo

################################################################################
#
#   How to colorize diff on the command line?
#   https://stackoverflow.com/questions/8800578/how-to-colorize-diff-on-the-command-line
#
################################################################################

git diff file1 file1 | awk 'FNR == 8'
diff file1 file1 | awk 'FNR == 8'
vimdiff file1 file1 | awk 'FNR == 8'


####################################################################################
#
#   Git error on commit after merge - fatal: cannot do a partial commit during a merge
#
####################################################################################

git commit -i myfile.php
#git reset --soft
https://www.kernel.org/pub/software/scm/git/docs/git-commit.html
https://git-scm.com/docs/git-commit

-i
--include

Before making a commit out of staged contents so far, stage the contents of
paths given on the command line as well. This is usually not what you want
unless you are concluding a conflicted merge.



##########################################################
#
#	Git add ignore
#
##########################################################

#echo ".idea/*" >> .gitignore
#git commit -am "remove .idea"

--------------------------------------------

$ cat .gitignore
# Can ignore specific files
.DS_Store
# Use wildcards as well
*~
*.swp
# Can also ignore all directories and files in a directory.
tmp/**/*


# git config --global core.excludesfile ~/.gitignore
# git config --global core.excludesfile ~/.gitignore_global
# git rm --cached <filename>
# git check-ignore -v
# git check-ignore -v node_modules/
# git add -A
# git status
# git check-ignore -v --no-index path/with/unexpected/result
# git update-index --assume-unchanged <file>
# https://git-scm.com/docs/git-check-ignore
# https://help.github.com/articles/ignoring-files/



# https://devcenter.heroku.com/articles/gitignore
mkdir log
$ echo '*.log' > log/.gitignore
$ git add log
$ echo tmp >> .gitignore
$ git add .gitignore
$ git commit -m "ignored log files and tmp dir"


git rm -f db/*.sqlite3
$ echo '*.sqlite3' >> .gitignore
$ git add .gitignore
$ git commit -m "ignored sqlite databases"




--------

https://git-scm.com/docs/git-stash
https://stackoverflow.com/questions/20537223/what-is-the-intended-use-case-for-git-stash

# Assume the latest commit was already done
# start working on the next patch, and discovered I was missing something
# stash away the current mess I made
git stash save
# some changes in the working dir
# and now add them to the last commit:
git add -u
git commit --amend
# back to work!
git stash pop