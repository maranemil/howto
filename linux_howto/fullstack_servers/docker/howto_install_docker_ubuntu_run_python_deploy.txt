##################################################################
#
#	installation docker
#	https://docs.docker.com/engine/installation/linux/ubuntulinux/
#
##################################################################

sudo apt-get update # Update your apt source
sudo apt-get install apt-transport-https ca-certificates

# Add the new GPG key.
sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D


# Ubuntu version		Repository
# Precise 12.04 (LTS)		deb https://apt.dockerproject.org/repo ubuntu-precise main
# Trusty 14.04 (LTS)		deb https://apt.dockerproject.org/repo ubuntu-trusty main
# Xenial 16.04 (LTS)		deb https://apt.dockerproject.org/repo ubuntu-xenial main

echo "<REPO>" | sudo tee /etc/apt/sources.list.d/docker.list

sudo apt-get update
apt-cache policy docker-engine # Verify that APT is pulling from the right repository
sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
sudo apt-get install linux-image-generic-lts-trusty
sudo reboot

sudo apt-get install docker-engine
sudo service docker start
sudo docker run hello-world

sudo groupadd docker
sudo usermod -aG docker $USER
docker run hello-world


# update firewall settings
sudo ufw status
sudo nano /etc/default/ufw  #set: DEFAULT_FORWARD_POLICY="ACCEPT"
sudo ufw reload
sudo ufw allow 2375/tcp


sudo nano /etc/default/docker # set: DOCKER_OPTS="--dns 8.8.8.8"
--dns 8.8.8.8 --dns 192.168.1.1
sudo service docker restart
sudo nano /etc/NetworkManager/NetworkManager.conf # dns=dnsmasq

sudo restart network-manager
sudo restart docker
sudo systemctl enable docker # Configure Docker to start on boot
sudo apt-get upgrade docker-engine # Upgrade Docker
sudo apt-get purge docker-engine # Uninstall
sudo apt-get autoremove --purge docker-engine # rm -rf /var/lib/docker

################################################################
#
# Run local python script in docker
# https://confluence.atlassian.com/bitbucket/debug-your-pipelines-locally-with-docker-838273569.html
#
################################################################

cd /Users/myUserName/code
git clone git@bitbucket.org:myBBUserName/localDebugRepo.git

docker -v

# Log in to your Docker container
# Once your Docker installation is in place, you can log in to your local Docker container:

docker run -it --volume=/Users/myUserName/code/localDebugRepo:/localDebugRepo --workdir="/localDebugRepo" --memory=4g --memory-swap=4g --entrypoint=/bin/bash python:2.7

# root@1af123ef2211:/localDebugRepo

python --version
python myScript.py
pip install scipy

################################################################

https://bitbucket.org/account/user/awslabs/projects/BP
https://bitbucket.org/awslabs/aws-elastic-beanstalk-bitbucket-pipelines-python
https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html

amazon-ecs-bitbucket-pipelines-python
amazon-s3-bitbucket-pipelines-python
aws-cloudformation-bitbucket-pipelines-python
aws-codedeploy-bitbucket-pipelines-python
aws-elastic-beanstalk-bitbucket-pipelines-python
aws-lambda-bitbucket-pipelines-python



################################################################
#
#   How to install Docker + portainer on Ubuntu 20.04 Focal Fossa
#   https://semuada.com/articles/geek/230-how-to-install-docker-on-ubuntu-20-04-focal-fossa
#   https://www.portainer.io/
#   https://www.portainer.io/products/community-edition
#
################################################################

sudo apt update
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"

sudo apt update
apt-cache policy docker-ce
sudo apt install docker-ce
sudo systemctl status docker
sudo usermod -aG docker $USER


# docker volume create portainer_data | docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

open browser and navigate to http://localhost:9000

----------------------------------------------------------------------
Portainer Deployment
----------------------------------------------------------------------
https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/

docker volume create portainer_data

Portainer Server Deployment
docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

Portainer Agent Only Deployment
docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent


----------------------------------------------------------------------

docker run -d -ti --name myubuntu ubuntu /bin/bash
docker run -d -ti --name mydebian debian /bin/bash

docker run -it --rm -v $(realpath ~/notebooks):/tf/notebooks -p 8888:8888 tensorflow/tensorflow:latest-jupyter

docker run --rm -it  --sysctl net.core.somaxconn=2048 redis:latest redis-server


sudo systemctl daemon-reload
sudo systemctl restart docker.service
systemctl status docker.service
systemctl start docker
systemctl status docker
sudo service docker start
sudo service docker stop

systemctl is-enabled docker
sudo systemctl enable --now docker
sudo systemctl status  docker

sudo systemctl disable docker.service
sudo systemctl stop docker.service
sudo systemctl enable docker.socket

sudo systemctl start docker.socket

docker info

Stopping docker.service, but it can still be activated by:
  docker.socket



https://www.howtoforge.com/tutorial/ubuntu-docker-portainer/
https://documentation.portainer.io/quickstart/
https://portainer.readthedocs.io/en/stable/deployment.html

----------------------------------------------------------------------

sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer


sudo docker start portainer
docker stop portainer
docker stop portainer
docker start portainer


docker-compose.yml file:

Copy to clipboard
version: '3.7'
services:
  portainer:
    container_name: portainer
    restart: unless-stopped
    image: portainer/portainer
    volumes:
      - /home/docker/portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9000:9000"



https://documentation.portainer.io/
https://docs.docker.com/engine/reference/commandline/container_kill/
https://www.portainer.io/solutions/docker


###########################################################
# clean docker
###########################################################
https://linuxize.com/post/how-to-remove-docker-images-containers-volumes-and-networks/

# Removing All Unused Docker Objects
docker system prune
docker system prune -a
docker system prune --volumes

# Removing all stopped containers
docker container ls -a
docker container prune
docker container ls -a --filter status=exited --filter status=created
docker container prune --filter "until=12h"

# Stop and remove all containers
docker container stop $(docker container ls -aq)
docker container rm $(docker container ls -aq)

# Removing Docker Images
docker image ls
docker image rm 75835a67d134 2a4cca5ac898
docker image prune
docker image prune -a
docker image prune -a --filter "until=168h"

# Removing Docker Volumes
docker volume ls
docker volume rm
docker volume prune

# check processes, images,
sudo docker ps -a
docker images  ls
docker volume ls

# Removing docker
# sudo apt-get purge docker-ce docker-ce-cli containerd.io.

# re-install portainer
https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/
docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v/data/portainer/data:/data portainer/portainer


Portainer Server Deployment CE
docker volume create portainer_data

docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

Portainer Agent Only Deployment CE
Run the following command to deploy the Agent in your Docker host.

docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent







