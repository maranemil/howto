

###############################################################################
#
#   Learning Curves for Machine Learning
#   https://www.dataquest.io/blog/learning-curves-machine-learning/
#
###############################################################################

import pandas as pd
electricity = pd.read_excel('Folds5x2_pp.xlsx')

print(electricity.info())
electricity.head(3)


###############################################################################
#
#   Working with SQLite Databases using Python and Pandas
#   https://www.dataquest.io/blog/python-pandas-databases/
#
###############################################################################

import sqlite3
conn = sqlite3.connect("flights.db")
cur = conn.cursor()
cur.execute("select * from airlines limit 5;")
results = cur.fetchall()
print(results)
cur.close()
conn.close()


import sqlite3
conn = sqlite3.connect("flights.db")
cur = conn.cursor()
coords = cur.execute("""
  select cast(longitude as float),
  cast(latitude as float)
  from airports;"""
).fetchall()

from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
m = Basemap(
  projection='merc',
  llcrnrlat=-80,
  urcrnrlat=80,
  llcrnrlon=-180,
  urcrnrlon=180,
  lat_ts=20,
  resolution='c'
)

m.drawcoastlines()
m.drawmapboundary()
x, y = m(
  [l[0] for l in coords],
  [l[1] for l in coords]
)

m.scatter(
  x,
  y,
  1,
  marker='o',
  color='red'
)


import pandas as pd
import sqlite3

conn = sqlite3.connect("flights.db")
df = pd.read_sql_query("select * from airlines limit 5;", conn)
df
df["country"]
routes = pd.read_sql_query("""
                           select cast(sa.longitude as float) as source_lon,
                           cast(sa.latitude as float) as source_lat,
                           cast(da.longitude as float) as dest_lon,
                           cast(da.latitude as float) as dest_lat
                           from routes
                           inner join airports sa on
                           sa.id = routes.source_id
                           inner join airports da on
                           da.id = routes.dest_id;
                           """,
                           conn)

m = Basemap(projection='merc',llcrnrlat=-80,urcrnrlat=80,llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c')
m.drawcoastlines()

for name, row in routes[:3000].iterrows():
    if abs(row["source_lon"] - row["dest_lon"]) < 90:
        # Draw a great circle between source and dest airports.
        m.drawgreatcircle(
            row["source_lon"],
            row["source_lat"],
            row["dest_lon"],
            row["dest_lat"],
            linewidth=1,
            color='b'
        )


cur = conn.cursor()
cur.execute("insert into airlines values (6048, 19846, 'Test flight', '', '', null, null, null, 'Y')")
conn.commit()
pd.read_sql_query("select * from airlines where id=19846;", conn)




cur = conn.cursor()
name = "Test Flight"
cur.execute("insert into airlines values (6049, 19847, {0}, '', '', null, null, null, 'Y')".format(name))
conn.commit()


cur = conn.cursor()
values = ('Test Flight', 'Y')
cur.execute("insert into airlines values (6049, 19847, ?, '', '', null, null, null, ?)", values)
conn.commit()


# Updating rows
cur = conn.cursor()
values = ('USA', 19847)
cur.execute("update airlines set country=? where id=?", values)
conn.commit()

# Deleting rows
cur = conn.cursor()
values = (19847, )
cur.execute("delete from airlines where id=?", values)
conn.commit()

pd.read_sql_query("select * from airlines where id=19847;", conn)

# Creating table

cur = conn.cursor()
cur.execute("create table daily_flights (id integer, departure date, arrival date, number text, route_id integer)")
conn.commit()

cur.execute("insert into daily_flights values (1, '2016-09-28 0:00', '2016-09-28 12:00', 'T1', 1)")
conn.commit()

pd.read_sql_query("select * from daily_flights;", conn)

# Creating tables with pandas

from datetime import datetime
df = pd.DataFrame(
    [[1, datetime(2016, 9, 29, 0, 0) , datetime(2016, 9, 29, 12, 0), 'T1', 1]],
    columns=["id", "departure", "arrival", "number", "route_id"]
)

df.to_sql("daily_flights", conn, if_exists="replace")
pd.read_sql_query("select * from daily_flights;", conn)






###############################################################################

Top 20 Python AI and Machine Learning Open Source Projects
https://www.dataquest.io/blog/top-20-python-ai-and-machine-learning-open-source-projects/
###############################################################################

https://www.tensorflow.org/
http://scikit-learn.org/
https://keras.io/
https://pytorch.org/
http://deeplearning.net/software/theano/

https://radimrehurek.com/gensim/
http://caffe.berkeleyvision.org/
https://docs.chainer.org/en/stable/
http://www.statsmodels.org/stable/index.html
http://shogun-toolbox.org/examples/latest/index.html
http://deeplearning.net/software/pylearn2/large_data.html#large-data
http://neon.nervanasys.com/index.html/
https://nilearn.github.io/
https://pymc-devs.github.io/pymc/README.html
https://pypi.org/project/deap/
https://pypi.org/project/annoy/
http://pybrain.org/
https://fuel.readthedocs.io/en/latest/

https://orange.biolab.si/screenshots/

###############################################################################

Updated to the Keras 2.0 API.
classifier_from_little_data_script_1.py
https://gist.github.com/fchollet/0830affa1f7f19fd47b06d4cf89ed44d


###############################################################################

'''This script goes along the blog post
"Building powerful image classification models using very little data"
from blog.keras.io.
It uses data that can be downloaded at:
https://www.kaggle.com/c/dogs-vs-cats/data
In our setup, we:
- created a data/ folder
- created train/ and validation/ subfolders inside data/
- created cats/ and dogs/ subfolders inside train/ and validation/
- put the cat pictures index 0-999 in data/train/cats
- put the cat pictures index 1000-1400 in data/validation/cats
- put the dogs pictures index 12500-13499 in data/train/dogs
- put the dog pictures index 13500-13900 in data/validation/dogs
So that we have 1000 training examples for each class, and 400 validation examples for each class.
In summary, this is our directory structure:
```
data/
    train/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
    validation/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
```
'''

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K


# dimensions of our images.
img_width, img_height = 150, 150

train_data_dir = 'data/train'
validation_data_dir = 'data/validation'
nb_train_samples = 2000
nb_validation_samples = 800
epochs = 50
batch_size = 16

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

# this is the augmentation configuration we will use for testing:
# only rescaling
test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size)

model.save_weights('first_try.h5')


###############################################################################
#
#	https://gist.github.com/fchollet/b7507f373a3446097f26840330c1c378
#	keras_logistic_regression.py
#
###############################################################################


from keras.models import Sequential
from keras.layers import Dense

x, y = ...
x_val, y_val = ...

# 1-dimensional MSE linear regression in Keras
model = Sequential()
model.add(Dense(1, input_dim=x.shape[1]))
model.compile(optimizer='rmsprop', loss='mse')
model.fit(x, y, nb_epoch=10, validation_data=(x_val, y_val))

# 2-class logistic regression in Keras
model = Sequential()
model.add(Dense(1, activation='sigmoid', input_dim=x.shape[1]))
model.compile(optimizer='rmsprop', loss='binary_crossentropy')
model.fit(x, y, nb_epoch=10, validation_data=(x_val, y_val))

# logistic regression with L1 and L2 regularization
from keras.regularizers import l1l2

reg = l1l2(l1=0.01, l2=0.01)

model = Sequential()
model.add(Dense(1, activation='sigmoid', W_regularizer=reg, input_dim=x.shape[1]))
model.compile(optimizer='rmsprop', loss='binary_crossentropy')
model.fit(x, y, nb_epoch=10, validation_data=(x_val, y_val))

###############################################################################
#
#	Defining a Theano function to output intermediate transformations in a Keras model
#	https://gist.github.com/fchollet/fcd51ecae50f00c91e69
#
###############################################################################


import theano
from keras.models import Sequential
from keras.layers.core import Dense, Activation

X_train, y_train = ... # load some training data
X_batch = ... # a batch of test data

# this is your initial model
model = Sequential()
model.add(Dense(20, 64))
model.add(Activation('tanh'))
model.add(Dense(64, 1))

# we train it
model.compile(loss='mse', optimizer='sgd')
model.fit(X_train, y_train, nb_epoch=20, batch_size=16)

# we define a function that returns the activation of layer 1 (after the tanh)
get_layer_1 = theano.function([model.layers[0].input], model.layers[1].output(train=False), allow_input_downcast=True)
transformed_data = get_layer_1(X_batch) # activation of layer 1


###############################################################################
#
#	classifier_from_little_data_script_2.py
#	https://gist.github.com/fchollet/f35fbc80e066a49d65f1688a7e99f069
#	Updated to the Keras 2.0 API.
#
###############################################################################


'''This script goes along the blog post
"Building powerful image classification models using very little data"
from blog.keras.io.
It uses data that can be downloaded at:
https://www.kaggle.com/c/dogs-vs-cats/data
In our setup, we:
- created a data/ folder
- created train/ and validation/ subfolders inside data/
- created cats/ and dogs/ subfolders inside train/ and validation/
- put the cat pictures index 0-999 in data/train/cats
- put the cat pictures index 1000-1400 in data/validation/cats
- put the dogs pictures index 12500-13499 in data/train/dogs
- put the dog pictures index 13500-13900 in data/validation/dogs
So that we have 1000 training examples for each class, and 400 validation examples for each class.
In summary, this is our directory structure:
```
data/
    train/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
    validation/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
```
'''
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dropout, Flatten, Dense
from keras import applications

# dimensions of our images.
img_width, img_height = 150, 150

top_model_weights_path = 'bottleneck_fc_model.h5'
train_data_dir = 'data/train'
validation_data_dir = 'data/validation'
nb_train_samples = 2000
nb_validation_samples = 800
epochs = 50
batch_size = 16


def save_bottlebeck_features():
    datagen = ImageDataGenerator(rescale=1. / 255)

    # build the VGG16 network
    model = applications.VGG16(include_top=False, weights='imagenet')

    generator = datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_width, img_height),
        batch_size=batch_size,
        class_mode=None,
        shuffle=False)
    bottleneck_features_train = model.predict_generator(
        generator, nb_train_samples // batch_size)
    np.save(open('bottleneck_features_train.npy', 'w'),
            bottleneck_features_train)

    generator = datagen.flow_from_directory(
        validation_data_dir,
        target_size=(img_width, img_height),
        batch_size=batch_size,
        class_mode=None,
        shuffle=False)
    bottleneck_features_validation = model.predict_generator(
        generator, nb_validation_samples // batch_size)
    np.save(open('bottleneck_features_validation.npy', 'w'),
            bottleneck_features_validation)


def train_top_model():
    train_data = np.load(open('bottleneck_features_train.npy'))
    train_labels = np.array(
        [0] * (nb_train_samples / 2) + [1] * (nb_train_samples / 2))

    validation_data = np.load(open('bottleneck_features_validation.npy'))
    validation_labels = np.array(
        [0] * (nb_validation_samples / 2) + [1] * (nb_validation_samples / 2))

    model = Sequential()
    model.add(Flatten(input_shape=train_data.shape[1:]))
    model.add(Dense(256, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1, activation='sigmoid'))

    model.compile(optimizer='rmsprop',
                  loss='binary_crossentropy', metrics=['accuracy'])

    model.fit(train_data, train_labels,
              epochs=epochs,
              batch_size=batch_size,
              validation_data=(validation_data, validation_labels))
    model.save_weights(top_model_weights_path)


save_bottlebeck_features()
train_top_model()



###############################################################################
#
#	Fine-tuning a Keras model. Updated to the Keras 2.0 API.
#	https://gist.github.com/fchollet/7eb39b44eb9e16e59632d25fb3119975
#	classifier_from_little_data_script_3.py
#
###############################################################################

'''This script goes along the blog post
"Building powerful image classification models using very little data"
from blog.keras.io.
It uses data that can be downloaded at:
https://www.kaggle.com/c/dogs-vs-cats/data
In our setup, we:
- created a data/ folder
- created train/ and validation/ subfolders inside data/
- created cats/ and dogs/ subfolders inside train/ and validation/
- put the cat pictures index 0-999 in data/train/cats
- put the cat pictures index 1000-1400 in data/validation/cats
- put the dogs pictures index 12500-13499 in data/train/dogs
- put the dog pictures index 13500-13900 in data/validation/dogs
So that we have 1000 training examples for each class, and 400 validation examples for each class.
In summary, this is our directory structure:
```
data/
    train/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
    validation/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
```
'''

from keras import applications
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers
from keras.models import Sequential
from keras.layers import Dropout, Flatten, Dense

# path to the model weights files.
weights_path = '../keras/examples/vgg16_weights.h5'
top_model_weights_path = 'fc_model.h5'
# dimensions of our images.
img_width, img_height = 150, 150

train_data_dir = 'cats_and_dogs_small/train'
validation_data_dir = 'cats_and_dogs_small/validation'
nb_train_samples = 2000
nb_validation_samples = 800
epochs = 50
batch_size = 16

# build the VGG16 network
model = applications.VGG16(weights='imagenet', include_top=False)
print('Model loaded.')

# build a classifier model to put on top of the convolutional model
top_model = Sequential()
top_model.add(Flatten(input_shape=model.output_shape[1:]))
top_model.add(Dense(256, activation='relu'))
top_model.add(Dropout(0.5))
top_model.add(Dense(1, activation='sigmoid'))

# note that it is necessary to start with a fully-trained
# classifier, including the top classifier,
# in order to successfully do fine-tuning
top_model.load_weights(top_model_weights_path)

# add the model on top of the convolutional base
model.add(top_model)

# set the first 25 layers (up to the last conv block)
# to non-trainable (weights will not be updated)
for layer in model.layers[:25]:
    layer.trainable = False

# compile the model with a SGD/momentum optimizer
# and a very slow learning rate.
model.compile(loss='binary_crossentropy',
              optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),
              metrics=['accuracy'])

# prepare data augmentation configuration
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary')

# fine-tune the model
model.fit_generator(
    train_generator,
    samples_per_epoch=nb_train_samples,
    epochs=epochs,
    validation_data=validation_generator,
nb_val_samples=nb_validation_samples)



###############################################################################

Getting Started with Kaggle: House Prices Competition
https://www.dataquest.io/blog/kaggle-getting-started/

###############################################################################

import pandas as pd
import numpy as np

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

print ("Train data shape:", train.shape)
print ("Test data shape:", test.shape)

train.head()


"""
    SalePrice — the property's sale price in dollars. This is the target variable that you're trying to predict.
    MSSubClass — The building class
    MSZoning — The general zoning classification
    LotFrontage — Linear feet of street connected to property
    LotArea — Lot size in square feet
    Street — Type of road access
    Alley — Type of alley access
    LotShape — General shape of property
    LandContour — Flatness of the property
    Utilities — Type of utilities available
    LotConfig — Lot configuration

"""

import matplotlib.pyplot as plt
plt.style.use(style='ggplot')
plt.rcParams['figure.figsize'] = (10, 6)
train.SalePrice.describe()

print ("Skew is:", train.SalePrice.skew())
plt.hist(train.SalePrice, color='blue')
plt.show()

target = np.log(train.SalePrice)
print ("Skew is:", target.skew())
plt.hist(target, color='blue')
plt.show()


# Working with Numeric Features

numeric_features = train.select_dtypes(include=[np.number])
numeric_features.dtypes

corr = numeric_features.corr()

print (corr['SalePrice'].sort_values(ascending=False)[:5], '\n')
print (corr['SalePrice'].sort_values(ascending=False)[-5:])

train.OverallQual.unique()


quality_pivot = train.pivot_table(index='OverallQual',
                                  values='SalePrice', aggfunc=np.median)

quality_pivot




quality_pivot.plot(kind='bar', color='blue')
plt.xlabel('Overall Quality')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)
plt.show()


plt.scatter(x=train['GrLivArea'], y=target)
plt.ylabel('Sale Price')
plt.xlabel('Above grade (ground) living area square feet')
plt.show()

plt.scatter(x=train['GarageArea'], y=target)
plt.ylabel('Sale Price')
plt.xlabel('Garage Area')
plt.show()

train = train[train['GarageArea'] < 1200]

plt.scatter(x=train['GarageArea'], y=np.log(train.SalePrice))
plt.xlim(-200,1600) # This forces the same scale as before
plt.ylabel('Sale Price')
plt.xlabel('Garage Area')
plt.show()


# Handling Null Values

nulls = pd.DataFrame(train.isnull().sum().sort_values(ascending=False)[:25])
nulls.columns = ['Null Count']
nulls.index.name = 'Feature'
nulls

print ("Unique values are:", train.MiscFeature.unique())

# Wrangling the non-numeric Features

categoricals = train.select_dtypes(exclude=[np.number])
categoricals.describe()

# Transforming and engineering features

print ("Original: \n")
print (train.Street.value_counts(), "\n")

train['enc_street'] = pd.get_dummies(train.Street, drop_first=True)
test['enc_street'] = pd.get_dummies(train.Street, drop_first=True)

print ('Encoded: \n')
print (train.enc_street.value_counts())


condition_pivot = train.pivot_table(index='SaleCondition',
                                    values='SalePrice', aggfunc=np.median)
condition_pivot.plot(kind='bar', color='blue')
plt.xlabel('Sale Condition')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)
plt.show()


def encode(x): return 1 if x == 'Partial' else 0
train['enc_condition'] = train.SaleCondition.apply(encode)
test['enc_condition'] = test.SaleCondition.apply(encode)

condition_pivot = train.pivot_table(index='enc_condition', values='SalePrice', aggfunc=np.median)
condition_pivot.plot(kind='bar', color='blue')
plt.xlabel('Encoded Sale Condition')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)
plt.show()


data = train.select_dtypes(include=[np.number]).interpolate().dropna()
sum(data.isnull().sum() != 0)

# Step 3 : Build a linear model

y = np.log(train.SalePrice)
X = data.drop(['SalePrice', 'Id'], axis=1)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
                                    X, y, random_state=42, test_size=.33)



from sklearn import linear_model
lr = linear_model.LinearRegression()
model = lr.fit(X_train, y_train)

# Evaluate the performance and visualize results

print ("R^2 is: \n", model.score(X_test, y_test))
predictions = model.predict(X_test)

from sklearn.metrics import mean_squared_error
print ('RMSE is: \n', mean_squared_error(y_test, predictions))


actual_values = y_test
plt.scatter(predictions, actual_values, alpha=.75,
            color='b') #alpha helps to show overlapping data
plt.xlabel('Predicted Price')
plt.ylabel('Actual Price')
plt.title('Linear Regression Model')
plt.show()


# Try to improve the model

for i in range (-2, 3):
    alpha = 10**i
    rm = linear_model.Ridge(alpha=alpha)
    ridge_model = rm.fit(X_train, y_train)
    preds_ridge = ridge_model.predict(X_test)

    plt.scatter(preds_ridge, actual_values, alpha=.75, color='b')
    plt.xlabel('Predicted Price')
    plt.ylabel('Actual Price')
    plt.title('Ridge Regularization with alpha = {}'.format(alpha))
    overlay = 'R^2 is: {}\nRMSE is: {}'.format(
                    ridge_model.score(X_test, y_test),
                    mean_squared_error(y_test, preds_ridge))
    plt.annotate(s=overlay,xy=(12.1,10.6),size='x-large')
    plt.show()



# Step 4: Make a submission

submission = pd.DataFrame()
submission['Id'] = test.Id

feats = test.select_dtypes(
        include=[np.number]).drop(['Id'], axis=1).interpolate()


predictions = model.predict(feats)
final_predictions = np.exp(predictions)

print ("Original predictions are: \n", predictions[:5], "\n")
print ("Final predictions are: \n", final_predictions[:5])


submission['SalePrice'] = final_predictions
submission.head()
submission.to_csv('submission1.csv', index=False)





##############################################################
#
#	Machine Learning
#	https://github.com/data-science-workshops/machine-learning-workflow
#	https://github.com/data-science-workshops/machine-learning-101
#
##############################################################

Machine Learning Workflow

	Workflow
	Raw Data Collection
	Pre-Processing
	Sampling
	Model Training
	Model Evaluation
	Hyperparameter Optimization
	Deployment

Agenda

	Einführung Machine Learning
	Machine Learning Workflow
	Raw Data Collection
	Pre-Processing
	Sampling
	Model Training
	Model Evaluation
	Hyperparameter Optimization
	Deployment




https://github.com/Hacktoberfest-2018/Hello-world
https://github.com/Igglybuff/awesome-piracy
https://github.com/golang/go
https://github.com/facebook/Docusaurus
https://github.com/anubhavshrimal/FaceRecognition
https://github.com/Yijunmaverick/GenerativeFaceCompletion
https://github.com/saebrahimi/Emotion-Recognition-RNN

# keras
https://github.com/keras-team/keras
https://github.com/eriklindernoren/Keras-GAN
https://github.com/leriomaggio/deep-learning-keras-tensorflow
https://github.com/emilwallner/Screenshot-to-code-in-Keras

# pytorch
https://github.com/pytorch/pytorch
https://github.com/yunjey/pytorch-tutorial
https://github.com/chenyuntc/pytorch-book
https://github.com/spro/practical-pytorch
https://github.com/jcjohnson/pytorch-examples

# tensorflow
https://github.com/open-source-for-science/TensorFlow-Course
https://github.com/tensorflow/tensorflow
https://github.com/tensorflow/tensorflow
https://github.com/aymericdamien/TensorFlow-Examples
https://github.com/chiphuyen/stanford-tensorflow-tutorials
https://github.com/carpedm20/DCGAN-tensorflow
https://github.com/nfmcclure/tensorflow_cookbook
https://github.com/Hvass-Labs/TensorFlow-Tutorials
https://github.com/MorvanZhou/Tensorflow-Tutorial
https://github.com/mozilla/DeepSpeech
https://github.com/pkmital/tensorflow_tutorials































#############################################################

scikit image learn

#############################################################

https://scikit-image.org/
http://scikit-image.org/docs/stable/auto_examples/
http://scikit-image.org/docs/stable/auto_examples/edges/plot_canny.html
http://scikit-image.org/docs/stable/auto_examples/filters/plot_denoise.html
http://scikit-image.org/docs/stable/auto_examples/filters/plot_denoise_wavelet.html
http://scikit-image.org/docs/stable/auto_examples/numpy_operations/plot_camera_numpy.html
http://scikit-image.org/docs/stable/auto_examples/segmentation/plot_rag_merge.html
http://scikit-image.org/docs/stable/auto_examples/xx_applications/plot_haar_extraction_selection_classification.html

https://scikit-learn.org/stable/
https://scikit-learn.org/stable/auto_examples/index.html
https://scikit-learn.org/stable/auto_examples/applications/plot_face_recognition.html
https://scikit-learn.org/stable/auto_examples/bicluster/plot_spectral_biclustering.html
https://scikit-learn.org/stable/auto_examples/compose/plot_compare_reduction.html
https://scikit-learn.org/stable/auto_examples/decomposition/plot_image_denoising.html
https://scikit-learn.org/stable/auto_examples/decomposition/plot_faces_decomposition.html
https://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_iris.html
https://scikit-learn.org/stable/auto_examples/feature_selection/plot_rfe_digits.html
https://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html
https://scikit-learn.org/stable/auto_examples/model_selection/plot_cv_indices.html
https://scikit-learn.org/stable/auto_examples/neighbors/plot_kde_1d.html
https://scikit-learn.org/stable/auto_examples/neural_networks/plot_mnist_filters.html
https://scikit-learn.org/stable/auto_examples/neural_networks/plot_rbm_logistic_classification.html

http://www.nltk.org/

OPENCV
https://opencv.org/
https://docs.opencv.org/3.4/d9/df8/tutorial_root.html
https://docs.opencv.org/2.4/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html
https://docs.opencv.org/3.1.0/da/d22/tutorial_py_canny.html
https://docs.opencv.org/3.4/da/d5c/tutorial_canny_detector.html
http://opencvexamples.blogspot.com/2013/10/void-canny-inputarray-image-outputarray.html
https://docs.opencv.org/3.4/dc/dd3/tutorial_gausian_median_blur_bilateral_filter.html
https://docs.opencv.org/3.4/df/d61/tutorial_random_generator_and_text.html
https://docs.opencv.org/3.4/db/d8e/tutorial_threshold.html
https://docs.opencv.org/3.4/da/d5c/tutorial_canny_detector.html
https://docs.opencv.org/3.4/d4/d1b/tutorial_histogram_equalization.html
https://docs.opencv.org/3.4/d8/dc8/tutorial_histogram_comparison.html
https://docs.opencv.org/3.4/da/d6a/tutorial_trackbar.html
https://docs.opencv.org/3.4/d7/d73/tutorial_raster_io_gdal.html
https://docs.opencv.org/3.4/d5/dc4/tutorial_video_input_psnr_ssim.html
https://docs.opencv.org/3.4/d7/d9e/tutorial_video_write.html
https://docs.opencv.org/3.4/d4/d7d/tutorial_harris_detector.html
https://docs.opencv.org/3.4/d8/dd8/tutorial_good_features_to_track.html
https://docs.opencv.org/3.4/dd/d92/tutorial_corner_subpixels.html
https://docs.opencv.org/3.4/d7/d66/tutorial_feature_detection.html
https://docs.opencv.org/3.4/d5/dde/tutorial_feature_description.html
https://docs.opencv.org/3.4/d5/d6f/tutorial_feature_flann_matcher.html
https://docs.opencv.org/3.4/d1/dc5/tutorial_background_subtraction.html
https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html
https://docs.opencv.org/3.4/dc/d88/tutorial_traincascade.html
https://docs.opencv.org/3.4/da/d9d/tutorial_dnn_yolo.html
https://github.com/cmusatyalab/openface
https://docs.opencv.org/3.4/d3/db7/tutorial_hdr_imaging.html

KERAS
https://keras.io/
https://keras.io/#getting-started-30-seconds-to-keras
https://github.com/keras-team/keras/tree/master/examples
https://keras.io/visualization/
https://keras.io/getting-started/sequential-model-guide/
https://keras.rstudio.com/articles/examples/index.html
https://machinelearningmastery.com/tutorial-first-neural-network-python-keras/
https://www.kdnuggets.com/2017/10/seven-steps-deep-learning-keras.html
https://www.datacamp.com/community/blog/keras-cheat-sheet#gs.0X64hsc
https://blog.keras.io/introducing-keras-2.html
https://www.youtube.com/watch?v=FrkYu2zVUyM
https://faroit.github.io/keras-docs/0.3.0/examples/



PYTORCH
https://pytorch.org/tutorials/
https://pytorch.org/tutorials/beginner/blitz/tensor_tutorial.html
https://pytorch.org/tutorials/beginner/data_loading_tutorial.html
https://pytorch.org/tutorials/beginner/pytorch_with_examples.html
https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html
https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html
https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html
https://pytorch.org/tutorials/advanced/neural_style_tutorial.html
https://pytorch.org/tutorials/beginner/chatbot_tutorial.html
https://pytorch.org/tutorials/intermediate/char_rnn_generation_tutorial.html
https://pytorch.org/tutorials/intermediate/char_rnn_classification_tutorial.html
https://github.com/pytorch/examples
https://pytorch.org/tutorials/beginner/pytorch_with_examples.html
https://cs230-stanford.github.io/pytorch-getting-started.html
https://www.youtube.com/watch?v=FMvzxN6a5mI
https://www.analyticsvidhya.com/blog/2018/02/pytorch-tutorial/
https://stanford.edu/~shervine/blog/pytorch-how-to-generate-data-parallel
https://blog.algorithmia.com/convolutional-neural-nets-in-pytorch/
http://www.cs.virginia.edu/~vicente/vislang/notebooks/pytorch-lab.html


TENSORFLOW
https://www.tensorflow.org/
https://www.tensorflow.org/lite/


https://hub.packtpub.com/opencv-detecting-edges-lines-shapes/
https://www.pyimagesearch.com/2014/04/21/building-pokedex-python-finding-game-boy-screen-step-4-6/
https://www.learnopencv.com/find-center-of-blob-centroid-using-opencv-cpp-python/








https://keras.io/
https://pytorch.org/
http://scikit-learn.org/stable/modules/classes.html#module-sklearn.neural_network
https://www.tensorflow.org/
http://opennmt.net/
https://js.tensorflow.org/


https://github.com/aymericdamien/TensorFlow-Examples
https://github.com/OpenNMT/OpenNMT-py
https://github.com/pytorch/pytorch
https://github.com/pytorch/examples
https://github.com/ilkarman/DeepLearningFrameworks/ # Pytorch, Keras(TF), Tensorflow, Chainer, MXNet(Gluon), Caffe2, CNTK, Julia - Knet, R - MXNet

---------------------------------------------------------------------------------

http://scikit-learn.org/stable/auto_examples/index.html
http://scikit-learn.org/stable/auto_examples/plot_multioutput_face_completion.html#sphx-glr-auto-examples-plot-multioutput-face-completion-py
http://scikit-learn.org/stable/auto_examples/applications/plot_face_recognition.html#sphx-glr-auto-examples-applications-plot-face-recognition-py
http://scikit-learn.org/stable/auto_examples/classification/plot_digits_classification.html#sphx-glr-auto-examples-classification-plot-digits-classification-py
http://scikit-learn.org/stable/auto_examples/cluster/plot_digits_agglomeration.html#sphx-glr-auto-examples-cluster-plot-digits-agglomeration-py
http://scikit-learn.org/stable/auto_examples/cluster/plot_dict_face_patches.html#sphx-glr-auto-examples-cluster-plot-dict-face-patches-py
http://scikit-learn.org/stable/auto_examples/datasets/plot_digits_last_image.html#sphx-glr-auto-examples-datasets-plot-digits-last-image-py
http://scikit-learn.org/stable/auto_examples/decomposition/plot_faces_decomposition.html#sphx-glr-auto-examples-decomposition-plot-faces-decomposition-py
http://scikit-learn.org/stable/auto_examples/decomposition/plot_image_denoising.html#sphx-glr-auto-examples-decomposition-plot-image-denoising-py
http://scikit-learn.org/stable/auto_examples/linear_model/plot_logistic_l1_l2_sparsity.html#sphx-glr-auto-examples-linear-model-plot-logistic-l1-l2-sparsity-py
http://scikit-learn.org/stable/auto_examples/neural_networks/plot_rbm_logistic_classification.html#sphx-glr-auto-examples-neural-networks-plot-rbm-logistic-classification-py
http://scikit-learn.org/stable/auto_examples/semi_supervised/plot_label_propagation_digits.html#sphx-glr-auto-examples-semi-supervised-plot-label-propagation-digits-py
http://scikit-learn.org/stable/auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.html#sphx-glr-auto-examples-semi-supervised-plot-label-propagation-digits-active-learning-py







##############################################################
#
#	Keras vs PyTorch
#	https://deepsense.ai/keras-or-pytorch/
#
##############################################################

------------------
Keras
------------------

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(MaxPool2D())
model.add(Conv2D(16, (3, 3), activation='relu'))
model.add(MaxPool2D())
model.add(Flatten())
model.add(Dense(10, activation='softmax'))

------------------
PyTorch
------------------

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3)
        self.conv2 = nn.Conv2d(32, 16, 3)
        self.fc1 = nn.Linear(16 * 6 * 6, 10)
        self.pool = nn.MaxPool2d(2, 2)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 6 * 6)
        x = F.log_softmax(self.fc1(x), dim=-1)
        return x

model = Net()

--------------

################################################
How to write a pytorch sequential model?
################################################

device = torch.device('cpu')
if torch.cuda.is_available():
    device = torch.device('cuda')

net = nn.Sequential(
      nn.Linear(3, 4),
      nn.Sigmoid(),
      nn.Linear(4, 1),
      nn.Sigmoid()
      ).to(device)


print(net)






