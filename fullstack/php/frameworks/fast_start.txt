
#################################
Laravel
#################################

1. Choose the Stack: Laravel + Blade + Tailwind + MySQL
Framework: Laravel
Templating: Blade (built into Laravel)
Styling: Tailwind CSS (Laravel comes with it via Laravel Breeze or Jetstream)
Database: MySQL (or PostgreSQL)
Authentication: Laravel Breeze (simple) or Jetstream (advanced)

2. Install Laravel (Quick Setup)
composer create-project laravel/laravel myapp
cd myapp
php artisan serve

3. Add Authentication (in one command)
composer require laravel/breeze --dev
php artisan breeze:install
npm install && npm run dev
php artisan migrate
# Breeze gives Login/Register, Blade + Tailwind UI
# for more SPA-like feel, use: Jetstream with Livewire or Inertia.js / Laravel + Vue/React via Jetstream or Laravel UI

4. Define Models & Migrations
php artisan make:model Post -m
# edit the migration in database/migrations and run
php artisan migrate

5. Create Controllers, Routes, and Views
php artisan make:controller PostController
Route::resource('posts', PostController::class);
# Use Blade to create views in resources/views/posts.
# Define routes in routes/web.php:

6. Deploy Fast with Laravel Forge or Ploi

##################################
CakePHP
##################################

1. Install CakePHP with Composer
composer create-project --prefer-dist cakephp/app my_app
cd my_app
bin/cake server
# Then open: http://localhost:8765

2. Configure Your Database
'Datasources' => [
    'default' => [
        'host' => 'localhost',
        'username' => 'your_db_user',
        'password' => 'your_db_pass',
        'database' => 'your_db_name',
    ],
],

3. Generate Code with Bake (Scaffolding Tool)
bin/cake bake all posts
# Model, Controller, Views (HTML forms and tables)

4. Add Authentication
composer require cakephp/authentication

#################################################
Symfony
#################################################

1. Install Symfony CLI & Create Project
symfony new my_app --webapp
cd my_app
symfony serve
# Routing, Twig templating engine, Doctrine ORM, Security (auth, CSRF, password encoding), Web Debug Toolbar

2. Create Your First Entity
php bin/console make:entity
php bin/console make:migration
php bin/console doctrine:migrations:migrate

3. Create a CRUD Interface
php bin/console make:crud Post
# Entity, Controller, Views, Routes, Twig templates

4. Add Authentication
php bin/console make:user
php bin/console make:auth
# Symfony uses Guards and SecurityBundle for authentication and roles.


#################################################
laravel
#################################################
https://www.youtube.com/watch?v=Vik6oo4O7xo

laravel new proj123
php artisan server
# routes api
php artisan make:controller Customer
php artisan make:model Customer -m
php artisan migrate



