https://www.php.net/manual/en/language.oop5.decon.php
https://www.w3schools.com/php/php_oop_constructor.asp
https://www.php.net/manual/de/language.oop5.decon.php
https://www.phptutorial.net/php-oop/php-constructors/
https://www.infoq.com/articles/php7-classes-interfaces/
https://durak.org/sean/pubs/software/php-7.0.0/language.oop5.decon.html
https://phpenthusiast.com/blog/the-singleton-design-pattern-in-php
https://www.php.net/manual/en/language.oop5.inheritance.php


Using a visibility modifier (public, protected or private) is the most likely way to apply property promotion, but any other single modifier (such as readonly) will have the same effect.

--------------------------------

PHP Interface Constructor
https://www.php.net/manual/en/language.oop5.interfaces.php


In PHP, it is technically possible to define a constructor in an interface, but it is generally not considered a good practice

--------------------------------

Abstract Class Constructor in PHP
https://www.php.net/manual/en/language.oop5.abstract.php
https://www.geeksforgeeks.org/php/abstract-classes-in-php/

In PHP, an abstract class can have a constructor, which is used to initialize properties or perform setup tasks that are common to all child classes

--------------------------------

PHP Readonly Properties
https://php.watch/versions/8.1/readonly
https://www.php.net/manual/en/language.oop5.properties.php
https://stitcher.io/blog/readonly-classes-in-php-82
https://www.dailycomputerscience.com/post/complete-guide-on-readonly-properties-in-php
https://wiki.php.net/rfc/readonly_properties_v2


PHP 8.1 introduced the concept of readonly properties, which allow developers to define class properties that can only be assigned once and are immutable after initialization.


--------------------------------
https://www.w3schools.com/php/php_oop_classes_abstract.asp
https://www.php.net/manual/en/language.oop5.abstract.php

PHP Virtual Functions

In PHP, the concept of virtual functions is implemented differently compared to languages like C++. In PHP, all public and protected functions are effectively "virtual," meaning they can be overridden in derived classes.
 There is no need to explicitly declare them as virtual. However, if you want to ensure that a function must be overridden in a subclass, you can declare it as abstract.
 
 class A {
    public function x() {
        echo "A::x() was called.\n";
    }

    public function y() {
        self::x();
        echo "A::y() was called.\n";
    }

    public function z() {
        $this->x();
        echo "A::z() was called.\n";
    }
}

class B extends A {
    public function x() {
        echo "B::x() was called.\n";
    }
}

$b = new B();
$b->y();
echo "--\n";
$b->z();   

--------------------------------

https://www.w3schools.com/php/keyword_final.asp
https://www.php.net/manual/en/language.oop5.final.php

PHP Final Keyword
In PHP, a "final" function is a method that cannot be overridden by a child class. This means that once a method is declared as final, any attempt to redefine it in a subclass will result in a fatal error.

class animals {
    public final function move() {
        echo "Move ahead";
    }
}

final class FrameworkCore {
    public function run() {
        // Core logic for running the framework
    }
}

--------------------------------------

