

#############################################################
Forecasting with Single Exponential Smoothing
#############################################################

https://www.itl.nist.gov/div898/handbook/pmc/section4/pmc4.htm
https://www.itl.nist.gov/div898/handbook/pmc/section4/pmc432.htm

https://otexts.com/fpp2/simple-methods.html
https://otexts.com/fpp2/AR.html
https://otexts.com/fpp2/MA.html
https://otexts.com/fpp2/arima-r.html
https://otexts.com/fpp2/non-seasonal-arima.html

https://thisinterestsme.com/php-trend-forecast-function/
https://otexts.com/fpp2/simple-methods.html
https://www.avercast.eu/post/naive-forecasting
https://www.php.net/manual/en/svmmodel.predict.php
https://www.php.net/manual/en/svm.train.php
https://stackoverflow.com/questions/39672498/php-calculate-trend-line-like-excel-trend-function
https://board.phpbuilder.com/d/10383355-simple-exponential-smoothing-in-php

use Phpml\Regression\LeastSquares;
$x = [[323], [373], [423], [473], [523], [573]];
$y = [.038, .046, .053, .062, .071, .080];
$regression = new LeastSquares();
$regression->train($x, $y);
echo $regression->predict([428]);
echo number_format($regression->predict([428]), 3);


# simple exponential smoothing method
New forecast=(alpha)(Current demand) + (1-alpha)(Last Forecast)
alpha=0.2
# http://phptester.net/
$demands[] = rand(20,60);
$demands[] = rand(20,60);
print_r($demands);
$alpha = 0.2;
$initial_demand = array_shift($demands); // To start the reduction process off
$final_forecast = array_reduce($demands, function($last_forecast, $current_demand)use($alpha)
{
	return $alpha * $current_demand + (1 - $alpha) * $last_forecast;
}, $initial_demand);
print_r($final_forecast ); # Array ( [0] => 57 [1] => 58 ) 57.2
