##################################################################################
#
#    Adding constraints in phpMyAdmin
#    13.1.18.6 Using FOREIGN KEY Constraints
#    https://stackoverflow.com/questions/9499675/adding-constraints-in-phpmyadmin
#    https://dev.mysql.com/doc/refman/5.7/en/create-table-foreign-keys.html
#    https://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html
#    https://www.youtube.com/watch?v=nm8y9gSi7O8
#    https://www.youtube.com/watch?v=A42FG4LzdbY
#
##################################################################################

CASCADE

Whenever rows in the master (referenced) table are deleted (resp. updated), the respective rows of the child (referencing) table with a matching foreign key column will get deleted (resp. updated) as well. This is called a cascade delete (resp. update[2]).

RESTRICT

A value cannot be updated or deleted when a row exists in a foreign key table that references the value in the referenced table. Similarly, a row cannot be deleted as long as there is a reference to it from a foreign key table.

NO ACTION

NO ACTION and RESTRICT are very much alike. The main difference between NO ACTION and RESTRICT is that with NO ACTION the referential integrity check is done after trying to alter the table. RESTRICT does the check before trying to execute the UPDATE or DELETE statement. Both referential actions act the same if the referential integrity check fails: the UPDATE or DELETE statement will result in an error.

SET NULL

The foreign key values in the referencing row are set to NULL when the referenced row is updated or deleted. This is only possible if the respective columns in the referencing table are nullable. Due to the semantics of NULL, a referencing row with NULLs in the foreign key columns does not require a referenced row.




# Add table and CONSTRAINT

CREATE TABLE `demo_table` (
  `demo_table_id` int(11) UNSIGNED NOT NULL,
  `demo_table_ip` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

ALTER TABLE `demo_table` ADD PRIMARY KEY (`demo_table_id`);
ALTER TABLE `demo_table`
  ADD CONSTRAINT `demo_table_ibfk_3` FOREIGN KEY (`demo_table_id`) REFERENCES `demo_table_parent` (`demo_table_id`) ON DELETE CASCADE ON UPDATE CASCADE;

# Remove table and CONSTRAINT

ALTER TABLE demo_table DROP FOREIGN KEY demo_table_ibfk_3;
DROP TABLE `demo_table`;






##################################################################################
SQL Tutorial - Full Database Course for Beginners
https://youtu.be/HXV3zeQKqGY?t=8517
https://www.w3schools.com/sql/sql_foreignkey.asp
##################################################################################

CREATE TABLE employee(
	employee_id INT PRIMARY KEY,
	first_name VARCHAR(40),
	last_name VARCHAR(40),
	super_id INT,
	branch_id INT
);

CREATE TABLE branch(
	branch_id INT PRIMARY KEY,
	branch_name VARCHAR(40),
	manager_id INT,
	manager_date DATE,
 	FOREIGN_KEY (manager_id) REFERENCES employee(employee_id) ON DELETE SET NULL
);

ALTER TABLE employee ADD FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL;
ALTER TABLE employee ADD FOREIGN KEY(superviser_id) REFERENCES branch(employee_id) ON DELETE SET NULL;

CREATE TABLE client(
	client_id INT PRIMARY KEY,
	client_name VARCHAR(40),
	branch_id INT,
	FOREIGN_KEY (branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);


CREATE TABLE works_with(
	employee_id INT,
	client_id INT,
	total_sales INT,
	PRIMARY KEY(emp_id,client_id),
	FOREIGN_KEY (employee_id) REFERENCES employee(employee_id) ON DELETE CASCADE ,
	FOREIGN_KEY (client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier(
	branch_id INT,
	supplier_name VARCHAR(40),
	supplier_type VARCHAR(40),
	PRIMARY KEY(branch_id,supplier_name),
	FOREIGN_KEY (branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

INSERT INTO employee VALUES(100,'David,'Wall',NULL,1);
INSERT INTO branch VALUES(1,'Corporate',100,NOW());
UPDATE employee SET branch_id = 1 WHERE employee_id = 100;
INSERT INTO employee VALUES(101,'Jan,'Son',NULL,1);

# wildcard search for date XXXX-XX-XX
SELECT date FROM table LIKE '____-10%';

# trigger
DELIMITER $$
CREATE
	TRIGGER my_trigger BEFORE INSERT
	ON employee
	FOR EACH ROW BEGIN
		-- INSERT INTO my_trigger_table VALUES('added new entry');
		-- INSERT INTO my_trigger_table VALUES(NEW.first_name);
		IF NEW.first_name = 'John' THEN
			INSERT INTO my_trigger_table VALUES(NEW.first_name);
		ELSE
			INSERT INTO my_trigger_table VALUES('added new entry');
		END IF;
	END$$
DELIMITER;

# ON DELETE CASCADE
# ON DELETE SET NULL
# ON UPDATE RESTRICT (throws an error - no action)

# LEFT OUTER JOIN


#Second normal form (2NF)  Database normalization
https://www.edureka.co/blog/normalization-in-sql/
https://www.w3schools.in/dbms/database-normalization/

#######################################################
Programming with Mosh MySQL
https://www.youtube.com/watch?v=7S_tz1z_5bA
#######################################################

SELECT * FROM table
WHERE field REGEXP '^field$|mac|rose'
-- WHERE field REGEXP '[gim]e'
-- WHERE field REGEXP 'f[gim]'
-- WHERE field REGEXP '[a-h]e'

# use "using" when same key name
SELECT *
FROM table1 t1
JOIN table2  t2
-- ON t2.field_id = t1.field_id
   USING (field_id)

SELECT *
FROM table1 t1
CROSS JOIN table2  t2
-- NATURAL JOIN table2  t2

INSERT INTO table VALUES(
 	LAST_INSERD_ID(),NOW()
);

# copy table
CREATE TABLE some_table AS
SELECT * FROM orders;


# copy data with same colls
INSERT INTO some_table
SELECT * FROM orders;

# subquery
DELETE FROM table1
WHERE some_id = ( SELECT * FROM table2 WHERE name='X')

#######################################################
# VIEWS
# https://www.youtube.com/watch?v=DCp0oFVG_fk
# view tmp table - save prequeried data
#######################################################

CREATE VIEW viewtable AS
	SELECT * FROM table1 WHERE views > 1000

# update view updates also the parent table
UPDATE viewtable SET fielx=1 WHERE fiely=2

-- update in view does not support !!!!
-- Aggregate functons, GROUP BY, HAVING, UNION,
-- DISTINCT, LEFT RIGHT JOIN , subqueries
-- renaming columns

DROP VIEW  viewtable

#######################################################
# INDEXES
# https://www.youtube.com/watch?v=yWj320oEQEo
#######################################################

CREATE TABLE test (
	test_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
	test_name VARCHAR(40) NOT NULL,
	test_key VARCHAR(40) NOT NULL,
	PRIMARY KEY (test_id),
	INDEX idx_names(test_name, test_key)
) ENGINE = INNODB;

ALTER TABLE test ADD INDEX idx_sku (test_name);
DROP INDEX idx_sku ON test;
ALTER TABLE test ADD UNIQUE idx_sku (test_name);

CREATE INDEX idx_sku ON test (test_name);
CREATE FULLTEXT_INDEX idx_sku ON test (test_name);
CREATE INDEX idx_sku ON test (test_name(3)); -- only 3 chars

#######################################################
# triggers
# https://www.youtube.com/watch?v=gy6LY0Xy2zU
#######################################################

DROP TRIGGER IF EXISTS trigger_name;
CREATE TRIGGER trigger_name
BEFORE INSERT ON tablex
-- BEFORE UPDATE ON tablex
FOR EACH ROW
	SET New.name = UPPER(New.name)


CALL trigger_name ('Namex',1);
