###############################################################
aws docker
###############################################################

https://hub.docker.com/search?q=amazon&image_filter=store

https://hub.docker.com/r/amazon/aws-cli
https://hub.docker.com/r/amazon/aws-ebs-csi-driver
https://hub.docker.com/r/amazon/cloudwatch-agent
https://hub.docker.com/r/amazon/amazon-ecs-agent
https://hub.docker.com/r/amazon/amazon-ecs-sample
https://hub.docker.com/r/amazon/amazon-ecs-sample
https://hub.docker.com/r/amazon/aws-sam-cli-emulation-image-nodejs12.x
https://hub.docker.com/r/amazon/aws-sam-cli-build-image-python3.8
https://hub.docker.com/r/amazon/amazon-ec2-metadata-mock
https://hub.docker.com/r/amazon/dynamodb-local
https://hub.docker.com/r/amazon/lambda-build-node10.x
https://hub.docker.com/r/amazon/aws-sam-cli-emulation-image-python3.8
https://hub.docker.com/r/amazon/aws-lambda-python
https://hub.docker.com/r/amazon/aws-sam-cli-build-image-python3.7
https://hub.docker.com/r/amazon/aws-glue-libs
https://hub.docker.com/r/amazon/aws-lambda-nodejs
https://hub.docker.com/r/amazon/aws-sam-cli-emulation-image-python3.7
https://hub.docker.com/r/amazon/aws-sam-cli-build-image-java8
https://hub.docker.com/r/amazon/aws-lambda-provided
https://hub.docker.com/r/amazon/aws-lambda-java
https://hub.docker.com/r/amazon/amazon-ecs-network-sidecar

----------------------------------

https://reflectoring.io/aws-cloudformation-deploy-docker-image/
https://levelup.gitconnected.com/deploying-aws-lambda-with-docker-containers-i-gave-it-a-try-and-heres-my-review-147327519ce9

https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-images.html
https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-zip.html
https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html
https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-zip.html
https://docs.aws.amazon.com/lambda/latest/dg/python-package.html
https://docs.docker.com/cloud/ecs-integration/
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-build.html

###############################################################
Install JupyterLab and Sparkmagic
###############################################################

https://docs.aws.amazon.com/glue/latest/dg/dev-endpoint-tutorial-local-jupyter.html
https://docs.amazonaws.cn/en_us/glue/latest/dg/dev-endpoint-tutorial-local-jupyter.html
https://medium.com/explore-ml/connect-jupyter-notebook-to-aws-glue-endpoint-f5fc78b4e00
https://stackoverflow.com/questions/39149541/integrate-pyspark-with-jupyter-notebook
https://normanlimxk.com/2021/07/12/create-a-jupyterlab-notebook-for-spark/
https://catalog.us-east-1.prod.workshops.aws/workshops/aaaabcab-5e1e-4bff-b604-781a804763e1/en-US/lab2/glue-is/configure-is
https://noise.getoto.net/2022/08/16/introducing-aws-glue-interactive-sessions-for-jupyter/

jupyter-kernelspec install sparkmagic/kernels/sparkkernel
jupyter-kernelspec install sparkmagic/kernels/pysparkkernel

pip install jupyter
pip install sparkmagic
pip show sparkmagic


###############################################################
jupyter session workers
###############################################################

https://pypi.org/project/aws-glue-sessions/
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/glue_job
https://github.com/hashicorp/terraform-provider-aws/issues/8257


pip install --upgrade jupyter boto3 aws-glue-sessions
pip install aws-glue-sessions

#%%
%number_of_workers 2
%idle_timeoput 15
#%%


###############################################################
AWSTemplateFormatVersion
###############################################################

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/format-version-structure.html
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-version.html
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-lambda.html
https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/quickref-lambda.html
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html

https://www.youtube.com/watch?v=z5RZqY6-C2Q
https://www.youtube.com/watch?v=sD8KcXcaHFg

YAML

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: VPC function.

Globals:
  Function:
    Timeout: 20

Resources:
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: arn:aws:iam::123456789012:role/lambda-role
      Code:
        S3Bucket: my-bucket
        S3Key: function.zip
      Runtime: nodejs12.x
      Timeout: 5
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - sg-085912345678492fb
        SubnetIds:
          - subnet-071f712345678e7c8
          - subnet-07fd123456788a036


template.yaml

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: VPC function.

Globals:
  Function:
    Timeout: 20

Resources:
  CreteDataFrame:
    Type: AWS:Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: create_dataframe.lambda_handler
      Runtime: python3.9




###############################################################
###############################################################

https://www.diagrameditor.com/
https://app.diagrams.net/

###############################################################
AWS Lambdas deploy with Github Actions
###############################################################

https://www.youtube.com/watch?v=UQiRhKgQ5X0

https://www.youtube.com/watch?v=KorJPUKvHKc
https://www.youtube.com/watch?v=4FZyIb7PFJ0
https://www.youtube.com/watch?v=GRamcd1JHdc
https://www.youtube.com/watch?v=AmHZxULclLQ
https://www.youtube.com/watch?v=RklVsvE8iyQ

###############################################################
AWS PyCharm Intellij Plugins
###############################################################

AWS CloudFormation
https://plugins.jetbrains.com/plugin/7371-aws-cloudformation
https://plugins.jetbrains.com/plugin/11349-aws-toolkit
https://github.com/aws/aws-toolkit-visual-studio
https://aws.amazon.com/de/eclipse/
https://aws.amazon.com/de/intellij/

AWS Toolkit
https://plugins.jetbrains.com/plugin/11349-aws-toolkit

https://www.youtube.com/watch?v=31Wih42FqTM
https://www.youtube.com/watch?v=sD8KcXcaHFg
https://www.youtube.com/watch?v=DxET43rUkig
https://www.youtube.com/watch?v=04LMQxDxjGM
https://www.youtube.com/watch?v=z5RZqY6-C2Q
https://www.youtube.com/watch?v=q8A1J3lCguc
https://www.youtube.com/watch?v=DxET43rUkig
https://www.youtube.com/watch?v=31Wih42FqTM
https://www.youtube.com/watch?v=4Uoc3aLQjNI
https://www.youtube.com/watch?v=51EAwBDdgio

sam init

###############################################################
AWS VScode Plugins
###############################################################

AWS Toolkit
https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022
https://docs.aws.amazon.com/de_de/toolkit-for-visual-studio/latest/user-guide/welcome.html
https://aws.amazon.com/de/visualstudio/

https://www.youtube.com/watch?v=mhdX4znMd2Q
https://www.youtube.com/watch?v=fEZE3rm8Ma8

https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-invoke.html


sam local invoke "Ratings" -e event.json
echo '{"message": "Hey, are you there?" }' | sam local invoke --event - "Ratings"
sam local invoke --help
sam local invoke --env-vars env.json


https://medium.com/@jun711.g/invoking-aws-lambda-functions-locally-using-aws-sam-cli-b437e7f7a4b3
https://docs.amazonaws.cn/en_us/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html

pip3 install awscli --upgrade --user
aws --version
sam --version
sam
sam local invoke -e event.json





###############################################################
AWS secrets lambda
###############################################################

https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/get-secret-value.html
https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
https://awscli.amazonaws.com/v2/documentation/api/latest/reference/secretsmanager/get-secret-value.html
https://awscli.amazonaws.com/v2/documentation/api/2.1.30/reference/secretsmanager/get-secret-value.html
https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html
https://docs.aws.amazon.com/secretsmanager/latest/userguide/security-encryption.html
https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html
https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html
https://aws.amazon.com/de/premiumsupport/knowledge-center/secrets-manager-cross-account-key/
https://aws.amazon.com/de/blogs/compute/securely-retrieving-secrets-with-aws-lambda/
https://docs.aws.amazon.com/secretsmanager/latest/userguide/retrieving-secrets_lambda.html
https://aws.amazon.com/de/blogs/security/how-to-securely-provide-database-credentials-to-lambda-functions-by-using-aws-secrets-manager/
https://docs.aws.amazon.com/code-samples/latest/catalog/code-catalog-python-example_code-kms.html
https://docs.aws.amazon.com/kms/latest/developerguide/overview.html
https://docs.aws.amazon.com/code-library/latest/ug/python_3_kms_code_examples.html

https://boto3.amazonaws.com/v1/documentation/api/latest/guide/kms-examples.html
https://boto3.amazonaws.com/v1/documentation/api/latest/guide/secrets-manager.html
https://www.learnaws.org/2021/02/20/aws-kms-boto3-guide/


https://www.youtube.com/watch?v=J9QKS0NrH7I
https://github.com/BiteSizeAcademy/lambda-secrets



def create_cmk(description="My Customer Master Key"):
    """Creates a KMS Customer Master Key

    Description is used to differentiate between CMKs.
    """
    kms_client = boto3.client("kms")
    response = kms_client.create_key(Description=description)
    # Return the key ID and ARN
    return response["KeyMetadata"]["KeyId"], response["KeyMetadata"]["Arn"]


def retrieve_cmk(description):
    """Retrieve an existing KMS CMK based on its description"""

    # Retrieve a list of existing CMKs
    # If more than 100 keys exist, retrieve and process them in batches
    kms_client = boto3.client("kms")
    response = kms_client.list_keys()

    for cmk in response["Keys"]:
        key_info = kms_client.describe_key(KeyId=cmk["KeyArn"])
        if key_info["KeyMetadata"]["Description"] == description:
            return cmk["KeyId"], cmk["KeyArn"]

    # No matching CMK found
    return None, None


def create_data_key(cmk_id, key_spec="AES_256"):
    """Generate a data key to use when encrypting and decrypting data"""

    # Create data key
    kms_client = boto3.client("kms")
    response = kms_client.generate_data_key(KeyId=cmk_id, KeySpec=key_spec)

    # Return the encrypted and plaintext data key
    return response["CiphertextBlob"], base64.b64encode(response["Plaintext"])


from cryptography.fernet import Fernet

NUM_BYTES_FOR_LEN = 4

def encrypt_file(filename, cmk_id):
    """Encrypt JSON data using an AWS KMS CMK"""

    with open(filename, "rb") as file:
      file_contents = file.read()

    data_key_encrypted, data_key_plaintext = create_data_key(cmk_id)
    if data_key_encrypted is None:
        return

    # Encrypt the data
    f = Fernet(data_key_plaintext)
    file_contents_encrypted = f.encrypt(file_contents)

    # Write the encrypted data key and encrypted file contents together
    with open(filename + '.encrypted', 'wb') as file_encrypted:
        file_encrypted.write(len(data_key_encrypted).to_bytes(NUM_BYTES_FOR_LEN,
                                                              byteorder='big'))
        file_encrypted.write(data_key_encrypted)
        file_encrypted.write(file_contents_encrypted)

...............

from aws_lambda_powertools.utilities import parameters
def handler(event, context):
    # Retrieve a single secret
    value = parameters.get_secret("my-secret")
...............

import boto3
from botocore.exceptions import ClientError


def get_secret():
    secret_name = "MySecretName"
    region_name = "us-west-2"

    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name,
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'ResourceNotFoundException':
            print("The requested secret " + secret_name + " was not found")
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            print("The request was invalid due to:", e)
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            print("The request had invalid params:", e)
        elif e.response['Error']['Code'] == 'DecryptionFailure':
            print("The requested secret can't be decrypted using the provided KMS key:", e)
        elif e.response['Error']['Code'] == 'InternalServiceError':
            print("An error occurred on service side:", e)
    else:
        # Secrets Manager decrypts the secret value using the associated KMS CMK
        # Depending on whether the secret was a string or binary, only one of these fields will be populated
        if 'SecretString' in get_secret_value_response:
            text_secret_data = get_secret_value_response['SecretString']
        else:
            binary_secret_data = get_secret_value_response['SecretBinary']


.............

import sys
import pymysql
import boto3
import botocore
import json
import random
import time
import os
from botocore.exceptions import ClientError

# rds settings
rds_host = os.environ['RDS_HOST']
name = os.environ['RDS_USERNAME']
db_name = os.environ['RDS_DB_NAME']
helperFunctionARN = os.environ['HELPER_FUNCTION_ARN']

secret_name = os.environ['SECRET_NAME']
my_session = boto3.session.Session()
region_name = my_session.region_name
conn = None

# Get the service resource.
lambdaClient = boto3.client('lambda')


    def invokeConnCountManager(incrementCounter):
        # return True
        response = lambdaClient.invoke(
            FunctionName=helperFunctionARN,
            InvocationType='RequestResponse',
            Payload='{"incrementCounter":' + str.lower(str(incrementCounter)) + ',"RDBMSName": "Prod_MySQL"}'
        )
        retVal = response['Payload']
        retVal1 = retVal.read()
        return retVal1


    def openConnection():
        print("In Open connection")
        global conn
        password = "None"
        # Create a Secrets Manager client
        session = boto3.session.Session()
        client = session.client(
            service_name='secretsmanager',
            region_name=region_name
        )

        # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
        # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
        # We rethrow the exception by default.

        try:
            get_secret_value_response = client.get_secret_value(
                SecretId=secret_name
            )
            print(get_secret_value_response)
        except ClientError as e:
            print(e)
            if e.response['Error']['Code'] == 'DecryptionFailureException':
                # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
                # Deal with the exception here, and/or rethrow at your discretion.
                raise e
            elif e.response['Error']['Code'] == 'InternalServiceErrorException':
                # An error occurred on the server side.
                # Deal with the exception here, and/or rethrow at your discretion.
                raise e
            elif e.response['Error']['Code'] == 'InvalidParameterException':
                # You provided an invalid value for a parameter.
                # Deal with the exception here, and/or rethrow at your discretion.
                raise e
            elif e.response['Error']['Code'] == 'InvalidRequestException':
                # You provided a parameter value that is not valid for the current state of the resource.
                # Deal with the exception here, and/or rethrow at your discretion.
                raise e
            elif e.response['Error']['Code'] == 'ResourceNotFoundException':
                # We can't find the resource that you asked for.
                # Deal with the exception here, and/or rethrow at your discretion.
                raise e
        else:
            # Decrypts secret using the associated KMS CMK.
            # Depending on whether the secret is a string or binary, one of these fields will be populated.
            if 'SecretString' in get_secret_value_response:
                secret = get_secret_value_response['SecretString']
                j = json.loads(secret)
                password = j['password']
            else:
                decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
                print("password binary:" + decoded_binary_secret)
                password = decoded_binary_secret.password

        try:
            if(conn is None):
                conn = pymysql.connect(
                    rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)
            elif (not conn.open):
                # print(conn.open)
                conn = pymysql.connect(
                    rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)

        except Exception as e:
            print (e)
            print("ERROR: Unexpected error: Could not connect to MySql instance.")
            raise e


    def lambda_handler(event, context):
        if invokeConnCountManager(True) == "false":
            print ("Not enough Connections available.")
            return False

        item_count = 0
        try:
            openConnection()
            # Introducing artificial random delay to mimic actual DB query time. Remove this code for actual use.
            time.sleep(random.randint(1, 3))
            with conn.cursor() as cur:
                cur.execute("select * from Employees")
                for row in cur:
                    item_count += 1
                    print(row)
                    # print(row)
        except Exception as e:
            # Error while opening connection or processing
            print(e)
        finally:
            print("Closing Connection")
            if(conn is not None and conn.open):
                conn.close()
            invokeConnCountManager(False)

        content =  "Selected %d items from RDS MySQL table" % (item_count)
        response = {
            "statusCode": 200,
            "body": content,
            "headers": {
                'Content-Type': 'text/html',
            }
        }
        return response

###############################################################
Installing the AWS SAM CLI on Linux
###############################################################

https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install-linux.html
https://linuxhint.com/aws-sam-cli/
https://gist.github.com/singledigit/5f00ef69393b3b6f5dbfcf6cfada345e
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install-linux.html
https://gist.github.com/singledigit/5f00ef69393b3b6f5dbfcf6cfada345e

..............................

https://stackoverflow.com/questions/50637089/how-to-install-aws-sam-cli-in-ubuntu-14

# pip install -U pip setuptools
pip install --user --upgrade setuptools
pip install ez_setup
pip install --user --upgrade aws-sam-cli


https://www.youtube.com/watch?v=fEZE3rm8Ma8

sam --version # SAM CLI, version 1.61.0
sam init # start config folder
sam local invoke
sam deploy --guided # creates s3 in cloudformation
sam local invoke HelloWordFunction -e events/event.json
..............................

Amazon Linux 2

sudo yum update -y
sudo amazon-linux-extras install docker

sudo service docker start
sudo usermod -a -G docker ec2-user
docker ps

# install
sha256sum aws-sam-cli-linux-x86_64.zip
unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
sudo ./sam-installation/install
sam --version

# update
sudo ./sam-installation/install --update

# remove
which sam
sudo rm /usr/local/bin/sam
sudo rm -rf /usr/local/aws-sam-cli

..............................


###############################################################
python download packages locally
###############################################################

https://pypi.org/project/requests/
https://www.activestate.com/resources/quick-reads/how-to-pip-install-requests-python-package/
https://requests.readthedocs.io/en/latest/user/install/
https://www.geeksforgeeks.org/how-to-install-requests-in-python-for-windows-linux-mac/

pip3 install packagename -t .

###############################################################
Deploy LocalStack using Helm
###############################################################


https://github.com/localstack/helm-charts
https://docs.localstack.cloud/get-started/
https://helm.sh/docs/intro/install/
https://kubernetes.io/
https://localstack.cloud/localstack/
https://docs.localstack.cloud/get-started/#helm
https://artifacthub.io/packages/helm/mintel/standard-application-stack


From Apt (Debian/Ubuntu)
Members of the Helm community have contributed a Helm package for Apt. This package is generally up to date.

curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


From dnf/yum (fedora)
sudo dnf install helm

From Snap
sudo snap install helm --classic



helm repo add localstack https://localstack.github.io/helm-charts
helm search repo <keyword>
helm install <name> localstack/<chart>

helm repo add localstack-repo https://helm.localstack.cloud
helm upgrade --install localstack localstack-repo/localstack


###############################################################
Running AWS Services In A Laptop Using LocalStack
###############################################################

s3,ec2,apigateway

https://github.com/localstack/localstack
https://docs.localstack.cloud/aws/feature-coverage/

localstack status services

https://www.youtube.com/watch?v=8hi9P1ffaQk
https://www.youtube.com/watch?v=ATo19E6oegE
https://www.youtube.com/watch?v=qWIqodpYxSA
https://www.youtube.com/watch?v=fzpY7x1siHw
https://www.youtube.com/watch?v=FOzAdoxdnSc

...........................................

https://reflectoring.io/aws-cloudformation-deploy-docker-image/
https://levelup.gitconnected.com/deploying-aws-lambda-with-docker-containers-i-gave-it-a-try-and-heres-my-review-147327519ce9
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-build.html
https://aws.amazon.com/de/blogs/compute/using-container-image-support-for-aws-lambda-with-aws-sam/










