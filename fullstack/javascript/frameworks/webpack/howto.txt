######################################################
Webpack, Rollup, Parcel, and Snowpack
######################################################

https://github.com/mschwarzmueller/yt-webpack2-basics
https://www.youtube.com/watch?v=8DDVr6wjJzQ
https://www.youtube.com/watch?v=GU-2T7k9NfI&list=PL55RiY5tL51rcCnrOrZixuOsZhAHHy6os

npm init -y
npm install webpack --save-dev
npm install webpack-dev-server --save-dev
npm run build

######################################################
Webpack test
######################################################

https://stackoverflow.com/questions/68712902/webpack-dev-server-configure-for-a-library

src/index.js

function test() {
  console.log("test");
}
export { test };
webpack.config.js:

const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  entry: path.resolve(__dirname, "src/index.js"),
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "index_bundle.js",
    library: {
      name: "$",
      type: "umd",
    },
  },
  devtool: "source-map",
  devServer: {
    static: "./dist",
    port: 9000,
  },
  plugins: [new HtmlWebpackPlugin({ title: "Test" })],
  mode: "development",
};
package.json:

{
  "name": "68712902",
  "main": "dist/index_bundle.js",
  "scripts": {
    "build": "webpack",
    "start": "webpack serve --open"
  },
  "devDependencies": {
    "html-webpack-plugin": "^5.3.2",
    "webpack": "^5.51.1",
    "webpack-cli": "^4.8.0",
    "webpack-dev-server": "^4.0.0"
  }
}

-------------------------

https://linguinecode.com/post/how-to-setup-webpack-dev-server-react-babel


Inside the public directory, I will add a file called, index.html.


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>React with Webpack</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

install Webpack dependencies?

{
  "name": "react-with-webpack",
  "scripts": {
    "start": "webpack-dev-server --config ./webpack.config.js"
  },
  "dependencies": {
    "react": "^16.8.6",
    "react-dom": "^16.8.6"
  },
  "devDependencies": {
    "@babel/core": "^7.4.5",
    "babel-loader": "^8.0.6",
    "babel-preset-react-app": "^9.0.0",
    "html-webpack-plugin": "^3.2.0",
    "webpack": "^4.29.6",
    "webpack-cli": "^3.3.0",
    "webpack-dev-server": "^3.3.0"
  }
}


$ npm i react react-dom

$ npm i --save-dev html-webpack-plugin webpack webpack-cli webpack-dev-server
List of dependencies I’m installing:

react – Will allow us to write React code
react-dom – Will allow us to grab a React app and dump onto to the DOM
webpack – Will allow us to bundle all of our code into a final build
webpack-cli – Allows us to use the webpack command client tool
webpack-dev-server – Will enable use to create a localhost dev environment

webpack.config.js.

First I’m going to add some helpful variables and functions.


const path = require('path');
const fs = require('fs');
const HtmlWebpackPlugin = require('html-webpack-plugin');
// App directory
const appDirectory = fs.realpathSync(process.cwd());
// Gets absolute path of file within app directory
const resolveAppPath = relativePath => path.resolve(appDirectory, relativePath);
// Host
const host = process.env.HOST || 'localhost';
// Required for babel-preset-react-app
process.env.NODE_ENV = 'development';
module.exports = {}


Setup Webpack configuration for entry and output

// ... imports and variables
module.exports = {
  // Environment mode
  mode: 'development',
  // Entry point of app
  entry: resolveAppPath('src'),
  output: {
    // Development filename output
    filename: 'static/js/bundle.js',
  },
}


How to setup Webpack dev server configurations

// ... imports and variables
module.exports = {
  // ... mode, entry, output configurations
  devServer: {
    // Serve index.html as the base
    contentBase: resolveAppPath('public'),
    // Enable compression
    compress: true,
    // Enable hot reloading
    hot: true,
    host,
    port: 3000,
    // Public path is root of content base
    publicPath: '/',
  },
}

How to use HTML webpack plugin for your JS app

// ... imports and variables
module.exports = {
  // ... mode, entry, output configurations
  // ... dev server configurations
  plugins: [
    // Re-generate index.html with injected script tag.
    // The injected script tag contains a src value of the
    // filename output defined above.
    new HtmlWebpackPlugin({
      inject: true,
      template: resolveAppPath('public/index.html'),
    }),
  ],
}



https://github.com/rleija703/react-examples/tree/master/with-webpack
https://linguinecode.com/post/webpack-dev-server-proxy-api-calls-react
https://linguinecode.com/post/webpack-dev-server-proxy-api-calls-react
https://www.learnhowtoprogram.com/user-interfaces/responsive-design-development-environments/webpack-development-server
https://sourcegraph.com/github.com/webpack/webpack-dev-server/-/blob/package.json

Adding Webpack proxy
If you’d like to follow along, go to this article to help you setup your
React dev environment or go to the GitHub repo and download it.


module.exports = {
  // ... other configs
  devServer: {
    proxy: {
      '/api/bypass-example': {
        bypass: (req, res) => res.send({
          mssg: 'proxy server - Message came from bypass property in webpack'
        }),
      },
    },
  },
};


http://localhost:3001/api/v1/user or /api/v1/user)

######################################################
Webpack.config how to just copy the index.html to the dist folder
######################################################

https://stackoverflow.com/questions/32155154/webpack-config-how-to-just-copy-the-index-html-to-the-dist-folder
https://webpack.js.org/guides/asset-modules/
https://www.npmjs.com/package/copy-webpack-plugin

# Option 1
require('file-loader?name=[name].[ext]!../index.html');

# Option 2
const HtmlWebpackPlugin = require('html-webpack-plugin');
module.exports = {
  // ...
  plugins: [
    new HtmlWebpackPlugin({
      template: 'src/index.html'
    })
  ]
}

# Option 3
"scripts": {
    "test": "NODE_ENV=test karma start",
    "start": "node node_modules/.bin/webpack-dev-server --content-base app",
    "build": "NODE_ENV=production node node_modules/.bin/webpack && cp app/index.html dist/index.html"
  }


-----------------------

npm install copy-webpack-plugin --save-dev
npm install --save-dev copyfiles

const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  plugins: [
    new CopyPlugin([
      { from: 'static', to: 'static' },
      { from: 'index.html', to: 'index.html', toType: 'file'},
    ]),
  ],
};


module.exports = {
  plugins: [
    new CopyWebpackPlugin([{
      from: './*.html'
    }])
  ]
}


module.exports = {
  entry: [
    __dirname + "/index.html",
    .. other js files here
  ],
  module: {
    rules: [
      {
        test: /\.html/,
        loader: 'file-loader?name=[name].[ext]',
      },
      .. other loaders
    ]
  }
}


const HtmlWebpackPlugin = require('html-webpack-plugin');
module.exports = {
  // ...
  plugins: [
    new HtmlWebpackPlugin({
      template: './path/to/index.html',
    })
  ],
  // ...
};

######################################################
webpack hello world
######################################################

https://webpack.js.org/guides/getting-started/

  webpack-demo
  |- package.json
  |- package-lock.json
 |- index.html
 |- /src
   |- index.js


src/index.js
-----------------------
function component() {
  const element = document.createElement('div');

  // Lodash, currently included via a script, is required for this line to work
  element.innerHTML = _.join(['Hello', 'webpack'], ' ');

  return element;
}

document.body.appendChild(component());

index.html
-----------------------
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Getting Started</title>
    <script src="https://unpkg.com/lodash@4.17.20"></script>
  </head>
  <body>
    <script src="./src/index.js"></script>
  </body>
</html>


package.json

 {
   "name": "webpack-demo",
   "version": "1.0.0",
   "description": "",
   "private": true,
   "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1"
   },
   "keywords": [],
   "author": "",
   "license": "MIT",
   "devDependencies": {
     "webpack": "^5.38.1",
     "webpack-cli": "^4.7.2"
   }
 }

https://tkssharma.gitbook.io/react-training/day-01/hello-world-using-webpack

"scripts": {
 "dev": "webpack --mode development",
 "build": "webpack --mode production"
}

"scripts": {
 "dev": "webpack --mode development ./foo/src/js/index.js --output ./foo/main.js",
 "build": "webpack --mode production ./foo/src/js/index.js --output ./foo/main.js"
}



npm i html-webpack-plugin html-loader --save-dev

const HtmlWebPackPlugin = require("html-webpack-plugin");

module.exports = {
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader"
        }
      },
      {
        test: /\.html$/,
        use: [
          {
            loader: "html-loader",
            options: { minimize: true }
          }
        ]
      }
    ]
  },
  plugins: [
    new HtmlWebPackPlugin({
      template: "./src/index.html",
      filename: "./index.html"
    })
  ]
};

./src/index.html:

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="utf-8">
 <title>webpack 4 quickstart</title>
</head>
<body>
 <div id="app">
 </div>
</body>
</html>

run the build with:
npm run build

"scripts": {
 "start": "webpack-dev-server --mode development --open",
 "build": "webpack --mode production"
}


npm run start

------------------------

https://www.sitepoint.com/webpack-beginner-guide/

mkdir learn-webpack
cd learn-webpack
npm init -y

npm install webpack webpack-cli --save-dev

# package.json
{
  "name": "learn-webpack",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^5.9.0",
    "webpack-cli": "^4.2.0"
  }
}

"scripts": {
  "test": "echo \"Error: no test specified\" && exit 1",
  "dev": "webpack --mode development",
  "build": "webpack --mode production"
},

npm run dev

create an index.html file in the dist directory:

<!doctype html>
<html>
  <head>
    <title>Getting Started With Webpack</title>
  </head>
  <body>
    <script src="main.js"></script>
  </body>
</html>


webpack.config.js file in the root directory with the following content:

const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require('path');

module.exports = {
  plugins: [
    new HtmlWebpackPlugin({
      title: "Webpack Output",
    }),
  ],
};

npm run dev


<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Webpack Output</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script defer src="main.js"></script>
  </head>
  <body>
  </body>
</html>

webpack.config.js  add the following before the plugins property:

entry: {
  main: path.resolve(__dirname, './src/app.js'),
},
output: {
  filename: '[name].bundle.js',
  path: path.resolve(__dirname, 'deploy')
},


create an src/component.js file:

export default (text = "Hello, Webpack!") => {
  const element = document.createElement("h1");
  element.innerHTML = text;
  return element;
};

rename index.js to app.js  and replace its content with the following:

import component from './component';
document.body.appendChild(component());

npm run dev
npm run dev -- --devtool inline-source-map
npm install babel-loader @babel/core @babel/preset-env --save-dev


in webpack.config.js add module after the output property:

module: {
  rules: [
    {
      test: /\.js$/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader',
        options: {
          presets: ['@babel/preset-env']
        }
      }
    },
  ]
},

npm install css-loader style-loader --save-dev

in webpack.config.js:

module: {
  rules: [
    ...
    {
      test: /\.css$/,
      use: ["style-loader", "css-loader"]
    },
  ]
},

webpack.config.js: assets

module: {
  rules: [
    ...
    {
      test: /\.(?:ico|gif|png|jpg|jpeg)$/i,
      type: 'asset/resource',
    },
  ]
},

image-component.js file, in the src directory, with the following content:

import image from "./image.png";
const img = document.createElement("img");
img.src = image;
document.body.appendChild(img);

npm install webpack-dev-server --save-dev

"dev": "webpack serve --mode development"

configure the server in webpack.config.js by adding the following property after the output:

devServer: {
  contentBase: './deploy',
  open: true
},

npm install clean-webpack-plugin --save-dev

In webpack.config.js:

const { CleanWebpackPlugin } = require('clean-webpack-plugin');

...

plugins: [
  ...
  new CleanWebpackPlugin()
],


########################################################
How to Use Webpack
########################################################
https://codesweetly.com/javascript-module-bundler


cd path/to/project/root-directory
npm init -y
# yarn init -y


npm install webpack webpack-cli --save-dev
# yarn add webpack webpack-cli --dev

mkdir src dist

src
- index.html
- index.js

index.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ES Module - CodeSweetly</title>
  </head>
  <body id="body">
    <h1>Module Bundler Tutorial</h1>
    <button id="button">Click Me to Change Color!</button>

    <script src="./index.js"></script>
  </body>
</html>

npm install randomcolor --save
# yarn add randomcolor -D


// index.js
// Import the randomColor dependency:
import randomColor from "randomcolor";
// Initialize the bodyElement variable with the app's <body> element:
const bodyElement = document.getElementById("body");
// Initialize the buttonElement variable with the app's <button> element:
const buttonElement = document.getElementById("button");
// Define a changeBodyColor function:
function changeBodyColor() {
  // Initialize the color variable with the randomColor dependency's value:
  const color = randomColor();
  // Style the app's <body> element's background with the color variable's value:
  bodyElement.style.backgroundColor = color;
}
// Add a click event listener to the app's <button> element:
buttonElement.addEventListener("click", changeBodyColor);

# build
npx webpack

npm install html-webpack-plugin --save-dev
yarn add html-webpack-plugin --dev

touch webpack.config.js

// webpack.config.js
const HtmlWebpackPlugin = require("html-webpack-plugin");
module.exports = {
  plugins: [new HtmlWebpackPlugin()],
};


npx webpack


How to Make HtmlWebpackPlugin Use Your Source File as a Template to Auto-Generate a New HTML Page

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ES Module - CodeSweetly</title>
  </head>
  <body id="body">
    <h1>Module Bundler Tutorial</h1>
    <button id="button">Click Me to Change Color!</button>
  </body>
</html>

// webpack.config.js
const HtmlWebpackPlugin = require("html-webpack-plugin");
module.exports = {
  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/index.html",
    }),
  ],
};

Add watch to the scripts fields

npm run watch
yarn watch
webpack --progress --watch


How to Reload the Browser Automatically

npm install webpack-dev-server --save-dev
yarn add webpack-dev-server --dev

// webpack.config.js
const HtmlWebpackPlugin = require("html-webpack-plugin");
module.exports = {
  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/index.html",
    }),
  ],
  devServer: {
    static: "./dist",
    port: 5001,
  },
};

npx webpack serve --mode development --open

{
  "name": "your_package",
  "version": "1.0.0",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "webpack serve --mode development --open"
  }
}

##########################################################
You need to install 'webpack-dev-server' for running 'webpack serve'
##########################################################
https://www.npmjs.com/package/webpack-dev-server
https://stackoverflow.com/questions/59029282/webpack-dev-server-isnt-working-in-my-project


yarn remove webpack-dev-server
yarn add -D webpack-dev-server
pnpm add -D webpack-dev-server
npm install webpack-dev-server --save-dev


npx webpack serve


yarn remove webpack webpack-cli webpack-dev-server
yarn add webpack webpack-cli webpack-dev-server -D
yarn add webpack@^4 webpack-cli@^3 webpack-dev-server@^3 -D
yarn add webpack@^4.42.1 webpack-cli webpack-dev-server -D

"webpack": "^4.43.0",
"webpack-cli": "^3.3.12",
"webpack-dev-server": "^3.11.0"

"webpack": "^5.75.0",
"webpack-cli": "^5.0.1",
"webpack-dev-server": "^4.11.1"

https://sbcode.net/threejs/webpack-dev-server/
https://github.com/webpack/webpack-dev-server
https://github.com/vercel/next.js/issues/5781
https://github.com/johnagan/clean-webpack-plugin#options-and-defaults-optional
https://github.com/probablyup/link-media-html-webpack-plugin/issues/26
https://github.com/jantimon/html-webpack-plugin/issues/1682
https://rencore.com/blog/typeerror-argumentsi-apply-not-function-error-working-webpack/
https://github.com/jantimon/html-webpack-plugin/issues/1617
https://issuehunt.io/r/storybookjs/storybook/issues/14157

"webpack": "4.42.1"

npm uninstall --save html-webpack-plugin
npm install --save-dev html-webpack-plugin@4

npm install --save-dev webpack@4.44.2
npm run dev
npm uninstall webpack

yarn add webpack@4.46.0 -D



https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities
https://www.npmjs.com/


npm audit
npm install npm@latest -g .
npm audit fix --force
npm i --package-lock-only . --force
npm update
npm i webpack@4 --force  --save-dev
npm i webpack-cli@3 --force  --save-dev
npm i webpack-dev-server@4 --force  --save-dev
npm install --legacy-peer-deps

npm i webpack-cli@4.9.2 --force
npm show webpack-cli versions
npm show webpack-cli version
