################################################################################################
migration docker sqlite csv mariadb
################################################################################################

sudo apt install csvkit sqlite3

# Use root/example as user/password credentials
version: '3.1'
services:
  db:
    image: mariadb
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: example
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080


# sales csv import
sqlite3 -header -csv sales.db "select * from sales;" > sales.csv
csvsql --dialect mysql --snifflimit 100000 sales.csv > sales.sql
mysql --user='root' --password='example' --host 172.21.0.2 sales < sales.sql
mysql -h 172.21.0.2 -uroot -p
LOAD DATA LOCAL INFILE "sales.csv" INTO TABLE sales.sales FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n';

# backup
mysqldump  -u root -h 172.21.0.2 -p sales sales >  dump_sales.sql

ALTER TABLE `sales` ADD COLUMN `id` INT AUTO_INCREMENT UNIQUE FIRST;

mysqldump  -u root -h 172.21.0.2 -p sales sales >  dump_sales_with_index.sql


*
*
*
*
*

################################################
https://hub.docker.com/_/microsoft-mssql-server
################################################
Start a mssql-server instance using the latest update for SQL Server 2019
docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=yourStrong(!)Password" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest

Start a mssql-server instance running as the SQL Express edition
docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=yourStrong(!)Password" -e "MSSQL_PID=Express" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest

################################################
https://hub.docker.com/r/mysql/mysql-server
https://github.com/mysql/mysql-server
################################################

download the MySQL Community Edition image
docker pull mysql/mysql-server:tag
docker run --name=mysql1 -d mysql/mysql-server:tag

################################################
https://hub.docker.com/_/mariadb
################################################

docker run --detach --name some-mariadb --env MARIADB_USER=example-user --env MARIADB_PASSWORD=my_cool_secret --env MARIADB_ROOT_PASSWORD=my-secret-pw  mariadb:latest
docker exec -it some-mariadb bash
docker logs some-mariadb
docker run -it --rm mariadb:latest --verbose --help

# Use root/example as user/password credentials
version: '3.1'

services:

  db:
    image: mariadb
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: example

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080


################################################
https://hub.docker.com/_/oracle-database-enterprise-edition
################################################

Oracle Database 12c Enterprise Edition
MySQL Server Enterprise Edition

Deprecation notice
This product is no longer maintained on this page, and will be removed in the future.
The publisher may offer a more recent version elsewhere in Docker Hub.

https://hub.docker.com/_/oraclelinux
https://github.com/oracle/docker-images
https://github.com/oracle/docker-images/tree/main/OracleDatabase
https://docs.oracle.com/en/database/oracle/oracle-database/index.html

The Oracle Linux images are intended for use in the FROM field of a downstream Dockerfile

################################################
sqlite3 export import
################################################

https://www.sqlitetutorial.net/sqlite-export-csv/
https://www.sqlitetutorial.net/sqlite-import-csv/
https://stackoverflow.com/questions/6076984/sqlite-how-do-i-save-the-result-of-a-query-as-a-csv-file
https://www.tutlane.com/tutorial/sqlite/sqlite-export-data-from-table-to-csv-file

sqlite3 -header -csv c:/sqlite/chinook.db "select * from tracks;" > tracks.csv
sqlite3 -header -csv c:/sqlite/chinook.db < query.sql > data.csv
sqlite3 -header -csv db.sqlite 'select * from tbl1;' > test.csv

or

sqlite3
sqlite> .headers on
sqlite> .mode csv
sqlite> .output test.csv
sqlite> select * from tbl1;
sqlite> .output stdout

or pandas

import pandas as pd
import sqlite3
conn = sqlite3.connect('your_cool_database.sqlite')
df = pd.read_sql('SELECT * from orders', conn)
df.to_csv('orders.csv', index = False)


Importing a CSV file into a table using sqlite3 tool

sqlite3
sqlite> .mode csv
sqlite> .import c:/sqlite/city.csv cities
sqlite> .schema cities

#sqlite> .mode csv table_name
#sqlite> .import file_name.csv table_name
#sqlite> .read file_name.sql



################################################
import CSV files to MySQL/MariaDB table
################################################

https://www.simplified.guide/mysql-mariadb/import-csv
https://mariadb.com/kb/en/importing-data-into-mariadb/
https://gist.github.com/shalaby/deb7edca438c86b45afd

mysql -uroot -p --local-infile
LOAD DATA LOCAL INFILE 'source.csv' INTO target_db.target_table FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\r\n';

mysqlimport --local --fields-terminated-by="," --fields-enclosed-by="\"" target_db.target_table source.csv


mysqlimport --user='marie_dyer' --password='angelle1207' \
--fields-terminated-by=0x09 --lines-terminated-by=0x0d0a \
--replace --low-priority --fields-enclosed-by='"' \
 --fields-escaped-by='#' --ignore-lines='1' --verbose \
--columns='name_last, name_first, telephone' \
sales_dept '/tmp/prospect_contact.txt'

mysql -uroot -p --local-infile
LOAD DATA LOCAL INFILE 'locations.csv' INTO TABLE locations FIELDS   TERMINATED BY ','   ENCLOSED BY '"'   LINES TERMINATED BY '\n' IGNORE 1 ROWS (location, latitude, longitude);

mysql -uroot -p --local-infile
LOAD DATA LOCAL INFILE "file.csv" INTO TABLE db.table FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n'


mysqldump --user='root' --password='geronimo' sales_dept prospect_contact > /tmp/prospects.sql
mysql --user='marie_dyer' --password='angelle12107' sales_dept < '/tmp/prospects.sql'
mysqldump -u marie_dyer -p --no-create-info sales_dept prospect_contact > /tmp/prospects.sql


################################################
Create mysql table directly from CSV file using the CSV Storage engine
################################################

https://csvkit.readthedocs.io/en/1.0.2/scripts/csvsql.html
https://manpages.ubuntu.com/manpages/impish/man1/csvsql.1.html


pip install csvkit
sudo apt install csvkit

csvsql --dialect mysql --snifflimit 100000 bigdatafile.csv > maketable.sql
csvsql --dialect mysql --delimiter ',' --snifflimit 100000 bigdatafile.csv > maketable.sql


################################################
mysqldump
################################################

https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html
https://mariadb.com/kb/en/mariadb-dumpmysqldump/

mysqldump [options] db_name [tbl_name ...]
mysqldump [options] --databases db_name ...
mysqldump [options] --all-databases

mysqldump -u root -h 172.21.0.2 -p sales bigdatafile >  dump_bigdatafile.sql
mysqldump -u root -h 172.21.0.2 -p  --all-databases > all_databases.sql

copying data from one MariaDB server to another:
shell> mysqldump --opt db_name | mysql --host=remote_host -C db_name



################################################
Create an Index in MySQL
Auto-Increment ID to existing table?
################################################

https://popsql.com/learn-sql/mysql/how-to-create-an-index-in-mysql
https://dev.mysql.com/doc/refman/8.0/en/create-index.html
https://stackoverflow.com/questions/3002605/how-do-i-add-indexes-to-mysql-tables
https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html
https://stackoverflow.com/questions/14753321/add-auto-increment-id-to-existing-table

CREATE INDEX index_name ON table_name (column_name);
CREATE INDEX user_id_and_org_id_idx ON users (user_id, org_id);
CREATE UNIQUE INDEX users_email_uq ON users (email);
CREATE INDEX company_part_name_idx ON companies (name(20));

ALTER TABLE `tbl_student` ADD INDEX student_index (`student_id`)

# AUTO_INCREMENT

ALTER TABLE `users` ADD `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `users` ADD COLUMN `id` INT AUTO_INCREMENT UNIQUE FIRST;
ALTER TABLE users ADD id INT NOT NULL AUTO_INCREMENT PRIMARY KEY

ALTER TABLE `tableName` DROP PRIMARY KEY;
ALTER TABLE `tableName` DROP INDEX `PRIMARY`;
ALTER TABLE `tableName` ADD `Column_name` INT PRIMARY KEY AUTO_INCREMENT;
alter table `tableName` modify column `Column_name` INT NOT NULL AUTO_INCREMENT PRIMARY KEY;

https://www.techonthenet.com/mysql/tables/alter_table.php
https://www.mysqltutorial.org/mysql-drop-column/
https://stackoverflow.com/questions/13968494/how-to-delete-a-column-from-a-table-in-mysql
https://dev.mysql.com/doc/refman/8.0/en/alter-table.html

ALTER TABLE table_name DROP COLUMN column_name;
ALTER TABLE table_name DROP column_name;

ALTER TABLE table_name
DROP COLUMN column_name_1,
DROP COLUMN column_name_2,
...;

ALTER TABLE tbl_Country
  DROP COLUMN IsDeleted,
  DROP COLUMN CountryName;



################################################
sqlalchemy create_engine mysql
################################################
https://docs.sqlalchemy.org/en/14/core/engines.html
https://docs.sqlalchemy.org/en/14/dialects/mysql.html

from sqlalchemy import create_engine
engine = create_engine("postgresql://scott:tiger@localhost:5432/mydatabase")


MariaDB-Only Mode
engine = create_engine("mysql+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4")
engine = create_engine("mariadb+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4")
engine = create_engine("mysql://scott:tiger@localhost/test",  isolation_level="READ UNCOMMITTED")

MySQL

# default
engine = create_engine("mysql://scott:tiger@localhost/foo")
# mysqlclient (a maintained fork of MySQL-Python)
engine = create_engine("mysql+mysqldb://scott:tiger@localhost/foo")
# PyMySQL
engine = create_engine("mysql+pymysql://scott:tiger@localhost/foo")


PostgreSQL

# default
engine = create_engine("postgresql://scott:tiger@localhost/mydatabase")
# psycopg2
engine = create_engine("postgresql+psycopg2://scott:tiger@localhost/mydatabase")
# pg8000
engine = create_engine("postgresql+pg8000://scott:tiger@localhost/mydatabase")

################################################
sqlalchemy create_engine no module named 'pymysql'
################################################

https://stackoverflow.com/questions/22252397/importerror-no-module-named-mysqldb
https://techglimpse.com/no-module-named-mysqldb-solution/
https://stackoverflow.com/questions/59414636/sqlalchemy-no-module-named-mysql
https://docs.sqlalchemy.org/en/14/dialects/mysql.html
https://docs.sqlalchemy.org/en/14/core/engines.html
https://stackoverflow.com/questions/33446347/no-module-named-pymysql
https://bobbyhadz.com/blog/python-no-module-named-pymysql

pip install pymysql
pip install MySQL-python
pip install mysqlclient
pip install mysql-python

sudo apt-get install libmysqlclient-dev
sudo apt-get install gcc
pip install mysqlclient

sudo apt-get install python-mysqldb
engine = create_engine('mysql+pymysql://scott:tiger@localhost/foo')
engine = create_engine("mysql+pymysql://root:example@172.21.0.2/foo?charset=utf8")  # utf8mb4
engine = create_engine('mysql+mysqldb://scott:tiger@localhost/foo')

pip install pymysql
sudo apt-get install python3-mysqldb
engine = create_engine('mysql://username:password@your_host/your_dbname')

------

https://mariadb.com/resources/blog/using-sqlalchemy-with-mariadb-connector-python-part-1/

python3 -m venv venv
. venv/bin/activate activate
pip3 install mariadb SQLAlchemy

import sqlalchemy
from sqlalchemy.ext.declarative import declarative_base
engine = sqlalchemy.create_engine("mariadb+mariadbconnector://app_user:Password123!@127.0.0.1:3306/company")

------

https://bobbyhadz.com/blog/python-no-module-named-pymysql
https://github.com/sqlalchemy/sqlalchemy/discussions/7852

# 👇️ in a virtual environment or using Python 2
pip install PyMySQL

# 👇️ for python 3 (could also be pip3.10 depending on your version)
pip3 install PyMySQL

# 👇️ if you get permissions error
sudo pip3 install PyMySQL

# 👇️ if you don't have pip in your PATH environment variable
python -m pip install PyMySQL

# 👇️ for python 3 (could also be pip3.10 depending on your version)
python3 -m pip install PyMySQL

# 👇️ for Anaconda
conda install -c anaconda pymysql

################################################
################################################
https://github.com/sqlalchemy/sqlalchemy/discussions/7852
https://exerror.com/importerror-no-module-named-pymysql/
https://docs.sqlalchemy.org/en/14/dialects/mysql.html

sudo apt-get install python3-pymysql
python3 -m pip install PyMySQL
sudo pip install PyMySQL

import pymysql
from sqlalchemy import create_engine

engine = create_engine('mysql+pymysql://<db_user>:<db_pass>@<db_host>:<db_port>/<db_name>')
connection = engine.connect()
query = "Select name FROM company WHERE company_id = 83326"
ResultProxy = connection.execute(query)
ResultSet = ResultProxy.fetchall()
print(ResultSet)

################################################
################################################
https://stackoverflow.com/questions/10770377/how-to-create-db-in-mysql-with-sqlalchemy

import sqlalchemy
engine = sqlalchemy.create_engine('mysql://user:password@server') # connect to server
engine.execute("CREATE DATABASE dbname") #create db
engine.execute("USE dbname") # select new db
# use the new db
# continue with your work...

-----------


####################################################
Sqlite - append one table of one database
####################################################

https://sqlite.org/forum/info/51fd0055b7d96b4a
https://www.codegrepper.com/code-examples/sql/sqlite+copy+table+to+another+table
https://splunktool.com/python-sqlite-copy-table-from-one-database-to-another
https://gist.github.com/vgarvardt/3272957
https://www.folkstalk.com/2022/09/sqlite-copy-table-to-another-table-with-code-examples.html
https://tableplus.com/blog/2018/07/sqlite-how-to-copy-table-to-another-database.html
https://stackoverflow.com/questions/12730390/copy-table-structure-to-new-table-in-sqlite3

INSERT INTO Destination SELECT * FROM Source;
INSERT INTO fileDB.table SELECT * FROM memDB.table;
CREATE TABLE copied AS SELECT * FROM mytable WHERE 0
SELECT sql FROM sqlite_master WHERE type='table' AND name='mytable'

...


ATTACH DATABASE file_name AS new_db;
CREATE TABLE new_db.table_name(table_definition);
INSERT INTO new_db.table_name SELECT * FROM old_db.table_name;
INSERT INTO new_db.table_name(col1, col2) SELECT col1, col2 FROM old_db.table_name;
sqlite > .output table_dump.sql
sqlite > .dump table_name
sqlite > .quit
sqlite > .read table_dump.sql

..

copy a table to another SQLite database

ATTACH DATABASE file_name AS new_db;
CREATE TABLE new_db.table_name(table_definition);
INSERT INTO new_db.table_name SELECT * FROM old_db.table_name;
INSERT INTO new_db.table_name(col1, col2) SELECT col1, col2 FROM old_db.table_name;

...

copy the structure of a table to another table in SQL

CREATE TABLE new_table SELECT * FROM original_table;
CREATE TABLE adminUsers SELECT * FROM users;
CREATE TABLE new_table LIKE original_table;

...

replicate a table in SQL Cloning or Copying a Table

CREATE TABLE new_table LIKE original_table;
INSERT INTO new_table SELECT * FROM original_table;
mysql> CREATE TABLE employees_clone LIKE employees;
mysql> INSERT INTO employees_clone SELECT * FROM employees;
CREATE TABLE new_table SELECT * FROM original_table;

...

CREATE TABLE mytable (
    contact_id INTEGER PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    phone TEXT NOT NULL UNIQUE
);

-- Two variations
INSERT INTO mytable VALUES ( 1, "Donald", "Duck", "noone@nowhere.com", "1234");
INSERT INTO mytable ( contact_id,first_name,last_name,email,phone ) VALUES ( 2, "Daisy", "Duck", "daisy@nowhere.com", "45678");

.output copied.sql
-- Add new table name
.print CREATE TABLE copied (
-- Comment out first line from SQL
SELECT "-- " || sql FROM sqlite_master WHERE type='table';
.output
.read copied.sql
.schema
select * from copied;


