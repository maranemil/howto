########################################################
3 Operatoren
########################################################

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_02_004.html#dodtp467901e6-0478-44d2-a810-abd481aa36fa


In der Programmiersprache C sind Operatoren spezielle Symbole oder Schl√ºsselw√∂rter, die bestimmte Operationen auf Operanden (z. B. Variablen, Werte) ausf√ºhren. Sie sind ein grundlegender Bestandteil der Sprache und erm√∂glichen es, Berechnungen, Vergleiche und andere Manipulationen durchzuf√ºhren.

Hier ist eine √úbersicht der wichtigsten Kategorien von Operatoren in C:

1. Arithmetische Operatoren

Diese werden f√ºr mathematische Berechnungen verwendet:

+ : Addition (z. B. a + b)
- : Subtraktion (z. B. a - b)
* : Multiplikation (z. B. a * b)
/ : Division (z. B. a / b)
% : Modulo (Rest einer Division, z. B. a % b)
2. Zuweisungsoperatoren

Zum Zuweisen von Werten:

= : Zuweisung (z. B. a = 5)
+= : Addiere und weise zu (z. B. a += 5 entspricht a = a + 5)
-= : Subtrahiere und weise zu
*= : Multipliziere und weise zu
/= : Dividiere und weise zu
%= : Modulo und weise zu
3. Vergleichsoperatoren

Zum Vergleichen von Werten (ergibt true oder false):

== : Gleichheit (z. B. a == b)
!= : Ungleichheit
< : Kleiner als
> : Gr√∂√üer als
<= : Kleiner oder gleich
>= : Gr√∂√üer oder gleich
4. Logische Operatoren

F√ºr logische Operationen:

&& : Logisches UND (z. B. a && b)
|| : Logisches ODER
! : Logisches NICHT
5. Bitweise Operatoren

F√ºr Operationen auf Bit-Ebene:

& : Bitweises UND
| : Bitweises ODER
^ : Bitweises XOR
~ : Bitweises Komplement
<< : Linksverschiebung
>> : Rechtsverschiebung
6. Inkrement- und Dekrementoperatoren

Zum Erh√∂hen oder Verringern eines Wertes:

++ : Inkrement (z. B. a++ oder ++a)
-- : Dekrement (z. B. a-- oder --a)
7. Bedingungsoperator (Tern√§rer Operator)

Kurzform f√ºr einfache Bedingungen:

? : : (z. B. a > b ? x : y ‚Äì wenn a > b, dann x, sonst y)
8. Adress- und Zeigeroperatoren

F√ºr Speicheradressen und Zeiger:

& : Adresse eines Wertes (z. B. &a)
* : Dereferenzierung eines Zeigers (z. B. *ptr)
9. Sonstige Operatoren
sizeof : Gibt die Gr√∂√üe eines Datentyps oder einer Variable zur√ºck (z. B. sizeof(int))
, : Komma-Operator (f√ºhrt mehrere Ausdr√ºcke aus, z. B. a = (b = 3, b + 2))
-> : Zugriff auf ein Strukturmitglied √ºber einen Zeiger
. : Zugriff auf ein Strukturmitglied

Diese Operatoren sind essenziell, um in C effizient zu programmieren. 
Wenn du ein bestimmtes Beispiel oder eine detaillierte Erkl√§rung zu einem Operator m√∂chtest, lass es mich wissen! üòä

#######################################
// Ausdr√ºcke 
#######################################

int value1 = 30;
int value2 = 55;
int result = value1 + value2;


// Vergleichsoperatoren vergleichen zwei Ausdr√ºcke miteinander. 
a == b

(Vergleichsoperator) pr√ºft, ob der Ausdruck a dem Ausdruck b entspricht, und gibt in diesem Fall true zur√ºck.
a != b

Ergebnis der Operation ist true, wenn a ungleich b ist.
a > b

Ergebnis der Operation ist true, wenn a gr√∂√üer b ist.
a < b

Ergebnis der Operation ist true, wenn a kleiner b ist.
a <= b

Ergebnis der Operation ist true, wenn a kleiner oder gleich b ist.
a >= b

Ergebnis der Operation ist true, wenn a gr√∂√üer oder gleich b ist.

########################################################

Arten von Operatoren - Es gibt viele verschiedene Arten von Operatoren wie arithmetische,
 relationale, logische, bitweise und Zuweisungsoperatoren. Jeder dieser Operatoren hat
 einen bestimmten Zweck, und wie sie verwendet werden, h√§ngt von der Art der verwendeten Programmiersprache ab.


########################################################
# Wie nutzt man Operatoren #c
########################################################

In der Programmiersprache C werden Operatoren verwendet, 
um verschiedene Operationen auf Variablen und Werten auszuf√ºhren. 
Hier ist eine √úbersicht √ºber die wichtigsten Kategorien von Operatoren und deren Nutzung:

1. Arithmetische Operatoren

Diese Operatoren f√ºhren mathematische Berechnungen durch.

Operator	Beschreibung	Beispiel
+	Addition	a + b
-	Subtraktion	a - b
*	Multiplikation	a * b
/	Division	a / b
%	Modulo (Restwert)	a % b

Beispiel:

Code kopieren
int a = 10, b = 3;
int summe = a + b;  // Ergebnis: 13
int rest = a % b;   // Ergebnis: 1

2. Vergleichsoperatoren

Vergleichsoperatoren werden verwendet, um Werte zu vergleichen. Sie geben einen booleschen Wert (true oder false) zur√ºck.

Operator	Beschreibung	Beispiel
==	Gleichheit	a == b
!=	Ungleichheit	a != b
<	Kleiner als	a < b
>	Gr√∂√üer als	a > b
<=	Kleiner oder gleich	a <= b
>=	Gr√∂√üer oder gleich	a >= b

Beispiel:

Code kopieren
int a = 5, b = 10;
if (a < b) {
    printf("a ist kleiner als b\n");
}

3. Logische Operatoren

Diese Operatoren werden f√ºr logische Operationen verwendet.

Operator	Beschreibung	Beispiel
&&	Logisches UND	a && b
`		`
!	Logisches NICHT	!a

Beispiel:

Code kopieren
int a = 1, b = 0;
if (a && !b) {
    printf("a ist wahr und b ist falsch\n");
}

4. Zuweisungsoperatoren

Diese Operatoren weisen Werte zu oder kombinieren Zuweisung mit einer Operation.

Operator	Beschreibung	Beispiel
=	Zuweisung	a = b
+=	Addition und Zuweisung	a += b (a = a + b)
-=	Subtraktion und Zuweisung	a -= b
*=	Multiplikation und Zuweisung	a *= b
/=	Division und Zuweisung	a /= b
%=	Modulo und Zuweisung	a %= b

Beispiel:

Code kopieren
int a = 5;
a += 3;  // a ist jetzt 8

5. Bitweise Operatoren

Diese Operatoren arbeiten auf der Bit-Ebene.

Operator	Beschreibung	Beispiel
&	Bitweises UND	a & b
`	`	Bitweises ODER
^	Bitweises XOR	a ^ b
~	Bitweises NICHT	~a
<<	Linksverschiebung	a << 1
>>	Rechtsverschiebung	a >> 1

Beispiel:

Code kopieren
int a = 5;  // Bin√§r: 0101
int b = a << 1;  // Ergebnis: 1010 (10 in Dezimal)

6. Inkrement- und Dekrementoperatoren

Diese Operatoren erh√∂hen oder verringern den Wert einer Variablen um

#######################################################
 Reihenfolge werden Operatoren ausgef√ºhrt c#
#######################################################


In C# wird die Reihenfolge der Ausf√ºhrung von Operatoren durch die Operatorpr√§zedenz (Priorit√§t) und die Assoziativit√§t bestimmt. Hier ist eine √úbersicht:

1. Pr√§zedenz (Priorit√§t)

Operatoren mit h√∂herer Pr√§zedenz werden zuerst ausgef√ºhrt. Zum Beispiel wird in 3 + 4 * 2 zuerst die Multiplikation ausgef√ºhrt, da * eine h√∂here Priorit√§t hat als +.

Eine vereinfachte Liste der Pr√§zedenz (von hoch nach niedrig):

Postfix: x++, x--
Unary: +, -, !, ~, ++x, --x, (type)x
Multiplikativ: *, /, %
Additiv: +, -
Vergleich: <, >, <=, >=
Gleichheit: ==, !=
Bitweise UND: &
Bitweise XOR: ^
Bitweise ODER: |
Logisches UND: &&
Logisches ODER: ||
Zuweisung: =, +=, -=, *=, /=, %= usw.
2. Assoziativit√§t

Wenn zwei Operatoren die gleiche Pr√§zedenz haben, entscheidet die Assoziativit√§t √ºber die Reihenfolge:

Linksassoziativ: Von links nach rechts (z. B. +, -, *, /).

Beispiel: 5 - 3 - 1 wird als (5 - 3) - 1 ausgewertet.

Rechtsassoziativ: Von rechts nach links (z. B. =, +=).

Beispiel: x = y = 5 wird als x = (y = 5) ausgewertet.
3. Klammern

Klammern () haben die h√∂chste Priorit√§t und k√∂nnen verwendet werden, um die Reihenfolge explizit zu steuern. Beispiel:

Code kopieren
int result = (3 + 4) * 2; // Ergebnis: 14

Zusammenfassung

Die Reihenfolge der Operatorausf√ºhrung in C# folgt klar definierten Regeln. Wenn du dir unsicher bist, kannst du immer Klammern verwenden, um die gew√ºnschte Reihenfolge zu erzwingen und den Code lesbarer zu machen. üòä

#####################################################################

#####################################################################

double value = 1234567890;

// Displays 1,234,567,890   
Console.WriteLine(value.ToString("#,#", CultureInfo.InvariantCulture));

// Displays 1,234,568K
Console.WriteLine(value.ToString("#,##0,K", CultureInfo.InvariantCulture));

// Displays 1,235M
Console.WriteLine(value.ToString("#,##0,,M", CultureInfo.InvariantCulture));

// Displays 1B
Console.WriteLine(value.ToString("#,##0,,,B", CultureInfo.InvariantCulture));

((decimal)235).ToKMB();
// 235

((decimal)1235).ToKMB();
// 1.2K

((decimal)6271235).ToKMB();
// 6.27M

((decimal)93246571235).ToKMB();
// 93.247B



------------------------------------------------------------

Um die Zahl 1.000.000 in C# mit Tausendergruppierung darzustellen, kannst du die String-Formatierung verwenden. Hier sind einige Beispiele:

1. Standard-Formatierung mit N:
Code kopieren
int number = 1000000;
string formatted = number.ToString("N0"); // "1.000.000"
Console.WriteLine(formatted);

"N0" bedeutet: Zahl mit Tausendertrennzeichen und ohne Nachkommastellen.
2. Benutzerdefiniertes Zahlenformat:
Code kopieren
int number = 1000000;
string formatted = number.ToString("#,##0"); // "1.000.000"
Console.WriteLine(formatted);

#,##0 sorgt f√ºr Tausendertrennzeichen und keine Nachkommastellen.
3. Mit CultureInfo f√ºr spezifische Regionen:

Falls du sicherstellen m√∂chtest, dass das Format der deutschen Kultur entspricht:

Code kopieren
using System.Globalization;

int number = 1000000;
string formatted = number.ToString("N0", new CultureInfo("de-DE")); // "1.000.000"
Console.WriteLine(formatted);

CultureInfo("de-DE") stellt sicher, dass der Punkt als Tausendertrennzeichen verwendet wird.

Alle Varianten erzeugen das gew√ºnschte Ergebnis: 1.000.000.


############################################################################
LITERALE √úbung
############################################################################

using System;
class HelloWorld
{
	 static void Main()
		{
			// Console.WriteLine("Hello World");

      // int mio; // = 1 Million mit Tausender-Gruppierung 			
			int mio = 1000000;
			string mio_formatted = mio.ToString("N0"); // "1.000.000"
      Console.WriteLine(mio_formatted);
      
      // = Pi mit 9 Nachkommastellen in 3er-Bl√∂cken
      double pi = 3.141592653589793238462643383279;     
      string pi_formatiert = pi.ToString("0.000 000 000");
      Console.WriteLine(pi_formatiert);
      
      // short hex; byte b255; // = hexdezimal F00 mit Byte-Gruppierung 
      // short hex = 255;
      // string hexValue = hex.ToString("X2"); // Converts to hexadecimal
      // Console.WriteLine(hexValue); // Output: "FF"
      int hexValue = 0xF00;
      byte[] byteArray = BitConverter.GetBytes((ushort)hexValue);
      Array.Reverse(byteArray);
      Console.WriteLine("\n Byte-Gruppen:");
      foreach (byte b in byteArray)
      {
          Console.WriteLine($"0x{b:X2}");
      }
        
        
      /*
      byte[] byteArray = { 0x1A, 0xFF, 0x0B };
      string hexString = BitConverter.ToString(byteArray).Replace("-", ""); // Removes dashes
      Console.WriteLine(hexString); // Output: "1AFF0B"
      */
      
      /////////////////////////////////////////////////////////////	
      // byte b255; // = hexdezimal F00 mit Byte-Gruppierung 
      // = dezimal 255 als Bin√§rzahl mit Nibble(Halbbyte)-Gruppierung 
      /////////////////////////////////////////////////////////////	
      
      byte myByte = 255;
      // Extract the high nibble (first 4 bits)
      byte highNibble = (byte)((myByte & 0xF0) >> 4);
      // Extract the low nibble (last 4 bits)
      byte lowNibble = (byte)(myByte & 0x0F);
      
      // Display results
      Console.WriteLine("");
      Console.WriteLine($"Byte: {Convert.ToString(myByte, 2).PadLeft(8, '0')}");
      Console.WriteLine($"High Nibble: {Convert.ToString(highNibble, 2).PadLeft(4, '0')}");
      Console.WriteLine($"Low Nibble: {Convert.ToString(lowNibble, 2).PadLeft(4, '0')}");   
			
			
		}
	}


Output:

1,000,000
3.141 592 654

 Byte-Gruppen:
0x0F
0x00

Byte: 11111111
High Nibble: 1111
Low Nibble: 1111

############################################################################
ARITHMETISCHE OPERATOREN √úbung
############################################################################

int i = -3; 
Console.WriteLine($"{i+=6}"); // mit Vorzeichen "3"     
Console.WriteLine($"{i+97}"); // nach Addition "100"    
Console.WriteLine($"{i-=13}"); // nach Subtraktion "-10"    
Console.WriteLine($"{i*-1.5}"); // nach Multiplikation "15"    
Console.WriteLine($"{i/-10}"); // nach Division "-1,5" 
Console.WriteLine($"{i%0.5}"); // nach Restwert-Division "-1" 
Console.WriteLine($"{++i}"); // nach Pr√§-Inkrement "-2" 
Console.WriteLine($"{i++}"); // nach Post-Inkrement "-2" 
Console.WriteLine($"{--i}"); // nach Pr√§-Dekrement "-2" 
Console.WriteLine($"{i--}"); // nach Post-Dekrement "-2" 
Console.WriteLine($"i"); // "-3" 
Console.WriteLine($"{1 + 2 * 3 - 4 / 5}");  // nach Pr√§ferenzierung "1"



int i = -3;  
Console.WriteLine($"{-i}");      	// mit Vorzeichen "3"                 
Console.WriteLine($"{i + 103}");   	// nach Addition "100"              
Console.WriteLine($"{i - 7}");     // nach Subtraktion "-10"
Console.WriteLine($"{i * -5}");    // nach Multiplikation "15"             
Console.WriteLine($"{i / 2d}");     // nach Division "-1,5"             
Console.WriteLine($"{i % 2}");        // nach Restwert-Division "-1"   
Console.WriteLine($"{++i}");          // nach Pr√§-Inkrement "-2"          
Console.WriteLine($"{i++}");          // nach Post-Inkrement "-2"           
Console.WriteLine($"{--i}");             // nach Pr√§-Dekrement "-2"        
Console.WriteLine($"{i--}");                // nach Post-Dekrement "-2"     
Console.WriteLine($"{i}");         // "-3"          
Console.WriteLine($"{((1 + 2) * 3 - 4) / 5}");  // nach Pr√§ferenzierung "1"


############################################################################
LOGISCHE OPERATOREN √úbung
############################################################################


https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/operators/boolean-logical-operators
https://www.functionx.com/wf-linq/Lesson4.htm
https://vhm.mathematik.uni-stuttgart.de/Vorlesungen/Grundlagen/Folien_Logische_Operationen.pdf

int i = -3;
int k = 5; 
Console.WriteLine($"{i < k}");     // i kleiner als k "True"               
Console.WriteLine($"{i > k}");     // i gr√∂√üer als k "False"        
Console.WriteLine($"{i <= k}");    // i kleiner oder gleich k "True"  
Console.WriteLine($"{i >= k}");    // i gr√∂√üer oder gleich k "False"             
Console.WriteLine($"{i != k }");   // i ungleich k "True"   

--------------------------------------

// Console.WriteLine("Hello, World!");
// nach Negation "False" 
bool wahr = true, falsch = false; 
Console.WriteLine($"{wahr == falsch}");   
//nach Konjunktion "False" 
Console.WriteLine($"{wahr & falsch}");
//Console.WriteLine(true & false);
//Console.WriteLine(true & true);
//Console.WriteLine("0x{0:x}", 0xf8 & 0x3f);
// nach Disjunktion "True" 
Console.WriteLine($"{wahr | falsch}"); 
// nach Antivalenz "True" 
Console.WriteLine($"{wahr ^ falsch}"); 
Console.WriteLine($"");  



bool wahr = true, falsch = false; 
Console.WriteLine($"{!wahr}");  

int i = 100; 
Console.WriteLine($"{falsch && i++ == 101}"); 
Console.WriteLine(i); 
Console.WriteLine($"{wahr || i++ == 101}"); 
Console.WriteLine(i); 


# ZUWEISUNGSOPERATOREN
i = i + 1; 
i++; 
++i; 
i += 1; 


--------------------------------------

Conjunction() and Disjuntion() &&s and ||



bool a = true;
bool b = false;
bool result = a && b; // Ergebnis: false, da beide nicht wahr sind
Console.WriteLine($"Konjunktion: {result}");


bool a = true;
bool b = false;
bool result = a || b; // Ergebnis: true, da mindestens eine Bedingung wahr ist
Console.WriteLine($"Disjunktion: {result}");


bool a = true;
bool b = false;
bool result = a ^ b; // Ergebnis: true, da genau eine Bedingung wahr ist
Console.WriteLine($"Antivalenz: {result}");



--------------------------------------

// c# intermediate 
// karnaught veitch
// IEEE 754 32 bit - float point
// THZE - dezimal - binare

https://de.wikipedia.org/wiki/IEEE_754
https://en.wikipedia.org/wiki/IEEE_754
https://en.wikipedia.org/wiki/IEEE_754-1985

https://www.dw-aufgaben.de/ac/static/Q6569.html

THZE 
7235

https://www.calculator.net/binary-calculator.html
https://cryptii.com/pipes/binary-decoder
https://www.binaryhexconverter.com/binary-ascii-characters-table
https://calculating-it.com/converters/binary-code-converter/
https://www.rapidtables.com/math/number/Numeral_system.html
https://www.gigacalculator.com/calculators/binary-calculator.php
https://www.rapidtables.com/math/number/Numeral_system.html#
https://www.rapidtables.org/convert/number/decimal-to-binary.html
https://www.rapidtables.com/convert/number/binary-to-decimal.html
https://bfotool.com/de/binary-to-decimal

Decimal Binary Octal  Hexadecimal
0	0000	0	0
1	0001	1	1
2	0010	2	2
3	0011	3	3
4	0100	4	4
5	0101	5	5
6	0110	6	6
7	0111	7	7
8	1000	10	8
9	1001	11	9
10	1010	12	A
11	1011	13	B
12	1100	14	C
13	1101	15	D
14	1110	16	E
15	1111	17	F

------------------------------------------------------------------

https://zahlensysteme-rechner.de/binaer-dezimal/


bin√§r in dezimal umrechnen

Wenn zum Beispiel 1101012 vom Bin√§rsystem in das Dezimalsystem umgerechnet werden soll, dann rechnet man:

1101012	‚âô	1 ‚àô 25 + 1 ‚àô 24 + 0 ‚àô 23 + 1 ‚àô 22 + 0 ‚àô 21 + 1 ‚àô 20
 	=	32 + 16 + 4 + 1
 	=	53
	
Bin√§rzahlen mit Komma umwandeln:

Wenn zum Beispiel 1,0112 in das Dezimalsystem umgewandelt werden soll, rechnet man:

1,0112	‚âô	1 ‚àô 20 + 0 ‚àô 2-1 + 1 ‚àô 2-2 + 1 ‚àô 2-3
 	=	1 + 0,25 + 0,125
 	=	1,375
	
	
dezimal in bin√§r umrechnen

Als Beispiel soll 2210 in das Bin√§rsystem umgerechnet werden. Die Rechnung sieht wie folgt aus:

22	:	2	=	11	R	0
11	:	2	=	5	R	1
5	:	2	=	2	R	1
2	:	2	=	1	R	0
1	:	2	=	0	R	1
Es gilt also: 2210 ‚âô 101102


22 = 10110 = 16
2210 = 100010100010 = 8A2

################################
To convert between binary and decimal, you can use the following formulas:

Binary to Decimal Conversion

To convert a binary number (base 2) to a decimal number (base 10), use the formula:

$$ \text{Decimal} = \sum_{i=0}^{n-1} b_i \cdot 2^i $$

Where:

( b_i ) is the binary digit (0 or 1) at position ( i ) (starting from the right, with ( i = 0 )).
( n ) is the total number of binary digits.

Example: Convert binary 1011 to decimal: $$ \text{Decimal} = (1 \cdot 2^3) + (0 \cdot 2^2) + (1 \cdot 2^1) + (1 \cdot 2^0) = 8 + 0 + 2 + 1 = 11 $$

Decimal to Binary Conversion

To convert a decimal number (base 10) to binary (base 2), repeatedly divide the decimal number by 2, recording the remainder at each step. 
The binary number is formed by reading the remainders from bottom to top.

Steps:

Divide the decimal number by 2.
Record the remainder (0 or 1).
Use the quotient as the new number and repeat until the quotient is 0.
Read the remainders in reverse order.

Example: Convert decimal 11 to binary:

( 11 \div 2 = 5 ) remainder ( 1 )
( 5 \div 2 = 2 ) remainder ( 1 )
( 2 \div 2 = 1 ) remainder ( 0 )
( 1 \div 2 = 0 ) remainder ( 1 )

Binary: 1011

These formulas and methods ensure accurate conversions between binary and decimal systems!

https://mathmonks.com/number-system/binary-to-decimal
https://www.wikihow.com/Convert-from-Binary-to-Decimal

 to convert 10011011, you'd list 128, 64, 32, 16, 8, 4, 2, 1.
 
 
 Since "1" corresponds with "1", it becomes a "1." Since "2" corresponds with "1," it becomes a "2." Since "4" corresponds with "0," it becomes "0." Since "8" corresponds with "1", it becomes "8," and since "16" corresponds with "1" it becomes "16." "32" corresponds with "0" and becomes "0" and "64" corresponds with "0" and therefore becomes "0" while "128" corresponds with "1" and becomes 128.
 
 128 + 0 + 0 + 16 + 8 + 0 + 2 + 1 = 155 = 10011011
 
Use Doubling

first digit all the way on the left is 1. Your previous total is 0 since you haven't started yet. You'll have to double the previous total, 0, and add 1, the current digit. 0 x 2 + 1 = 1, so your new current total is 1.[5]


0 * 2 + 1 = 1
1 * 2 + 0 = 2
2 * 2 + 1 = 5
5 * 2 + 1 = 11 
11 * 2 + 0 = 22
22 * 2 + 0 = 44
44 * 2 + 1  = 89

Continue doubling your current total and adding the next digit until you've run out of digits.

1011001 > 89


Formula
The general formula for converting a binary into a decimal number in positional notation form can be written as:

(an-1‚Ä¶.a3a2a1a0)2 = (an-1 √ó 2n-1) + ‚Ä¶ + (a2 √ó 22) + (a1 √ó 21) + (a0 √ó 20), here a0, a1, a2, ‚Ä¶, an-1 are digits of a binary number.


‚áí 1 √ó 24, 1 √ó 23, 0 √ó 22, 0 √ó 21, and 1 √ó 20.
‚áí 1 √ó 24 + 1 √ó 23 + 0 √ó 22 + 0 √ó 21 + 1 √ó 20, we get,
‚áí 16 + 8 + 0 + 0 + 1 = 25

 Fractional Binary Numbers 0.0001
‚áí 0 √ó 20 + 0 √ó 2-1 + 0 √ó 2-2 + 0 √ó 2-3 + 1 √ó 2-4 = 0 + 0.0625 = 0.0625

using the positional notation method.
(1001)2 = 1 √ó 23 + 0 √ó 22 + 0 √ó 21 + 1 √ó 20 = 8 + 1 = 9
(1111)2 = 1 √ó 23 + 1 √ó 22 + 1 √ó 21 + 1 √ó 20 = 8 + 4 + 2 + 1 = 15

https://mathmonks.com/number-system/binary-to-decimal
Use this method to convert from any base to decimal.  replace the "x 2" with "x 37".


#################################################
Sonstige Operatoren
#################################################

Welche weiteren Operatoren gibt es?
Wozu dient der tern√§re Operator?


// KONKATENATION
int i = 100;
string text = $"Variable i = {i}"; 
//string text = "Variable i = " + i; 
Console.WriteLine(text);
string text2 = $"Variable i = {++i}"; 
// text2 = "Variable i = " + i + 1; 
// text2 = "Variable i = " + (i + 1);
Console.WriteLine(text2);

// TERN√ÑRER BEDINGTER OPERATOR

Random zufallszahlen = new Random();    
// Zufallszahlengenerator 
int uhrzeit = zufallszahlen.Next(0,24); // Erzeugt eine Zufallszahl von 0 bis 23 
Console.WriteLine(uhrzeit);

//string tageszeit = "Nachmittags"; //  "Vormittags" (0-11 Uhr) oder "Nachmittags" (12-23 Uhr) -  "10 Uhr Vormittags"
string tageszeit = uhrzeit < 12 ? "Vormittags" : "Nachmittags";
Console.WriteLine($"{uhrzeit} Uhr {tageszeit}"); 

// tageszeit = "Mittags"; //  Tageszeit "Mittags" (12 Uhr).
tageszeit = uhrzeit < 12 ? "Vormittags" : uhrzeit > 12 ? "Nachmittags" : "Mittags";
Console.WriteLine($"{tageszeit} ({uhrzeit} Uhr) "); 


#################################################
Der "nameof"-Operator
#################################################

Wozu dient der nameof-Operator?
Welche Vorteile bietet der nameof-Operator?


switch (e.PropertyName)
{
    case nameof(SomeProperty):
    { break; }

    // opposed to
    case "SomeOtherProperty":
    { break; }
}

https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/nameof

nameof expression (C# reference)

Console.WriteLine(nameof(System.Collections.Generic));  // output: Generic
Console.WriteLine(nameof(List<int>));  // output: List
Console.WriteLine(nameof(List<>)); // output: List
Console.WriteLine(nameof(List<int>.Count));  // output: Count
Console.WriteLine(nameof(List<int>.Add));  // output: Add

List<int> numbers = new List<int>() { 1, 2, 3 };
Console.WriteLine(nameof(numbers));  // output: numbers
Console.WriteLine(nameof(numbers.Count));  // output: Count
Console.WriteLine(nameof(numbers.Add));  // output: Add

public string Name
{
    get => name;
    set => name = value ?? throw new ArgumentNullException(nameof(value), $"{nameof(Name)} cannot be null");
}

var @new = 5;
Console.WriteLine(nameof(@new));  // output: new

#################################################
Datenfelder (Arrays) / Enumerationen / Wertzuweisung an "enum"-Mitglieder
#################################################

Was sind Datenfelder?
Wozu nutzt man Datenfelder?
Wie nutzt man Datenfelder?
Was sind Enumerationen?
Wozu nutzt man Enumerationen?
Wie nutzt man Enumerationen?


// EINDIMENSIONALE ARRAYS
int myarr[] = {1,2,3};
int myarr2[] = [{1,2,3}],{1,2,3};


https://www.w3schools.com/cs/index.php
https://w3schools.tech/tutorial/csharp/index
https://w3schools.tech/tutorial/csharp/csharp_loops
https://www.w3schools.com/cs/cs_arrays.php
https://formatter.org/csharp-formatter


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld {
  public class Program {
    public static void Main(string[] args) {
      int[] myNum = { 10, 20, 30, 40 };

      for (int i = 0; i < myNum.Length; i++) {
        Console.WriteLine($"This is loop number {i + 1} {myNum[i]}");
      }
	  Console.WriteLine($"{myNum[3]}");
    }
  }
}


#################################################
MEHRDIMENSIONALE ARRAYS
#################################################

Erzeugen Sie ein dreidimensionales short-Array "w√ºrfel" mit 5 Elementen in jeder 
Dimension, die alle den Wert 0 haben. 

Hier ist ein Beispiel, wie du in C# ein dreidimensionales Array erstellen kannst, das die Form eines W√ºrfels repr√§sentiert:

Code kopieren
using System;

class Program
{
    static void Main()
    {
        // Ein 3x3x3-W√ºrfel-Array erstellen
        int[,,] wuerfel = new int[3, 3, 3];

        // Array mit Werten f√ºllen
        for (int x = 0; x < 3; x++)
        {
            for (int y = 0; y < 3; y++)
            {
                for (int z = 0; z < 3; z++)
                {
                    wuerfel[x, y, z] = x + y + z; // Beispielwert
                }
            }
        }

        // Werte ausgeben
        for (int x = 0; x < 3; x++)
        {
            for (int y = 0; y < 3; y++)
            {
                for (int z = 0; z < 3; z++)
                {
                    Console.WriteLine($"wuerfel[{x},{y},{z}] = {wuerfel[x, y, z]}");
                }
            }
        }
    }
}

Erkl√§rung:
Deklaration: int[,,] definiert ein dreidimensionales Array.
Initialisierung: new int[3, 3, 3] erstellt ein Array mit den Dimensionen 3x3x3.
Schleifen: Verschachtelte for-Schleifen werden verwendet, um das Array zu f√ºllen und die Werte auszugeben.
Du kannst die Werte und Dimensionen anpassen, um deinen spezifischen Anforderungen gerecht zu werden! üòä



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
	public class Program
	{
		public static void Main(string[] args)
		{
		// Ein 3x3-W√ºrfel-Array erstellen
        int[,] wuerfel = new int[3, 3];

        // Array mit Werten f√ºllen
        
        for (int x = 0; x < 3; x++)
        {
            for (int y = 0; y < 3; y++)
            {
              wuerfel[x, y] = x + y; // Beispielwert
                
            }
        }

        // Werte ausgeben
        for (int x = 0; x < 3; x++)
        {
            for (int y = 0; y < 3; y++)
            {
              Console.WriteLine($"wuerfel[{x},{y}] = {wuerfel[x, y]}");
            }
        }
     
		}
	}
}



 
Erzeugen Sie ein zweidimensionales Array "tabelle" mit folgenden Werten: 

  using System;

class Program
{
    static void Main()
    {
        // Deklaration und Initialisierung eines 2D-Arrays
        int[,] tabelle = new int[3, 4] // 3 Zeilen, 4 Spalten
        {
            { 1, 2, 3, 4 },
            { 5, 6, 7, 8 },
            { 9, 10, 11, 12 }
        };

        // Ausgabe der Tabelle
        for (int i = 0; i < tabelle.GetLength(0); i++) // Zeilen
        {
            for (int j = 0; j < tabelle.GetLength(1); j++) // Spalten
            {
                Console.Write(tabelle[i, j] + "\t"); // Tabulator f√ºr Formatierung
            }
            Console.WriteLine(); // Neue Zeile nach jeder Zeile
        }
    }
}

------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
	public class Program
	{
		public static void Main(string[] args)
		{
    // Deklaration und Initialisierung eines 2D-Arrays
        int[,] tabelle = new int[3, 5] // 3 Zeilen, 5 Spalten
        {
            { 1, 2, 3, 4, 5 },
            { 10, 20, 30, 40, 50},
            { 100, 200, 300, 400, 500 }
        };

        // Ausgabe der Tabelle
        for (int i = 0; i < tabelle.GetLength(0); i++) // Zeilen
        {
            for (int j = 0; j < tabelle.GetLength(1); j++) // Spalten
            {
                Console.Write(tabelle[i, j] + "\t"); // Tabulator f√ºr Formatierung
            }
            Console.WriteLine(); // Neue Zeile nach jeder Zeile
        }
     
		}
	}
}

 ------------ 
 
Geben Sie aus dem Array ‚Äûtabelle‚Äú das Element mit dem Wert 40 in der Konsole aus.

 Console.Write(tabelle[1, 3] + "\t"); // Tabulator f√ºr Formatierung
 
 
#################################################
ARRAY-EIGENSCHAFTEN UND -METHODEN 
#################################################

Ermitteln Sie die nachfolgenden Eigenschaften des Arrays "tabelle" und geben Sie 
diese in der Konsole aus: 
Gesamtanzahl aller Elemente, Anzahl der Elemente in der ersten Dimension, Anzahl 
der Dimensionen 
Console.WriteLine($"Gesamtanzahl aller Elemente: { }"); 
Console.WriteLine($"Anzahl der Elemente in der ersten Dimension: { }"); 
Console.WriteLine($"Anzahl der Dimensionen: { }"); 


Console.WriteLine(tabelle.GetLength(0));  // 3
Console.WriteLine(tabelle.GetLength(1));  // 5

----------------

using System;

class Program
{
    static void Main()
    {
        // Example multi-dimensional array
        int[,] array = {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }
        };

        int sum = SumArray(array);
        Console.WriteLine($"The sum of all values is: {sum}");
    }

    static int SumArray(Array array)
    {
        int sum = 0;

        foreach (var element in array)
        {
            if (element is Array subArray)
            {
                sum += SumArray(subArray); // Recursive call for nested arrays
            }
            else if (element is int value)
            {
                sum += value; // Add integer values
            }
        }

        return sum;
    }
}


Explanation:
Recursive Function: The SumArray function checks if an element is an array. If so, it recursively sums its values.
Base Case: If the element is an integer, it adds it to the sum.
Flexibility: This approach works for arrays of any dimension.
This method is adaptable for arrays with more than two dimensions. If you need a non-recursive approach, nested loops can also be used. Let me know if you'd like an example of that!

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Deklaration und Initialisierung eines 2D-Arrays
            int[,] tabelle = new int[3, 5] // 3 Zeilen, 4 Spalten
            {
                { 1, 2, 3, 4, 5 },
                { 10, 20, 30, 40, 50 },
                { 100, 200, 300, 400, 500 }
            };

            // Ausgabe der Tabelle
            for (int i = 0; i < tabelle.GetLength(0); i++) // Zeilen
            {
                for (int j = 0; j < tabelle.GetLength(1); j++) // Spalten
                {
                    Console.Write(tabelle[i, j] + "\t"); // Tabulator f√ºr Formatierung
                }
                Console.WriteLine(); // Neue Zeile nach jeder Zeile
            }

            int sum = SumArray(tabelle);
            Console.WriteLine($"The sum of all values is: {sum}");
        }

        static int SumArray(Array array)
        {
            int sum = 0;

            foreach (var element in array)
            {
                if (element is Array subArray)
                {
                    sum += SumArray(subArray); // Recursive call for nested arrays
                }
                else if (element is int value)
                {
                    sum += value; // Add integer values
                }
            }

            return sum;
        }
    }
}


Output:

1	2	3	4	5	
10	20	30	40	50	
100	200	300	400	500	
The sum of all values is: 1665


-----------------

public enum DaysOfWeek
{
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
}

class Program
{
    static void Main(string[] args)
    {
        DaysOfWeek today = DaysOfWeek.Wednesday;
        Console.WriteLine($"Today is: {today}"); // Output: Today is: Wednesday

        // Casting enum to integer
        int dayValue = (int)today;
        Console.WriteLine($"Numeric value of {today} is: {dayValue}"); // Output: Numeric value of Wednesday is: 2
    }
}

public enum StatusCode
{
    Success = 200,
    NotFound = 404,
    InternalServerError = 500
}

[Flags]
public enum FileAccess
{
    Read = 1,
    Write = 2,
    Execute = 4
}

class Program
{
    static void Main(string[] args)
    {
        FileAccess permissions = FileAccess.Read | FileAccess.Write;
        Console.WriteLine(permissions); // Output: Read, Write
        Console.WriteLine(permissions.HasFlag(FileAccess.Execute)); // Output: False
    }
}

-------------------------------------

Definieren Sie eine Enumeration "Monat" mit allen Monaten eines Jahres. 

public enum Months
{
    January = 1,
    February,
    March,
    April,
    May,
    June,
    July,
    August,
    September,
    October,
    November,
    December
}

Explanation:
enum Declaration: The enum keyword is used to define a set of named constants.
Values: By default, the first value starts at 0, but here, January is explicitly set to 1 to align with the calendar months. The subsequent values increment automatically.

Months currentMonth = Months.July;
Console.WriteLine($"The current month is: {currentMonth}"); // Output: The current month is: July
Console.WriteLine($"Numeric value: {(int)currentMonth}");   // Output: Numeric value: 7

