Visual Studio 2012 bietet Ihnen im Zusammenhang mit der WPF vier verschiedene Projektvorlagen an:

WPF-Anwendung App
WPF-Browseranwendung App
WPF-Benutzersteuerelementbibliothek (User Control)
Benutzerdefinierte WPF-Steuerelemente (User Control)

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_18_001.html#dodtp34972f67-6c1a-406f-a91d-ec8ff67058f9


App.xaml
App.xaml.cs
MainWindow.xaml
MainWindow.xaml.cs

Dependency Properties
Routed Events

visueller Elementbaum
logischer Elementbaum

XAML
Elemente werden durch Tags beschrieben
Jedes Starttag bedarf zwingend eines Endtags.
Die Groß-/Kleinschreibung muss berücksichtigt werden.

XAML structure
Window - Class, Title, Height, Width
Grid
Button - FontSize, Background, Name, Height, Width, Content
Rectangle - Height, Width, Fill
Button.Width
Button.Background - LinearGradientBrush, GradientStop

ListBox - Width
ListBoxItem


Atrributes are String

Klasse:
ContentControl - Button, Checkbox, Label
HeaderedContentControl - Expander, GroupBox, Tabs
ItemsControl - ListBox, Menu, ComboBox
HeaderedItemsControl - MenuItem, Toolbar

Grid
StackPanel - Margin, Thickness
DockPanel

Markup Extensions
TextBox - Name, Text

 XML-Namespaces

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_18_001.html#dodtp34972f67-6c1a-406f-a91d-ec8ff67058f9

---


 XAML notations   possible for all attributes
 
 In XAML, attributes can be defined using different notations depending on the type of value being assigned. Here are the possible notations for attributes in XAML:

1. Inline Attribute Syntax
This is the most common and straightforward way to set an attribute. The value is written directly as a string.
<Button Content="Click Me" Width="100" Height="50" />


2. Property Element Syntax
When the value of an attribute is complex (e.g., an object or a collection), you can use property element syntax. The property is defined as a child element of the object.
<Button>
    <Button.Content>
        <TextBlock Text="Click Me" />
    </Button.Content>
</Button>


3. Markup Extension Syntax
Markup extensions are used for dynamic or advanced scenarios, such as binding, resource references, or setting values programmatically. They are enclosed in curly braces {}.
<Button Content="{Binding Path=ButtonText}" />


4. Attached Property Syntax
Attached properties are used to define properties for child elements in a parent-child relationship. They are written in the format ParentType.PropertyName.
<Grid>
    <Button Grid.Row="1" Grid.Column="2" Content="Click Me" />
</Grid>


5. Type Converter Syntax
For certain types, XAML uses type converters to parse string values into objects. For example, colors, margins, or points can be defined as strings.
<Button Background="Red" Margin="10,20,10,20" />


These notations allow flexibility in defining attributes in XAML, depending on the complexity and type of the value being assigned.

 -------------
 
 In XAML (eXtensible Application Markup Language) gibt es zwei Hauptmöglichkeiten, Attribute für Elemente zu definieren. Beide Schreibweisen sind flexibel und können je nach Bedarf verwendet werden:

1. Attributsyntax (Inline-Syntax)
Die Attributsyntax ist die gebräuchlichste und einfachste Methode, Eigenschaften direkt als Attribute eines XAML-Elements zu definieren. Diese Methode wird verwendet, wenn der Wert einer Eigenschaft als einfacher Text oder einfacher Ausdruck angegeben werden kann.
Beispiel:
<Button Content="Klicken" Width="100" Height="50" Background="Red" />


Vorteile: Einfach und übersichtlich, besonders für einfache Werte wie Strings, Zahlen oder Farben.
Einschränkungen: Nicht geeignet für komplexe Werte wie Objekte oder Sammlungen.


2. Eigenschaftenelement-Syntax (Property-Element-Syntax)
Diese Syntax wird verwendet, wenn der Wert einer Eigenschaft komplex ist, z. B. ein Objekt oder eine Sammlung. Dabei wird die Eigenschaft als untergeordnetes Element des XAML-Elements angegeben.
Beispiel:
<Button Width="100" Height="50">
    <Button.Background>
        <SolidColorBrush Color="Red" />
    </Button.Background>
</Button>


Vorteile: Ermöglicht die Definition komplexer Werte.
Einschränkungen: Etwas ausführlicher und weniger kompakt als die Attributsyntax.


Kombination beider Schreibweisen
In einem XAML-Dokument können beide Schreibweisen kombiniert werden, je nachdem, was für die jeweilige Eigenschaft am besten geeignet ist.
Beispiel:
<Button Content="Klicken" Width="100" Height="50">
    <Button.Background>
        <LinearGradientBrush>
            <GradientStop Color="Red" Offset="0.0" />
            <GradientStop Color="Blue" Offset="1.0" />
        </LinearGradientBrush>
    </Button.Background>
</Button>


Zusammenfassung

Attributsyntax: Für einfache Werte wie Strings, Zahlen, Farben.
Eigenschaftenelement-Syntax: Für komplexe Werte wie Objekte, Sammlungen oder verschachtelte Strukturen.

Beide Schreibweisen sind flexibel und können je nach Anwendungsfall verwendet werden.





