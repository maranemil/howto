############################################
Objektorientierung
############################################


Was ist Objektorientierung?
Welcher Zusammenhang besteht zwischen Klassen und Objekten?
Was sind Attribute und Operationen?
Welcher Unterschied besteht zwischen Operationen und Methoden?

https://de.wikipedia.org/wiki/Objektorientierung


Sichtweise auf komplexe Systeme in der Softwareentwicklung
Objektorientierung (kurz OO) ist eine Sichtweise auf komplexe Systeme in der Softwareentwicklung. Ein System wird dabei durch das Zusammenspiel kooperierender Objekte beschrieben. Objekte sind aktive Elemente, die durch Nachrichten anderer Objekte aktiviert werden. Jedes Objekt verfÃ¼gt Ã¼ber Eigenschaften und Methoden, die den Zustand und die mÃ¶glichen Handlungen eines Objektes beschreiben. Objektorientierte Programme werden als kooperierende Sammlungen von Objekten angesehen.

Objektorientierung (Object-Oriented Programming, OOP) ist ein Programmierparadigma, das auf der Idee basiert, Software in Form von Objekten zu strukturieren. Diese Objekte reprÃ¤sentieren reale oder abstrakte Dinge und kombinieren Daten (Eigenschaften) und Funktionen (Methoden), die auf diesen Daten operieren. Es erleichtert die Modellierung komplexer Systeme und fÃ¶rdert Wiederverwendbarkeit, Wartbarkeit und Erweiterbarkeit von Code.

Kernkonzepte der Objektorientierung:

Klassen und Objekte:
Eine Klasse ist eine Vorlage oder ein Bauplan fÃ¼r Objekte.
Ein Objekt ist eine Instanz einer Klasse mit spezifischen Werten und Verhalten.

Kapselung:
Daten und Methoden werden in einem Objekt zusammengefasst.
Der Zugriff auf interne Details wird durch ZugriffsbeschrÃ¤nkungen (z. B. private, public) kontrolliert.

Vererbung:
Klassen kÃ¶nnen Eigenschaften und Methoden von anderen Klassen erben, um Code-Wiederverwendung zu ermÃ¶glichen.

Polymorphismus:
Objekte kÃ¶nnen sich unterschiedlich verhalten, je nachdem, in welchem Kontext sie verwendet werden (z. B. MethodenÃ¼berschreibung).

Abstraktion:
KomplexitÃ¤t wird reduziert, indem nur relevante Details eines Objekts offengelegt werden.

OOP wird in vielen Programmiersprachen wie Java, C++, Python und C# verwendet, um strukturierte und skalierbare Software zu entwickeln.

-----------------

class Person { 
	public string Name;
	public void Run(){ } 
}

Person peter = new Person();
peter.Name = "John";
peter.Run(); 

-----------------------------------------

Was sind Attribute und Operationen?

In der objektorientierten Programmierung (OOP) beschreibt eine Klasse eine Vorlage oder ein Bauplan fÃ¼r Objekte. Sie definiert die Eigenschaften (Attribute) und das Verhalten (Operationen oder Methoden) der Objekte, die aus ihr erstellt werden.

Attribute
Definition: Attribute sind die Eigenschaften oder Daten, die eine Klasse beschreiben. Sie reprÃ¤sentieren den Zustand eines Objekts.
Beispiele:
In einer Klasse Auto kÃ¶nnten Attribute sein:
farbe (z. B. "rot")
marke (z. B. "BMW")
geschwindigkeit (z. B. 120 km/h)



Operationen (Methoden)
Definition: Operationen sind Funktionen oder Methoden, die das Verhalten der Klasse definieren. Sie beschreiben, was Objekte der Klasse tun kÃ¶nnen.
Beispiele:
In der Klasse Auto kÃ¶nnten Methoden sein:
beschleunigen() (z. B. Geschwindigkeit erhÃ¶hen)
bremsen() (z. B. Geschwindigkeit verringern)
hupe() (z. B. ein HupgerÃ¤usch ausgeben)


Zusammenfassung
Attribute: Beschreiben den Zustand eines Objekts (z. B. Farbe, Marke, Geschwindigkeit).
Operationen: Definieren das Verhalten eines Objekts (z. B. Beschleunigen, Bremsen, Hupen).
Mit Klassen kÃ¶nnen Sie komplexe Systeme modellieren, indem Sie Daten und Verhalten logisch zusammenfassen.


-----------------------------------------------------
Unterschied besteht zwischen Operationen und Methoden


In C# gibt es einen klaren Unterschied zwischen Operationen und Methoden, obwohl die Begriffe manchmal synonym verwendet werden. Hier ist eine kurze ErklÃ¤rung:

1. Methoden
Definition: Eine Methode ist ein benannter Codeblock, der eine bestimmte Aufgabe ausfÃ¼hrt. Sie gehÃ¶rt zu einer Klasse oder einem Objekt.
Merkmale:
Kann Parameter akzeptieren und Werte zurÃ¼ckgeben.
Wird explizit durch ihren Namen aufgerufen.
Beispiel:
Code kopieren
public class Calculator
{
    public int Add(int a, int b)
    {
        return a + b;
    }
}

Aufruf: Calculator calc = new Calculator(); int result = calc.Add(3, 5);


2. Operationen
Definition: Operationen sind allgemeiner und umfassen alle Aktionen, die auf Daten ausgefÃ¼hrt werden kÃ¶nnen. Sie kÃ¶nnen Methoden, Operatoren oder andere Aktionen sein.
Merkmale:
Bezieht sich auf jede Art von Aktion, wie z. B. arithmetische Operationen (+, -, *, /), logische Operationen (&&, ||) oder Methodenaufrufe.
Kann implizit oder explizit sein.
Beispiel:
Code kopieren
int result = 5 + 3; // Arithmetische Operation
bool isTrue = (5 > 3) && (3 < 10); // Logische Operation

Zusammenfassung
Methoden sind spezifische, benannte Funktionen innerhalb von Klassen oder Objekten.
Operationen sind allgemeiner und umfassen alle Arten von Aktionen, einschlieÃŸlich Methodenaufrufen, Operatoren und anderen Prozessen.

Denke an Methoden als Werkzeuge und an Operationen als die Arbeit, die mit diesen Werkzeugen ausgefÃ¼hrt wird. ðŸ˜Š


----------------------------------------------------

###############################################
Wie werden Klassen in C# definiert?
Wie werden Objekte in C# instanziiert?
###############################################

DEFINITION

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
  
	public class Flasche {
  	public string Type;
  	public double Volume = 0.7;
  }
  
	public class Program
	{
		public static void Main(string[] args)
		{			
		  Flasche fl1 = new Flasche();
		  fl1.Type = "limo";
		  Console.WriteLine($"{fl1.Type}");
		  Flasche fl2 = new Flasche();
		  fl2.Type = "wein";
		  Console.WriteLine($"{fl2.Type}");
		  Console.WriteLine($"{fl2.Volume}");
		}
	}
}

ATTRIBUTE

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
  
	public class Flasche {
  	public string Type;
  	public double Volume = 0.7;
  	public void Open(){
  	  Console.WriteLine($"Die Flasche mit {this.Volume} Liter inhalt wurde geÃ¶ffnet.");
  	}
  }
  
	public class Program
	{
		public static void Main(string[] args)
		{			
		  Flasche fl1 = new Flasche();
		  fl1.Type = "limo";
		  Console.WriteLine($"{fl1.Type}");
		  Flasche fl2 = new Flasche();
		  fl2.Type = "wein";
		  Console.WriteLine($"{fl2.Type}");
		  Console.WriteLine($"{fl2.Volume}");
		  fl2.Open();
		  
		  // comparison
		  if(fl1 == fl2){
			 Console.WriteLine("eq");
		   }
		   else{
			 Console.WriteLine("not eq");
		   }
		    Flasche fl3 = fl1;
			if(fl1 == fl3){
				 Console.WriteLine("eq");
			   }
			   else{
				 Console.WriteLine("not eq");
			  } 
		}
	}
}

  
Input for the program ( Optional )
STDIN
Output:

limo
wein
0.7
Die Flasche mit 0.7 Liter inhalt wurde geÃ¶ffnet.
not eq
eq



