

########################
Building and running C# programs
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/
https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/overview

#!/usr/local/share/dotnet/dotnet run
Console.WriteLine("Hello, World!");

dotnet run hello-world.cs

------------------------------------------------------------------------------------

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_03_004.html#dodtp0019e906-4cca-4f1a-a629-058e656f2390
https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/top-level-statements
https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/ranges-indexes
https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/patterns-objects
https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/string-interpolation


string second = names[1]; // 0-based index
string last = names[^1]; // ^1 is the last element
int[] smallNumbers = numbers[0..5]; // 0 to 4

########################
Language integrated query (LINQ)
########################

var honorRoll = from student in Students
                where student.GPA > 3.5
                select student;
				

########################	
REST	
########################
	
https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/console-webapiclient

dotnet new console --name WebAPIClient
cd WebAPIClient
dotnet run

########################
Language-Integrated Query (LINQ)
########################

https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/working-with-linq


// Program.cs
using System;
using System.Collections.Generic;
using System.Linq;

------------------------------------------------------------------------------------
########################
classes
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes

public class Person
{
    public required string LastName { get; set; }
    public required string FirstName { get; set; }
}

var p1 = new Person(); // Error! Required properties not set
var p2 = new Person() { FirstName = "Grace", LastName = "Hopper" };


public class Manager : Employee
{
    // Employee fields, properties, methods and events are inherited
    // New Manager fields, properties, methods and events go here...
}



########################
records
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/records

public record Person(string FirstName, string LastName);

public static class Program
{
    public static void Main()
    {
        Person person = new("Nancy", "Davolio");
        Console.WriteLine(person);
        // output: Person { FirstName = Nancy, LastName = Davolio }
    }

}



########################
Interfaces 
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/interfaces


########################
Generics classes and methods
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/generics


// Declare the generic class.
public class GenericList<T>
{
    public void Add(T item) { }
}

public class ExampleClass { }

class TestGenericList
{
    static void Main()
    {
        // Create a list of type int.
        GenericList<int> list1 = new();
        list1.Add(1);

        // Create a list of type string.
        GenericList<string> list2 = new();
        list2.Add("");

        // Create a list of type ExampleClass.
        GenericList<ExampleClass> list3 = new();
        list3.Add(new ExampleClass());
    }
}

########################
Anonymous types
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types


var v = new { Amount = 108, Message = "Hello" };

// Rest the mouse pointer over v.Amount and v.Message in the following
// statement to verify that their inferred types are int and string.
Console.WriteLine(v.Amount + v.Message);

########################
Overview of object oriented techniques in C#
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/


########################
Objects 
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/objects
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/classes
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/oop
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/inheritance
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/inheritance
https://www.w3schools.com/cs/cs_oop.php


using System;

public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/safely-cast-using-pattern-matching-is-and-as-operators
    public Person(string name, int age)
    {
        Name = name;
        Age = age;
    }
    // Other properties, methods, events...
}

class Program
{
    static void Main()
    {
        Person person1 = new Person("Leopold", 6);
        Console.WriteLine($"person1 Name = {person1.Name} Age = {person1.Age}");

        // Declare new person, assign person1 to it.
        Person person2 = person1;

        // Change the name of person2, and person1 also changes.
        person2.Name = "Molly";
        person2.Age = 16;

        Console.WriteLine($"person2 Name = {person2.Name} Age = {person2.Age}");
        Console.WriteLine($"person1 Name = {person1.Name} Age = {person1.Age}");
    }
}
/*
    Output:
    person1 Name = Leopold Age = 6
    person2 Name = Molly Age = 16
    person1 Name = Molly Age = 16
*/



########################
Inheritance 
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance


########################
Polymorphism
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/polymorphism

########################
Pattern matching
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/pattern-matching

########################
Discards 
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/discards

########################
Deconstructing tuples and other types
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/deconstruct

########################
Exceptions and Exception Handling
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/using-exceptions
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/exception-handling
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/creating-and-throwing-exceptions
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/compiler-generated-exceptions

public class ExceptionTest
{
    static double SafeDivision(double x, double y)
    {
        if (y == 0)
            throw new DivideByZeroException();
        return x / y;
    }

    public static void Main()
    {
        // Input for test purposes. Change the values to see
        // exception handling behavior.
        double a = 98, b = 0;
        double result;

        try
        {
            result = SafeDivision(a, b);
            Console.WriteLine($"{a} divided by {b} = {result}");
        }
        catch (DivideByZeroException)
        {
            Console.WriteLine("Attempted divide by zero.");
        }
    }
}


########################
C# identifier naming rules and conventions
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/identifier-names
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions


https://github.com/dotnet/docs
https://github.com/dotnet/dotnet-api-docs


https://github.com/dotnet/samples

Building a sample
dotnet build
dotnet run


########################
code analysis
########################

https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview?tabs=net-9
https://learn.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options?view=vs-2022



########################
display command-line arguments
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/how-to-display-command-line-arguments
https://learn.microsoft.com/en-us/dotnet/standard/commandline/
https://learn.microsoft.com/en-us/dotnet/standard/commandline/get-started-tutorial
https://learn.microsoft.com/en-us/dotnet/core/get-started
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/top-level-statements
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/main-command-line




// The Length property provides the number of array elements.
Console.WriteLine($"parameter count = {args.Length}");

for (int i = 0; i < args.Length; i++)
{
    Console.WriteLine($"Arg[{i}] = [{args[i]}]");
}

/* Output (assumes 3 cmd line args):
    parameter count = 3
    Arg[0] = [a]
    Arg[1] = [b]
    Arg[2] = [c]
*/



dotnet new console --framework net9.0
dotnet add package System.CommandLine --prerelease

dotnet new console -o sample1
cd sample1
dotnet run



########################
How to safely cast by using pattern matching and the is and as operators
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/safely-cast-using-pattern-matching-is-and-as-operators

########################
Use pattern matching to build type-driven and data-driven algorithms
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/pattern-matching


########################
How to handle an exception using try/catch
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/how-to-handle-an-exception-using-try-catch

########################
How to execute cleanup code using finally
########################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/how-to-execute-cleanup-code-using-finally


########################
Create record types
########################

https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/records

########################
Sprachfeatures generics
########################

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_10_001.html#dodtp077ecd71-a5e8-46be-b6b5-6c31bc77dede
https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_09_001.html#dodtp066354eb-ea00-4a8d-aa5a-fa7bd96e026d
https://www.w3schools.com/cs/cs_getstarted.php


// value wird als Integer behandelt
var value = 5;
// city wird als String behandelt
var city = "Aachen";
// arr wird als int[]-Array behandelt
var arr = new[] { 0, 1, 2 };
// liste wird als List<int> behandelt
var liste = new List<int>();

for (var x = 0; x < 100; x++) [...]
foreach (var element in liste) [...]
















































