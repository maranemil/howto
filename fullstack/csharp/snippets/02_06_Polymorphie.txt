Polymorphie

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_04_001.html

###################################
Spezialisierung in Subklassen
###################################

In C# kann eine Spezialisierung in Subklassen durch Vererbung implementiert werden. Dabei wird eine Basisklasse erstellt, die allgemeine Eigenschaften und Methoden definiert, und Subklassen erweitern oder spezialisieren diese Funktionalität. Hier ist ein einfaches Beispiel:

Beispiel: Spezialisierung durch Vererbung
Code kopieren
// Basisklasse
public class Fahrzeug
{
    public string Marke { get; set; }
    public int Geschwindigkeit { get; set; }

    public virtual void Fahren()
    {
        Console.WriteLine("Das Fahrzeug fährt.");
    }
}

// Subklasse 1: Auto
public class Auto : Fahrzeug
{
    public int AnzahlTüren { get; set; }

    public override void Fahren()
    {
        Console.WriteLine("Das Auto fährt mit " + Geschwindigkeit + " km/h.");
    }
}

// Subklasse 2: Fahrrad
public class Fahrrad : Fahrzeug
{
    public bool HatKlingel { get; set; }

    public override void Fahren()
    {
        Console.WriteLine("Das Fahrrad fährt gemütlich.");
    }
}

// Nutzung
class Program
{
    static void Main(string[] args)
    {
        Auto auto = new Auto { Marke = "BMW", Geschwindigkeit = 120, AnzahlTüren = 4 };
        auto.Fahren();

        Fahrrad fahrrad = new Fahrrad { Marke = "Canyon", Geschwindigkeit = 20, HatKlingel = true };
        fahrrad.Fahren();
    }
}

Erklärung:
Basisklasse (Fahrzeug): Definiert allgemeine Eigenschaften und Methoden, die von allen Subklassen geerbt werden.
Subklassen (Auto, Fahrrad): Erben von der Basisklasse und spezialisieren das Verhalten durch Überschreiben der Methode Fahren() mit override.
Polymorphie: Ermöglicht, dass Subklassen ihre eigene Implementierung der Methode bereitstellen.

Dieses Konzept hilft, Code wiederzuverwenden und gleichzeitig spezifisches Verhalten für unterschiedliche Subklassen zu definieren.



----------------------

In C#, you can implement specialization in subclasses by overriding methods, using generics, or employing interfaces. Here's how you can achieve it:

1. Method Overriding

You can override a base class method in a subclass to provide specialized behavior.

Code kopieren
public class Animal
{
    public virtual void Speak()
    {
        Console.WriteLine("Animal speaks.");
    }
}

public class Dog : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Dog barks.");
    }
}

public class Cat : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Cat meows.");
    }
}

2. Using Generics with Constraints

Generics allow you to specialize behavior based on the type parameter.

Code kopieren
public class Processor<T>
{
    public virtual void Process(T item)
    {
        Console.WriteLine($"Processing: {item}");
    }
}

public class StringProcessor : Processor<string>
{
    public override void Process(string item)
    {
        Console.WriteLine($"Processing string: {item.ToUpper()}");
    }
}

3. Using Interfaces for Specialization

You can define an interface and implement it differently in subclasses.

Code kopieren
public interface IWorker
{
    void DoWork();
}

public class Programmer : IWorker
{
    public void DoWork()
    {
        Console.WriteLine("Writing code.");
    }
}

public class Designer : IWorker
{
    public void DoWork()
    {
        Console.WriteLine("Creating designs.");
    }
}


Each approach depends on your specific use case. Method overriding is great for polymorphism, generics are useful for type-specific logic, and interfaces provide flexibility for multiple implementations.



--------------------------------------
###################################
csharp What are the disadvantages of hiding base class methods?
###################################

In a derived class. that we can hide a property of method of its base class Method hiding by using the new keyword has the effect of breaking polymorphism. If you're using method hiding you cannot invoke the hidden behavior when accessing the method via it's base type or interface




###################################
csharp What are the advantages and disadvantages of abstract classes?
###################################

Why We Use Abstract Classes in C#
1
2
3
Abstract classes in C# are a foundational concept in object-oriented programming, designed to provide a blueprint for related classes while enforcing a consistent structure. They allow developers to define common functionality and behavior for a group of derived classes while leaving specific implementations to those derived classes.

Key Features of Abstract Classes

Cannot Be Instantiated: Abstract classes cannot be instantiated directly. They are meant to be inherited by other classes, which then provide concrete implementations for abstract methods.

Abstract and Non-Abstract Members: Abstract classes can contain both abstract methods (without implementation) and non-abstract methods (with implementation). This allows a mix of enforced behavior and shared functionality.

Encapsulation and Code Reusability: Abstract classes encapsulate shared logic, reducing code duplication and promoting reusability across derived classes.

Practical Use Cases

Abstract classes are particularly useful when you want to define a common base for related classes while enforcing certain behaviors. For example:

public abstract class Animal
{
	public abstract string Sound { get; }
	public virtual void Move()
	{
	Console.WriteLine("Moving...");
	}
}

public class Cat : Animal
{
	public override string Sound => "Meow";
	public override void Move()
	{
	Console.WriteLine("Walking like a cat...");
	}
}

public class Dog : Animal
{
	public override string Sound => "Woof";
	public override void Move()
	{
	Console.WriteLine("Running like a dog...");
	}
}

class Program
{
	static void Main(string[] args)
	{
		Animal[] animals = { new Cat(), new Dog() };
		foreach (var animal in animals)
		{
		Console.WriteLine($"The {animal.GetType().Name} goes {animal.Sound}");
		animal.Move();
		}
	}
}
Output:

The Cat goes Meow
Walking like a cat
The Dog goes Woof
Running like a dog


In this example, the Animal class defines a common structure for all animals, while the Cat and Dog classes provide specific implementations for the Sound and Move methods.

Advantages

Encapsulation: Abstract classes allow you to define shared behavior while hiding implementation details.

Code Reusability: Shared methods in the abstract class can be reused across multiple derived classes.

Polymorphism: Abstract classes enable polymorphism, allowing you to treat objects of different derived classes uniformly through the base class.

Limitations

Single Inheritance: C# does not support multiple inheritance, so a class can only inherit from one abstract class.

Tight Coupling: Abstract classes can create tight coupling between the base and derived classes, making changes to the base class potentially disruptive.

Testing Challenges: Since abstract classes cannot be instantiated, testing them often requires creating mock or derived classes.

When to Use Abstract Classes

When you need to define a common base for related classes with shared functionality.

When you want to enforce a contract for derived classes to implement specific methods.

When you need to provide default behavior that can be overridden by derived classes.

Abstract classes are a powerful tool for creating well-structured, maintainable, and extensible code in C#. They strike a balance between flexibility and enforcement, making them ideal for scenarios where a mix of shared and specific behavior is required.

###############################################
csharp What possibilities do virtual methods offer?
###############################################

Virtual methods in C# are an essential feature of object-oriented programming. They allow for polymorphism, late binding, and dynamic method dispatch, providing flexibility and extensibility in class hierarchies. Proper use of virtual methods can result in clean and maintainable code.


https://code-maze.com/virtual-methods-csharp/
https://www.c-sharpcorner.com/UploadFile/3d39b4/virtual-method-in-C-Sharp/

public class Shape
{
    public virtual double CalculateArea()
    {
        return 0;
    }

    public virtual string GetShapeType()
    {
        return "This is a generic shape";
    }

    public string Draw()
    {
        return "Drawing a generic shape";
    }
}

public class Rectangle : Shape
{
    public double Width { get; set; }

    public double Height { get; set; }

    public override double CalculateArea()
    {
        return Width * Height;
    }

    public override string GetShapeType()
    {
        return "This is a rectangle";
    }

    public new string Draw()
    {
        return "Drawing a rectangle";
    }
}

  public class Circle : Shape
{
    public double Radius { get; set; }

    public override double CalculateArea()
    {
        return Math.PI * Radius * Radius;
    }

    public new string Draw()
    {
        return "Drawing a circle";
    }
}

public new string Draw()
{
    return "Drawing a circle";
}

var shape = new Shape();
var circle = new Circle() { Radius = 2 };
var rectangle = new Rectangle() { Height = 2, Width = 3 };

Console.WriteLine($"Shape area: {shape.CalculateArea()}");         // Shape area: 0
Console.WriteLine($"Circle area: {circle.CalculateArea()}");       // Circle area: 12,566370614359172
Console.WriteLine($"Rectangle area: {rectangle.CalculateArea()}"); // Rectangle area: 6
Console.WriteLine($"Shape type: {shape.GetShapeType()}");         // Shape type: This is a generic shape
Console.WriteLine($"Circle type: {circle.GetShapeType()}");       // Circle type: This is a generic shape
Console.WriteLine($"Rectangle type: {rectangle.GetShapeType()}"); // Rectangle type: This is a rectangle
Shape circleAsShape = new Circle() { Radius = 2 };
Console.WriteLine($"Shape draw: {shape.Draw()}");          // Shape draw: Drawing a generic shape
Console.WriteLine($"Circle draw: {circleAsShape.Draw()}"); // Circle draw: Drawing a generic shape
Console.WriteLine($"Rectangle draw: {rectangle.Draw()}");  // Rectangle draw: Drawing a rectangle


virtual methods when developing frameworks, class libraries and testing. 
[TestMethod]
public void WhenCircleClassGetShapeTypeMock_ThenCircleClassGetShapeTypeResult()
{
    var circleMock = new Mock<Circle>();
    circleMock.Setup(p => p.GetShapeType()).Returns("This is a circle");
    var circleType = circleMock.Object.GetShapeType();

    Assert.AreEqual("This is a circle", circleType);
}


Virtual methods in C# are an essential feature of object-oriented programming. They allow for polymorphism, late binding, and dynamic method dispatch, providing flexibility and extensibility in class hierarchies.

Proper use of virtual methods can result in clean and maintainable code. However, despite their advantages, we should consider performance implications when using virtual methods.

---------
Polymorphism


Polymorphism is a fundamental concept in object-oriented programming that allows objects of different classes to be treated as objects of a common base class. This enables a single interface to represent different underlying forms (data types). In C#, polymorphism is achieved through method overriding and method overloading.

Method Overriding

Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its superclass. This is done using the virtual keyword in the base class and the override keyword in the derived class. Here is an example:




public class Animal
{
	public virtual void MakeSound()
	{
	Console.WriteLine("The animal makes a sound");
	}
}

public class Dog : Animal
{
	public override void MakeSound()
	{
	Console.WriteLine("The dog says: bow wow");
	}
}

public class Cat : Animal
{
	public override void MakeSound()
	{
	Console.WriteLine("The cat says: meow");
	}
}

public class Program
{
	public static void Main(string[] args)
	{
		Animal myDog = new Dog();
		Animal myCat = new Cat();

		myDog.MakeSound(); // Output: The dog says: bow wow
		myCat.MakeSound(); // Output: The cat says: meow
	}
}


Method Overloading

Method overloading allows multiple methods in the same class to have the same name but different parameters. This is a form of compile-time polymorphism. Here is an example:


public class Program
{
	public void Greet()
	{
		Console.WriteLine("Hello");
	}

	public void Greet(string name)
	{
		Console.WriteLine("Hello " + name);
	}

	public static void Main(string[] args)
	{
		Program p = new Program();
		p.Greet(); // Output: Hello
		p.Greet("Tim"); // Output: Hello Tim
	}
}


Why Use Polymorphism?

Polymorphism allows for more flexible and maintainable code. It enables you to write code that can work with objects of different types through a common interface. This reduces the need for multiple methods and makes the code easier to extend and maintain.

For instance, in a drawing application, you can create a base class Shape with a virtual method Draw. Derived classes like Circle, Rectangle, and Triangle can override the Draw method to provide their specific implementations. This way, you can use a single method to draw different shapes without knowing their specific types at compile time
1
.



public class Shape
{
	public virtual void Draw()
	{
	Console.WriteLine("Drawing a shape");
	}
}

public class Circle : Shape
{
	public override void Draw()
	{
	Console.WriteLine("Drawing a circle");
	}
}

public class Rectangle : Shape
{
	public override void Draw()
	{
	Console.WriteLine("Drawing a rectangle");
	}
}

public class Program
{
	public static void Main(string[] args)
	{
		List<Shape> shapes = new List<Shape>
		{
			new Circle(),
			new Rectangle()
		};

		foreach (var shape in shapes)
		{
			shape.Draw();
		}
	}
}

https://www.tutorialspoint.com/csharp/csharp_polymorphism.htm
https://www.w3schools.com/cs/cs_polymorphism.php
https://www.geeksforgeeks.org/c-sharp/c-polymorphism/

#################################################################


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
	public class Program
	{
		public static void Main(string[] args)
		{
			Console.WriteLine("Hello, World!");
			Desktop desktop = new Desktop();
			Desktop notebook = new Desktop();
		
			Console.WriteLine(desktop.State);
			desktop.OpenState = true;
			Console.WriteLine(desktop.OpenState);
			Console.WriteLine(desktop.State);
			
			Computers[] computers = { desktop, notebook }; 
			foreach (var computer in computers) computer.Stop(); 
		}
	}
	
	public class Computer 
	{
	  public bool State { get; private set; }
	  public bool OpenState { get { return State; } set { State = value; }  }
	  public void Stop(){
	    Console.WriteLine("Computer stop!");
	  }
	}
	
	public class Desktop: Computer {
	  public string TypeCase { get; set; }
	}
	
	 public class Notebook: Computer {
	  public string Screen { get; set; }
	}
}



------------------------

using System;

namespace HelloWorld
{
	public class Program
	{
		public static void Main(string[] args)
		{
			Console.WriteLine("Hello, World!");					
			Desktop pc = new Desktop();
			pc.Switched();
		}
	}

	abstract internal class Computer 
	{ 
		public abstract void Switched(); 
	} 

	internal class Desktop : Computer 
	{ 
		public override void Switched(){
			Console.WriteLine($"Stopped");
		}
	}

}




####################################################
Weitere Gesichtspunkte der Vererbung
####################################################

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_04_005.html#dodtp97127ecd-ebc8-476f-9005-fa2947fc504c

Versiegelte Methoden

class Flugzeug : Luftfahrzeug {
  public sealed override void Starten() {
    Console.WriteLine("Das Flugzeug startet");
  }
}

Überladen einer Basisklassenmethode
Statische Member und Vererbung
Geerbte Methoden ausblenden

using System;

namespace HelloWorld
{
	public class Luftfahrzeug {
	  public void Starten() {	
		  Console.WriteLine("Das Flugzeug startet1.");
	  }
	}
	
	public class Flugzeug : Luftfahrzeug {
	   public new void Starten() {
		Console.WriteLine("Das Flugzeug startet2.");
	  }
	}

	public class Program {
		static void Main(string[] args) {
		  Flugzeug flg = new Flugzeug();
		  flg.Starten();
		}
	}	
}



####################################################
csharp What options does the object base class offer? Klasse  Object
####################################################

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_16_001.html#dodtp2450680c-ac9d-48da-81ea-6672f80715f7


In C#, the object class is the ultimate base class for all types in .NET, whether they are value types (e.g., int, bool) or reference types (e.g., classes, arrays). It provides several essential methods that are inherited by all types. Here's a summary of the key methods and their purposes:

1. ToString()
Purpose: Converts the object to its string representation.
Default Behavior: Returns the fully qualified name of the object's type.
Common Use: Often overridden in custom classes to provide meaningful string representations.
Code kopieren
public override string ToString()
{
    return "Custom string representation";
}

2. Equals(object obj)
Purpose: Determines whether the current object is equal to another object.
Default Behavior: Compares references for reference types and values for value types.
Common Use: Override to implement custom equality logic.
Code kopieren
public override bool Equals(object obj)
{
    if (obj is MyClass other)
    {
        return this.Property == other.Property;
    }
    return false;
}

3. GetHashCode()
Purpose: Returns a hash code for the object, used in hashing algorithms and data structures like hash tables.
Default Behavior: Generates a hash code based on the object's reference or value.
Common Use: Override to ensure consistency with Equals.
Code kopieren
public override int GetHashCode()
{
    return Property.GetHashCode();
}

4. GetType()
Purpose: Retrieves the runtime type of the current instance.
Usage: Useful for reflection or type comparison.
Code kopieren
Type type = myObject.GetType();
Console.WriteLine(type.Name);

5. MemberwiseClone()
Purpose: Creates a shallow copy of the current object.
Usage: Often used when implementing cloning functionality.
Code kopieren
MyClass clone = (MyClass)this.MemberwiseClone();

6. Finalize()
Purpose: Allows an object to clean up resources before it is reclaimed by garbage collection.
Default Behavior: Does nothing unless overridden.
Common Use: Rarely overridden; prefer IDisposable for resource cleanup.
Code kopieren
~MyClass()
{
    // Cleanup code
}


These methods provide a foundation for object behavior in .NET, and you can override them to customize how your objects interact with the runtime and other objects.




########################################################
Interfaces 
########################################################

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_04_008.html#dodtpb69e3663-544c-4d13-a23a-6031dbfdf8df
https://www.w3schools.com/cs/cs_interface.php

An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies)


public interface ICopy 
{
  string Caption {get; set;};
  void Copy();
}


// interface
interface Animal 
{
  void animalSound(); // interface method (does not have a body)
  void run(); // interface method (does not have a body)
}


csharp How can interfaces be used
--------------------------------------

In C#, interfaces are used to define a contract that classes or structs must adhere to. They specify what a class should do, but not how it should do it. Here's a concise explanation of how interfaces can be used:

1. Defining an Interface

An interface contains method, property, event, or indexer declarations without implementation. For example:

Code kopieren
public interface IAnimal
{
    void Speak();
    string Name { get; set; }
}

2. Implementing an Interface

A class or struct implements an interface by providing definitions for all its members:

Code kopieren
public class Dog : IAnimal
{
    public string Name { get; set; }

    public void Speak()
    {
        Console.WriteLine("Woof!");
    }
}

3. Using Interfaces

Interfaces allow polymorphism, enabling you to work with objects through their interface type:

Code kopieren
IAnimal animal = new Dog { Name = "Buddy" };
animal.Speak(); // Output: Woof!

4. Multiple Interface Implementation

A class can implement multiple interfaces, making it versatile:

Code kopieren
public interface IWalker
{
    void Walk();
}

public class Robot : IAnimal, IWalker
{
    public string Name { get; set; }

    public void Speak()
    {
        Console.WriteLine("Beep Boop!");
    }

    public void Walk()
    {
        Console.WriteLine("Robot is walking.");
    }
}

5. Explicit Interface Implementation

When implementing multiple interfaces with overlapping members, explicit implementation avoids ambiguity:

Code kopieren
public interface IPrinter
{
    void Print();
}

public interface IScanner
{
    void Print(); // Same method name
}

public class MultiFunctionDevice : IPrinter, IScanner
{
    void IPrinter.Print()
    {
        Console.WriteLine("Printing...");
    }

    void IScanner.Print()
    {
        Console.WriteLine("Scanning...");
    }
}

6. Dependency Injection

Interfaces are commonly used in dependency injection to decouple components, making code more testable and maintainable:

Code kopieren
public interface ILogger
{
    void Log(string message);
}

public class ConsoleLogger : ILogger
{
    public void Log(string message)
    {
        Console.WriteLine(message);
    }
}

public class Application
{
    private readonly ILogger _logger;

    public Application(ILogger logger)
    {
        _logger = logger;
    }

    public void Run()
    {
        _logger.Log("Application is running.");
    }
}

Summary

Interfaces are a powerful tool in C# for achieving abstraction, polymorphism, and loose coupling. They help create flexible, reusable, and testable code.




####################################
csharp What are the advantages of using interfaces?
####################################

Interfaces in C# are a powerful feature that defines a contract or a set of rules that a class must adhere to. They specify a list of methods, properties, events, or indexers that a class implementing the interface must provide. Interfaces allow you to define a common set of functionality that multiple classes can share, promoting code reusability and ensuring a consistent structure for related classes.

Key Benefits of Using Interfaces

Extensibility

Interfaces allow for easy extensibility. For example, if you have an interface ICar and a class NormalCar implementing it, you can easily add a new class VintageCar that also implements ICar without modifying the existing code. This makes it easy to extend the functionality of your application.




public interface ICar
{
	string ModelName { get; set; }
	void DriveCar(IDriver driver);
}

public class VintageCar : ICar
{
	public string ModelName { get; set; }
	public void DriveCar(IDriver driver)
	{
		if (driver.YearsOfExperience > 10)
		driver.Drive();
	}
}



Implementation Hiding

Interfaces help in hiding the implementation details from the client code. The client code only knows about the interface and not the actual implementation. This is achieved by using a factory class that creates instances of the classes implementing the interfaces
1
.

Accessing Objects Using Interfaces

When using interfaces, you can create variables of the interface type that can hold references to any object implementing that interface. This allows you to treat different classes as the same type, making it easier to work with them


IDriver myDriver = Factory.CreateDriver("John", 38, 5);
ICar vintageCar = Factory.CreateVintageCar("Old Toyota");
vintageCar.DriveCar(myDriver);


Loose Coupling

Interfaces promote loose coupling by allowing you to pass interface type variables as arguments. This means that the code is less dependent on specific implementations and more on the abstraction provided by the interface

public interface ICar
{
string ModelName { get; set; }
void DriveCar(IDriver driver);
}




Practical Use Cases

Defining a Common Contract

Interfaces are used to ensure that multiple classes provide a common set of methods, properties, events, or indexers. This is useful when different classes need to exhibit similar behavior but may have different implementations
2
.

Implementing Multiple Inheritance

C# does not support multiple inheritance for classes but supports multiple interface implementation. This allows a class to inherit behavior or structure from multiple sources
2
.

Enforcing a Specific Structure

Interfaces enforce a specific structure or a particular set of methods and properties for classes within your application or library
2
.

Testing and Mocking

Interfaces are valuable in unit testing scenarios. You can create interfaces for external dependencies or services and then create mock implementations of those interfaces for testing purposes
2
.

Dependency Injection

When using dependency injection, interfaces often define dependencies that can be injected into classes. This helps achieve loose coupling and makes it easier to switch implementations at runtime
2
.

In summary, interfaces in C# are essential for creating maintainable, extensible, and testable code. They provide a way to define contracts, promote code reusability, and ensure a consistent structure for related classes
1
2
.





##################################################
csharp What must be observed with interfaces
##################################################

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/interfaces
https://www.tutorialsteacher.com/csharp/csharp-interface
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/interfaces
https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_04_008.html#dodtpb69e3663-544c-4d13-a23a-6031dbfdf8df

An interface contains definitions for a group of related functionalities that a non-abstract class or a struct must implement. An interface may define static methods, which must have an implementation. An interface may define a default implementation for members.

##################################################
csharp what modifier can be use on a subclass for a member when basic class usage
##################################################


In C#, when working with subclasses and members of a base class, the access modifiers determine how those members can be accessed. Here are the most relevant modifiers you can use for a member in a subclass:

1. public
The member is accessible from anywhere, including the subclass and any other code.
Example:
Code kopieren
public class BaseClass
{
    public string PublicMember = "Accessible everywhere";
}

public class SubClass : BaseClass
{
    public void Show()
    {
        Console.WriteLine(PublicMember); // Accessible
    }
}

2. protected
The member is accessible only within the base class and its subclasses.
Example:
Code kopieren
public class BaseClass
{
    protected string ProtectedMember = "Accessible in subclass";
}

public class SubClass : BaseClass
{
    public void Show()
    {
        Console.WriteLine(ProtectedMember); // Accessible
    }
}

3. protected internal
The member is accessible within the same assembly or from subclasses in other assemblies.
Example:
Code kopieren
public class BaseClass
{
    protected internal string ProtectedInternalMember = "Accessible in subclass or same assembly";
}

public class SubClass : BaseClass
{
    public void Show()
    {
        Console.WriteLine(ProtectedInternalMember); // Accessible
    }
}

4. private protected
The member is accessible only within the same assembly and from subclasses.
Example:
Code kopieren
public class BaseClass
{
    private protected string PrivateProtectedMember = "Accessible in subclass within same assembly";
}

public class SubClass : BaseClass
{
    public void Show()
    {
        Console.WriteLine(PrivateProtectedMember); // Accessible
    }
}

5. private
The member is accessible only within the base class itself. It is not accessible in the subclass.
Example:
Code kopieren
public class BaseClass
{
    private string PrivateMember = "Not accessible in subclass";
}

public class SubClass : BaseClass
{
    public void Show()
    {
        // Console.WriteLine(PrivateMember); // Not accessible
    }
}

Summary Table:
Modifier	Access in Subclass	Access Outside Assembly
public	Yes	Yes
protected	Yes	No
protected internal	Yes	Yes (if same assembly)
private protected	Yes (if same assembly)	No
private	No	No

Choose the modifier based on the level of access control you need for your subclass and other parts of your application.




######################################################
######################################################

In C#, to enable polymorphism in a subclass, you can use the virtual, override, and abstract modifiers in combination with inheritance. Here's a breakdown of their usage:

1. virtual (in the base class)
Marks a method or property in the base class as overridable.
Allows derived classes to provide their own implementation.
Code kopieren
public class BaseClass
{
    public virtual void Display()
    {
        Console.WriteLine("BaseClass Display");
    }
}

2. override (in the subclass)
Used in the derived class to override a virtual or abstract method from the base class.
Provides a new implementation for the inherited method.
Code kopieren
public class SubClass : BaseClass
{
    public override void Display()
    {
        Console.WriteLine("SubClass Display");
    }
}

3. abstract (in the base class)
Declares a method or property in the base class without implementation.
Forces derived classes to provide an implementation.
Code kopieren
public abstract class AbstractBaseClass
{
    public abstract void Display();
}

public class SubClass : AbstractBaseClass
{
    public override void Display()
    {
        Console.WriteLine("SubClass Display");
    }
}

Key Notes:

Polymorphism works when you use a base class reference to call methods on derived class objects.

Example:

Code kopieren
BaseClass obj = new SubClass();
obj.Display(); // Calls SubClass's Display method due to polymorphism.


By combining these modifiers appropriately, you can achieve polymorphism in your C# classes.














