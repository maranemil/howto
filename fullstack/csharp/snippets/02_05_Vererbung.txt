Vererbung 


Was verbirgt sich hinter der Vererbung


Die Vererbung, zusammen mit Kapselung und Polymorphismus, ist eines der drei Hauptmerkmale der objektorientierten Programmierung. Mit der Vererbung können Sie neue Klassen erstellen, die das in anderen Klassen definierte Verhalten wiederverwenden, erweitern und ändern.

https://learn.microsoft.com/de-de/dotnet/csharp/fundamentals/object-oriented/inheritance
https://learn.microsoft.com/de-de/dotnet/csharp/fundamentals/tutorials/inheritance

--------------------------------------

Welche Vorteile bietet die Vererbung

Die Vererbung in C# (und generell in der objektorientierten Programmierung) bietet zahlreiche Vorteile, die die Entwicklung von Software effizienter und strukturierter machen. Hier sind die wichtigsten Vorteile:

1. Code-Wiederverwendbarkeit
Durch Vererbung können gemeinsame Eigenschaften und Methoden in einer Basisklasse definiert und von abgeleiteten Klassen wiederverwendet werden. Das spart Zeit und reduziert Redundanz.
2. Erweiterbarkeit
Neue Funktionalitäten können durch das Hinzufügen oder Überschreiben von Methoden in abgeleiteten Klassen einfach implementiert werden, ohne die Basisklasse zu verändern.
3. Klarheit und Struktur
Vererbung hilft, logische Beziehungen zwischen Klassen zu definieren (z. B. "ist-ein"-Beziehung). Dies macht den Code leichter verständlich und wartbar.
4. Wartbarkeit
Änderungen in der Basisklasse wirken sich automatisch auf alle abgeleiteten Klassen aus, was die Pflege und Aktualisierung des Codes erleichtert.
5. Polymorphismus
Vererbung ermöglicht polymorphes Verhalten, bei dem Objekte unterschiedlicher Klassen über eine gemeinsame Schnittstelle oder Basisklasse angesprochen werden können. Dies fördert Flexibilität und Modularität.
6. Reduzierung von Fehlern
Da wiederverwendeter Code zentral in der Basisklasse verwaltet wird, sinkt die Wahrscheinlichkeit von Fehlern, die durch doppelte Implementationen entstehen könnten.
Beispiel:
Code kopieren
// Basisklasse
public class Fahrzeug
{
    public string Marke { get; set; }
    public void Starten()
    {
        Console.WriteLine("Das Fahrzeug startet.");
    }
}

// Abgeleitete Klasse
public class Auto : Fahrzeug
{
    public int Türen { get; set; }
}

// Nutzung
Auto meinAuto = new Auto { Marke = "BMW", Türen = 4 };
meinAuto.Starten(); // Ausgabe: Das Fahrzeug startet.


In diesem Beispiel wird die Methode Starten in der Basisklasse definiert und von der abgeleiteten Klasse Auto wiederverwendet. Das spart Zeit und macht den Code übersichtlicher.



----------------------------------------------------------------------------------------
Inheritance in C# offers several advantages, making it a powerful feature in object-oriented programming. Here are the key benefits:

1. Code Reusability
Inheritance allows you to reuse existing code by creating new classes (derived classes) based on existing ones (base classes). This reduces redundancy and promotes efficient development.
2. Extensibility
You can extend the functionality of a base class by adding new methods or overriding existing ones in the derived class, enabling customization without altering the original class.
3. Maintainability
Centralizing shared functionality in a base class makes it easier to maintain and update code. Changes in the base class automatically propagate to derived classes.
4. Polymorphism
Inheritance enables polymorphism, allowing you to use a base class reference to work with objects of derived classes. This simplifies code and enhances flexibility.
5. Improved Readability
By organizing related classes in a hierarchy, inheritance improves the structure and readability of your code, making it easier to understand and navigate.
Example:
Code kopieren
// Base class
public class Animal
{
    public void Eat() => Console.WriteLine("This animal eats food.");
}

// Derived class
public class Dog : Animal
{
    public void Bark() => Console.WriteLine("The dog barks.");
}

// Usage
Dog dog = new Dog();
dog.Eat();  // Inherited from Animal
dog.Bark(); // Specific to Dog


This example demonstrates how the Dog class inherits the Eat method from the Animal class, showcasing code reuse and extensibility.

https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance


----------------------------------------------------------------------------------------

Which components can inheritance be used for


In C#, inheritance is a fundamental concept of object-oriented programming that allows a class (derived class) to inherit members (fields, methods, properties, etc.) from another class (base class). Here are the components that can be inherited:

1. Fields
Public and protected fields of the base class can be inherited by the derived class.
Private fields are not directly inherited but can be accessed through public or protected methods or properties.
2. Methods
Public and protected methods are inherited.
Methods can be overridden in the derived class using the override keyword if the base class method is marked as virtual or abstract.
3. Properties
Public and protected properties are inherited.
Like methods, properties can also be overridden if they are marked as virtual or abstract.
4. Events
Public and protected events are inherited and can be used or overridden in the derived class.
5. Indexers
Public and protected indexers are inherited and can be overridden if marked as virtual or abstract.
6. Constructors
Constructors are not inherited, but the derived class can call the base class constructor using the base keyword.
7. Nested Types
Public and protected nested types (classes, structs, enums, etc.) are inherited.
8. Interfaces
If the base class implements an interface, the derived class also inherits the implementation of that interface.
Important Notes:
Access Modifiers: Only members with public or protected access modifiers are inherited. private members are not directly accessible in the derived class.
Sealed Classes: A class marked as sealed cannot be inherited.
Abstract Classes: Abstract classes can be inherited, but any abstract members must be implemented in the derived class.
Multiple Inheritance: C# does not support multiple inheritance with classes but allows it with interfaces.

This flexibility allows developers to reuse code efficiently while maintaining a clear and organized structure.


https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/inheritance


----------------------------------------------------------------------------------------

#################################################################
csharp What needs to be considered with inheritance
#################################################################



When working with inheritance in C#, there are several important considerations to ensure your code is clean, maintainable, and efficient:

1. Understand the Basics of Inheritance
A base class (parent) provides common functionality.
A derived class (child) inherits or overrides the base class's properties and methods.
Use the : syntax to establish inheritance:
Code kopieren
class BaseClass { }
class DerivedClass : BaseClass { }

2. Access Modifiers
public: Accessible everywhere.
protected: Accessible in the base class and derived classes.
private: Not accessible in derived classes.
internal: Accessible within the same assembly.
Use protected for members intended for derived classes.
3. Virtual, Override, and Sealed
virtual: Allows a method in the base class to be overridden in a derived class.
override: Used in the derived class to modify the behavior of a virtual method.
sealed: Prevents further inheritance of a class or method.
Code kopieren
public class BaseClass {
    public virtual void Display() { Console.WriteLine("Base"); }
}
public class DerivedClass : BaseClass {
    public override void Display() { Console.WriteLine("Derived"); }
}

4. Constructors in Inheritance
The base class constructor is called before the derived class constructor.
Use base to explicitly call a base class constructor:
Code kopieren
public class BaseClass {
    public BaseClass(string message) { Console.WriteLine(message); }
}
public class DerivedClass : BaseClass {
    public DerivedClass() : base("Hello from Base") { }
}

5. Avoid Overusing Inheritance
Use inheritance only when there is a clear "is-a" relationship.
For other relationships, consider composition (e.g., "has-a" relationship).
6. Polymorphism
Use polymorphism to work with objects of derived classes through base class references.
Code kopieren
BaseClass obj = new DerivedClass();
obj.Display(); // Calls DerivedClass's Display method if overridden

7. Abstract Classes and Interfaces
Use abstract classes when you want to provide some implementation but leave other methods for derived classes to define.
Use interfaces when you only want to define a contract (no implementation).
8. Shadowing vs Overriding
Use the new keyword to hide a base class member in the derived class (not recommended unless necessary).
Code kopieren
public new void Display() { Console.WriteLine("Shadowed"); }

9. Multiple Inheritance
C# does not support multiple inheritance with classes but allows it with interfaces.
10. Performance and Maintainability
Avoid deep inheritance hierarchies as they can make the code harder to understand and maintain.
Ensure proper testing of overridden methods to avoid unexpected behavior.

By keeping these considerations in mind, you can leverage inheritance effectively while maintaining clean and robust code.


----------------------------------------------------------------------------------------

############################################
How constructors can be used in inheritance
############################################


https://www.geeksforgeeks.org/c-sharp/c-sharp-inheritance-in-constructors/
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance



In C#, constructors play a crucial role in inheritance by allowing the initialization of base class members when creating an object of a derived class. Here's how constructors can be used in inheritance:

1. Calling Base Class Constructor

A derived class can explicitly call a base class constructor using the base keyword. This ensures that the base class is properly initialized before the derived class adds its own initialization logic.

Code kopieren
using System;

class BaseClass
{
    public BaseClass(string message)
    {
        Console.WriteLine("Base Constructor: " + message);
    }
}

class DerivedClass : BaseClass
{
    public DerivedClass(string message) : base(message)
    {
        Console.WriteLine("Derived Constructor: " + message);
    }
}

class Program
{
    static void Main()
    {
        DerivedClass obj = new DerivedClass("Hello, Inheritance!");
    }
}


Output:

Code kopieren
Base Constructor: Hello, Inheritance!
Derived Constructor: Hello, Inheritance!

2. Default Constructor in Base Class

If the base class has a parameterless (default) constructor, the derived class can rely on it without explicitly calling base.

Code kopieren
class BaseClass
{
    public BaseClass()
    {
        Console.WriteLine("Base Constructor");
    }
}

class DerivedClass : BaseClass
{
    public DerivedClass()
    {
        Console.WriteLine("Derived Constructor");
    }
}

class Program
{
    static void Main()
    {
        DerivedClass obj = new DerivedClass();
    }
}


Output:

Code kopieren
Base Constructor
Derived Constructor

3. Overloading Constructors in Derived Class

A derived class can define its own constructors and decide whether to call the base class constructor or not.

Code kopieren
class BaseClass
{
    public BaseClass(string message)
    {
        Console.WriteLine("Base Constructor: " + message);
    }
}

class DerivedClass : BaseClass
{
    public DerivedClass(string message) : base(message)
    {
        Console.WriteLine("Derived Constructor: " + message);
    }

    public DerivedClass() : base("Default Message")
    {
        Console.WriteLine("Derived Constructor with Default Message");
    }
}

class Program
{
    static void Main()
    {
        DerivedClass obj1 = new DerivedClass("Custom Message");
        DerivedClass obj2 = new DerivedClass();
    }
}


Output:

Code kopieren
Base Constructor: Custom Message
Derived Constructor: Custom Message
Base Constructor: Default Message
Derived Constructor with Default Message

Key Points:
The base class constructor is always called before the derived class constructor.
If no base keyword is used, the parameterless constructor of the base class is called by default.
Constructors are not inherited, but the base keyword allows derived classes to reuse base class constructors.

This approach ensures proper initialization of both base and derived class members, maintaining the integrity of the object hierarchy.



----------------------------------------------------------------------------------------

##############################################################################
What role does the access modifier protected play in inheritance?
##############################################################################

https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers
https://www.geeksforgeeks.org/c-sharp/access-modifiers-in-c-sharp/




In C#, the protected access modifier plays a crucial role in inheritance by controlling access to class members. Here's how it works:

Key Points:

Access in Derived Classes:

Members marked as protected are accessible within the class where they are declared and in any class that derives from it.
This allows derived classes to reuse and extend the functionality of the base class while keeping the member hidden from external access.

Encapsulation:

protected strikes a balance between private (accessible only within the same class) and public (accessible everywhere). It ensures that sensitive data or methods are not exposed to unrelated classes but are still available to subclasses.

Inheritance Example:

Code kopieren
public class BaseClass
{
    protected string ProtectedMember = "I am protected!";
}

public class DerivedClass : BaseClass
{
    public void ShowProtectedMember()
    {
        Console.WriteLine(ProtectedMember); // Accessible here
    }
}

public class UnrelatedClass
{
    public void TryAccess()
    {
        // BaseClass baseObj = new BaseClass();
        // Console.WriteLine(baseObj.ProtectedMember); // Error: Not accessible
    }
}


Not Accessible Outside the Hierarchy:

Classes that do not inherit from the base class cannot access protected members, even if they create an instance of the base class.

Combination with internal:

You can combine protected with internal (as protected internal) to allow access to derived classes and other classes within the same assembly.

By using protected, you can design classes that are extensible while maintaining a level of encapsulation to protect the integrity of your code.



----------------------------------------------------------------------------------------


internal sealed class Demo: someClass {}

In C#, a sealed class is a class that cannot be inherited. The sealed keyword is used to prevent other classes from deriving from it. This is useful when you want to restrict inheritance for security, performance, or design reasons.

Key Points:
Definition: A sealed class is declared using the sealed keyword.
Purpose:
Prevents unintended inheritance.
Improves performance by allowing certain compiler optimizations.
Enforces a specific design where the class should not be extended.
Usage:
A sealed class cannot act as a base class.
It can still be instantiated like any other class.
Example:
Code kopieren
sealed class MySealedClass
{
    public void DisplayMessage()
    {
        Console.WriteLine("This is a sealed class.");
    }
}

// This will cause a compile-time error:
// class DerivedClass : MySealedClass { }

Sealed Methods:

You can also seal methods in a derived class to prevent further overriding:

Code kopieren
class BaseClass
{
    public virtual void Show()
    {
        Console.WriteLine("Base class method.");
    }
}

class DerivedClass : BaseClass
{
    public sealed override void Show()
    {
        Console.WriteLine("Derived class sealed method.");
    }
}

// Further inheritance cannot override the `Show` method.


By sealing classes or methods, you ensure that your design remains consistent and avoids misuse through unintended inheritance.

-------------------

public Demo(short FieldDemo): base (FieldDemo)

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_04_001.html#dodtp1d1f07d4-0731-4e9c-8de8-d69493f7b393



class building

subclasses
- House (kitchen, mp2, rent)
- Villa (garden,mp2, rent)
- Shop (mp2, lease)
- Restaurant (tables,mp2, lease)
- Office (mp2, utilities, lease)


 { get; protected set; } 



----------------------------------------------------------------------------------------
##########################################################################
csharp How to determine the type of an object-oriented
##########################################################################

https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_04_003.html#dodtp4c233a44-da0a-47ad-a609-aa7472338561
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast
https://www.geeksforgeeks.org/c-sharp/c-sharp-getting-the-type-of-the-current-instance/

In C#, there are several ways to determine the type of an object. Here are three common approaches:

1. Using GetType()

The GetType() method is called on an instance of an object to retrieve its runtime type.

Code kopieren
object obj = "Hello, World!";
Console.WriteLine(obj.GetType()); // Output: System.String

2. Using typeof

The typeof keyword is used to get the type of a compile-time known type. It is often used for comparisons.

Code kopieren
if (obj.GetType() == typeof(string))
{
    Console.WriteLine("The object is a string.");
}

3. Using is Operator

The is operator checks if an object is of a specific type and can also perform pattern matching.

Code kopieren
if (obj is string str)
{
    Console.WriteLine($"The object is a string: {str}");
}


Each method has its use case, so choose the one that best fits your scenario!


----------------------------------------------------------------------------------------
##########################################################################
How can an object be converted to another type
##########################################################################

In C#, you can convert an object to another type using casting or type conversion methods. Here are three common approaches:

1. Explicit Casting

If you know the type of the object at runtime, you can use explicit casting:

Code kopieren
object obj = 42; // Boxed integer
int number = (int)obj; // Explicit cast

Note: This will throw an InvalidCastException if the object is not of the expected type.
2. Using as Keyword

The as keyword attempts to cast an object to a specific type. If the cast fails, it returns null instead of throwing an exception:

Code kopieren
object obj = "Hello, World!";
string text = obj as string;

if (text != null)
{
    Console.WriteLine(text);
}

Note: Works only with reference types or nullable types.
3. Using Convert Class

The Convert class provides methods to convert objects to various types:

Code kopieren
object obj = "123";
int number = Convert.ToInt32(obj);

Console.WriteLine(number); // Output: 123

Note: This is useful for converting between compatible types (e.g., string to int). It throws exceptions if the conversion is invalid.
Additional Tips:
Use is to check the type before casting:
Code kopieren
if (obj is int num)
{
    Console.WriteLine(num);
}

For JSON or complex objects, libraries like JsonConvert (from Newtonsoft.Json) or System.Text.Json can help deserialize objects into specific types.

Always ensure the conversion is valid to avoid runtime errors!



----------------------------------------------------------------------------------------


Examples

using System; 
  
 namespace Demo 
 {   
     class Program 
     { 
         static void Main(string[] args) 
         { 
            Desktop pc = new Desktop();
			Notebook pc2 = new Notebook();	
			new Program().TypUntersuchen(pc);             
         } 
		 
		 public void TypUntersuchen(object pc){
		 	Console.WriteLine(pc.GetType());
		 }
     } 
 }
// ----------------------------- 
internal class Computer { }

internal class Desktop : Computer 
{ 
	public string Gehäuse { get; set; } // z.B. MiniTower, MidiTower, etc. 
} 
internal class Notebook : Computer 
{ 
	public double BildschirmZoll { get; set; }  // z.B. 15.4, 17, etc. 
}


----------------------------------------------------------------------------------------

To retrieve a property or object from another object in C#, you can use Reflection or the dynamic keyword. Below are examples of both approaches:

1. Using Reflection

Reflection allows you to inspect and manipulate an object's metadata at runtime.

Code kopieren
using System;
using System.Reflection;

public class Example
{
    public string Name { get; set; }
    public int Age { get; set; }
}

class Program
{
    static void Main()
    {
        var obj = new Example { Name = "Alice", Age = 25 };

        // Get the value of the "Name" property
        PropertyInfo property = obj.GetType().GetProperty("Name");
        if (property != null)
        {
            var value = property.GetValue(obj);
            Console.WriteLine($"Name: {value}");
        }
    }
}

2. Using the dynamic Keyword

The dynamic keyword allows you to access properties without compile-time type checking.

Code kopieren
using System;

public class Example
{
    public string Name { get; set; }
    public int Age { get; set; }
}

class Program
{
    static void Main()
    {
        dynamic obj = new Example { Name = "Alice", Age = 25 };

        // Access the "Name" property dynamically
        Console.WriteLine($"Name: {obj.Name}");
    }
}

3. Using a Generic Method

If you want a reusable method to extract a property value:

Code kopieren
using System;
using System.Reflection;

public class Example
{
    public string Name { get; set; }
    public int Age { get; set; }
}

class Program
{
    static T GetPropertyValue<T>(object obj, string propertyName)
    {
        var property = obj.GetType().GetProperty(propertyName);
        return property != null ? (T)property.GetValue(obj) : default;
    }

    static void Main()
    {
        var obj = new Example { Name = "Alice", Age = 25 };

        string name = GetPropertyValue<string>(obj, "Name");
        Console.WriteLine($"Name: {name}");
    }
}


Each approach has its use case. Reflection is powerful but slower, while dynamic is simpler but lacks compile-time safety. Use the one that best fits your scenario!




