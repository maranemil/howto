
Variadic function C#

https://en.wikipedia.org/wiki/Variadic_function


public class Summe
{
    public static int sum(params int[] list)
    {
        int result = 0;

        for (int i = 0; i < list.Length; i++)
        {
            result += list[i];
        }

        return result;
    }

    static void Main()
    {
        int a = sum();             // Ergebnis: a = 0
        int b = sum(1);            // Ergebnis: b = 1
        int c = sum(1, 2, 3, 4);   // Ergebnis: c = 10
    }
}



using System;

class Program
{
    static int Foo(int a, int b, params int[] args)
    {
        // Return the sum of the integers in args, ignoring a and b.
        int sum = 0;
        foreach (int i in args)
            sum += i;
        return sum;
    }
        
    static void Main(string[] args)
    {
        Console.WriteLine(Foo(1, 2));  // 0
        Console.WriteLine(Foo(1, 2, 3, 10, 20));  // 33
        int[] manyValues = new int[] { 13, 14, 15 };
        Console.WriteLine(Foo(1, 2, manyValues));  // 42
    }
}





PHP

function sum(...$nums): int
{
    return array_sum($nums);
}

echo sum(1, 2, 3); // 6


Python


def foo(a, b, *args):
    print(args)  # args is a tuple (immutable sequence).

foo(1, 2) # ()
foo(1, 2, 3) # (3,)
foo(1, 2, 3, "hello") # (3, "hello")

JS

function sum(...numbers) {
    return numbers.reduce((a, b) => a + b, 0);
}

console.log(sum(1, 2, 3)); // 6
console.log(sum(3, 2));    // 5
console.log(sum());        // 0

-----------------------------

Hier ist ein einfacher Rechner in C#, der bitweise Operatoren wie AND, OR, XOR, NOT und Shift-Operationen (<<, >>) unterstÃ¼tzt. Du kannst ihn anpassen, um verschiedene Werte und Operationen zu testen.

Code kopieren
using System;

class BitwiseCalculator
{
    static void Main()
    {
        Console.WriteLine("Bitweise Operatoren Rechner");
        Console.WriteLine("WÃ¤hle eine Operation:");
        Console.WriteLine("1. AND (&)");
        Console.WriteLine("2. OR (|)");
        Console.WriteLine("3. XOR (^)");
        Console.WriteLine("4. NOT (~)");
        Console.WriteLine("5. Left Shift (<<)");
        Console.WriteLine("6. Right Shift (>>)");

        int choice = int.Parse(Console.ReadLine());

        if (choice >= 1 && choice <= 3)
        {
            Console.Write("Gib die erste Zahl ein: ");
            int num1 = int.Parse(Console.ReadLine());

            Console.Write("Gib die zweite Zahl ein: ");
            int num2 = int.Parse(Console.ReadLine());

            int result = choice switch
            {
                1 => num1 & num2,
                2 => num1 | num2,
                3 => num1 ^ num2,
                _ => 0
            };

            Console.WriteLine($"Ergebnis: {result}");
        }
        else if (choice == 4)
        {
            Console.Write("Gib eine Zahl ein: ");
            int num = int.Parse(Console.ReadLine());

            int result = ~num;
            Console.WriteLine($"Ergebnis: {result}");
        }
        else if (choice == 5 || choice == 6)
        {
            Console.Write("Gib die Zahl ein: ");
            int num = int.Parse(Console.ReadLine());

            Console.Write("Gib die Anzahl der Verschiebungen ein: ");
            int shifts = int.Parse(Console.ReadLine());

            int result = choice == 5 ? num << shifts : num >> shifts;
            Console.WriteLine($"Ergebnis: {result}");
        }
        else
        {
            Console.WriteLine("UngÃ¼ltige Auswahl!");
        }
    }
}

Wie es funktioniert:
Der Benutzer wÃ¤hlt eine Operation aus.
Je nach Auswahl werden Eingaben abgefragt (eine oder zwei Zahlen).
Die entsprechende bitweise Operation wird ausgefÃ¼hrt.
Das Ergebnis wird angezeigt.

Du kannst diesen Code in einer C#-IDE wie Visual Studio oder einem Online-Compiler ausfÃ¼hren. Viel SpaÃŸ beim Experimentieren! ðŸ˜Š


---------
https://www.tutorialspoint.com/csharp/csharp_bitwise_operators.htm
https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators
https://www.tutorialspoint.com/csharp/csharp_operators.htm
https://www.tutorialspoint.com/csharp/csharp_bitwise_operators.htm

Here are some examples of bitwise operators in C#:

1. Bitwise AND (&)
Code kopieren
int a = 5;  // Binary: 0101
int b = 3;  // Binary: 0011
int result = a & b;  // Binary: 0001 (Decimal: 1)
Console.WriteLine(result);  // Output: 1

2. Bitwise OR (|)
Code kopieren
int a = 5;  // Binary: 0101
int b = 3;  // Binary: 0011
int result = a | b;  // Binary: 0111 (Decimal: 7)
Console.WriteLine(result);  // Output: 7

3. Bitwise XOR (^)
Code kopieren
int a = 5;  // Binary: 0101
int b = 3;  // Binary: 0011
int result = a ^ b;  // Binary: 0110 (Decimal: 6)
Console.WriteLine(result);  // Output: 6

4. Bitwise NOT (~)
Code kopieren
int a = 5;  // Binary: 0101
int result = ~a;  // Binary: 1010 (Two's complement: -6)
Console.WriteLine(result);  // Output: -6

5. Left Shift (<<)
Code kopieren
int a = 5;  // Binary: 0101
int result = a << 1;  // Binary: 1010 (Decimal: 10)
Console.WriteLine(result);  // Output: 10

6. Right Shift (>>)
Code kopieren
int a = 5;  // Binary: 0101
int result = a >> 1;  // Binary: 0010 (Decimal: 2)
Console.WriteLine(result);  // Output: 2


These operators are commonly used for low-level programming tasks, such as manipulating individual bits in data. Let me know if you'd like further clarification! ðŸ˜Š


------------

using System;  

public class Programm
    {
		public static void Main(string[] args)
		{  
			bool end = false; 
			do 
			{ 
				bool ok = Simulation.DataGen(out byte response); 
				Console.WriteLine($"Response: {response}"); 
				Console.WriteLine("End with [Esc]"); 
				end = Console.ReadKey(true).Key == ConsoleKey.Escape; 
			}
			while (!end); 
		}
}

static class Simulation 
{ 
	static Random random = new Random(); 
	public static bool DataGen(out byte response) 
	{ 
		bool ok = true; 
		response = 0; 
		try{
			int datenumber = random.Next(0, 2); 
			Console.WriteLine(datenumber);
			string responseString = datenumber < 2 ? null : datenumber < 4 ? "???" : datenumber < 6 ? "1000" : "222"; 			
			response = byte.Parse(responseString); 
		}
		catch(Exception e){
			Console.WriteLine($"Error: {e.Message}");
			Console.WriteLine($"Error: {e.HResult}");
			Console.WriteLine($"Error: {e.GetType}");
            //throw;
		}
		return ok; 
	} 
} 
  
 /*namespace Demo 
 {   
     public interface IControl
	{
		void Paint() => Console.WriteLine("Default Paint method");
	}
	public class SampleClass : IControl
	{
		// Paint() is inherited from IControl.
	}
		
	public class Program
    {
		public static void Main(string[] args)
		{  
			System.Console.WriteLine("----------");        
		  var sample = new SampleClass();
			//sample.Paint();// "Paint" isn't accessible.
			var control = sample as IControl;
			control.Paint();	
		}
   } 
 }*/
 

