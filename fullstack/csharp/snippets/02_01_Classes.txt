In C#, fields and properties are both used to store data in a class, but they serve different purposes and have distinct characteristics. Here's a concise comparison:

1. Field

Definition: A field is a variable declared directly in a class or struct.

Access: Typically private, but can be public (not recommended for encapsulation).

Usage: Used for internal data storage.

Example:

Code kopieren
public class Person
{
    private string name; // Field
}


Key Points:

Directly stores data.
No additional logic when getting or setting values.
Less flexible and can break encapsulation if made public.
2. Property

Definition: A property provides a controlled way to access or modify a field.

Access: Can include logic in get and set accessors.

Usage: Used to encapsulate fields and provide controlled access.

Example:

Code kopieren
public class Person
{
    private string name; // Backing field

    public string Name // Property
    {
        get { return name; }
        set { name = value; }
    }
}


Key Points:

Encapsulates fields with get and set accessors.
Allows validation, transformation, or additional logic.
Supports auto-implemented properties:
Code kopieren
public string Name { get; set; } // No explicit backing field needed

When to Use
Use fields for private/internal data that doesn't require external access or additional logic.
Use properties to expose data with controlled access, validation, or logic.

By using properties, you adhere to the principle of encapsulation, which is a cornerstone of object-oriented programming.


###############################


In PHP, the terms field and property are often used interchangeably, but they generally refer to the same concept: class variables. However, there are subtle distinctions in terminology depending on context or convention:

1. Property (Preferred Term in PHP)
In PHP, property is the official term used to describe variables that belong to a class.
Properties are defined within a class and can have visibility modifiers (public, protected, private).
Example:
Code kopieren
class Example {
    public $property1; // Public property
    private $property2; // Private property
}

2. Field (Less Common in PHP)
The term field is less commonly used in PHP but is more prevalent in other programming languages like Java or C#.
In PHP, "field" might be informally used to refer to class variables, but it is not the official terminology.
Example (same as above, but referred to as "fields" informally):
Code kopieren
class Example {
    public $field1; // Public field
    private $field2; // Private field
}

Key Difference
Property is the correct and standard term in PHP documentation and community discussions.
Field is more of a generic programming term and might be used by developers coming from other languages.

For clarity and consistency, it's best to stick with property when discussing PHP class variables.


##############################

In C#, fields and properties are used to store data in a class, but they serve slightly different purposes. Fields are variables that hold data directly, while properties provide controlled access to the data, often with additional logic.

Here’s an example to illustrate the difference:

Example: Field vs Property
Code kopieren
using System;

public class Person
{
    // Field: Directly stores data
    public string name; // No control over access

    // Property: Provides controlled access to data
    private int _age; // Backing field for the property

    public int Age
    {
        get { return _age; } // Getter
        set
        {
            if (value < 0)
            {
                throw new ArgumentException("Age cannot be negative.");
            }
            _age = value; // Setter with validation
        }
    }
}

public class Program
{
    public static void Main()
    {
        Person person = new Person();

        // Using the field
        person.name = "Alice"; // No validation or control
        Console.WriteLine($"Name: {person.name}");

        // Using the property
        try
        {
            person.Age = 25; // Valid value
            Console.WriteLine($"Age: {person.Age}");

            person.Age = -5; // Invalid value, throws exception
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}

Key Differences:

Field:

Directly stores data.
No encapsulation or validation.
Example: public string name;

Property:

Provides controlled access to a private field.
Can include logic (e.g., validation) in get and set.
Example:
Code kopieren
public int Age
{
    get { return _age; }
    set { _age = value; }
}

When to Use:
Use fields for private/internal data that doesn't require validation or additional logic.
Use properties for public access to data, especially when you need to enforce rules or encapsulate logic.

--------------------------------------------------------------------------

bank konto cli app idee

crud flow
list users

user  + addr
account + balance

--------------------------------------------------------------------------

Thonny
Python IDE for beginners
https://thonny.org/

Snap
sudo snap install thonny

Debian, Raspbian, Ubuntu, Mint and others
sudo apt install thonny


--------------------------------------------------------------------------

https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/keywords/access-modifiers

public
protected
internal
private
file


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
	public class Program
	{
		public static void Main(string[] args)
		{
			Console.WriteLine("Hello, World!");
	    Computer comp1 = new Computer();
	    comp1.pc = "mac";
	    comp1.Version = 3;
	    Console.WriteLine(comp1.pc);
	    Console.WriteLine(comp1.Version);
		}
	}
	
	
	internal class Computer
	{
	  public string pc;
	  private  int _version;
	  public int Version
	  {
	    get { return _version; } // Getter
      set { _version = value; } // Setter
	  }
	}
	
}

internal: Zugriff nur innerhalb dieser Assembly möglich. 
public:   Zugriff auch von außerhalb möglich (wichtig bei Projekttyp Klassenbibliothek).

----------------------------------------------------------

Here's an example of how to use a partial class in C#. Partial classes allow you to split the definition of a class across multiple files, which can be useful for organizing code in larger projects.

File 1: Person.Part1.cs
Code kopieren
// File: Person.Part1.cs
public partial class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }

    public void DisplayFullName()
    {
        Console.WriteLine($"{FirstName} {LastName}");
    }
}

File 2: Person.Part2.cs
Code kopieren
// File: Person.Part2.cs
public partial class Person
{
    public int Age { get; set; }

    public void DisplayAge()
    {
        Console.WriteLine($"Age: {Age}");
    }
}

Main Program: Program.cs
Code kopieren
// File: Program.cs
using System;

class Program
{
    static void Main()
    {
        Person person = new Person
        {
            FirstName = "John",
            LastName = "Doe",
            Age = 30
        };

        person.DisplayFullName(); // Output: John Doe
        person.DisplayAge();      // Output: Age: 30
    }
}



Key Points:
The partial keyword is used to indicate that the class definition is split across multiple files.
All parts of the partial class must be in the same namespace and assembly.
When compiled, the parts are combined into a single class.

This approach is particularly useful when working with auto-generated code or when you want to separate concerns in a large class.


----------------------------------------------------------
Objektreferenzen


Here’s a simple example in C# demonstrating the use of the null literal:

Code kopieren
using System;

class Program
{
    static void Main()
    {
        // Example 1: Assigning null to a reference type
        string name = null;
        Console.WriteLine(name == null ? "Name is null" : name);

        // Example 2: Assigning null to a nullable value type
        int? age = null;
        Console.WriteLine(age.HasValue ? $"Age: {age}" : "Age is null");

        // Example 3: Null check before accessing a reference
        object obj = null;
        if (obj == null)
        {
            Console.WriteLine("Object is null");
        }
    }
}

Explanation:
Reference Type (string): The null literal is used to indicate that the variable does not reference any object.
Nullable Value Type (int?): Nullable types allow value types to hold null.
Null Check: Always check for null before accessing a reference to avoid runtime exceptions like NullReferenceException.

----------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{
	public class Program
	{
		public static void Main(string[] args)
		{
			Console.WriteLine("Hello, World!");
	    Computer comp1 = new Computer();
	    comp1.pc = "mac";
	    comp1.Version = 3;
	    comp1.HarddriveGB = 30;
	    Console.WriteLine(comp1.pc);
	    Console.WriteLine(comp1.Version);
	    Console.WriteLine(comp1.HarddriveGB);
		}
	}
	
	
	internal class Computer
	{
	  public string pc;
	  private  int _version;
	  private int hddGB = 2000;
	  public int HarddriveGB
	  {
	    get { return hddGB; } // Getter
      set { hddGB = value; } // Setter
	  }
	  
	  public int Version
	  {
	    get { return _version; } // Getter
      set { _version = value; } // Setter
	  }
	}
	
}

----------------------------------------------------------


Here’s a simple example of a C# program that demonstrates how to handle command-line parameters:

Code kopieren
using System;

class Program
{
    static void Main(string[] args)
    {
        if (args.Length == 0)
        {
            Console.WriteLine("No command-line arguments provided.");
            Console.WriteLine("Usage: dotnet run <arg1> <arg2> ...");
        }
        else
        {
            Console.WriteLine("Command-line arguments received:");
            for (int i = 0; i < args.Length; i++)
            {
                Console.WriteLine($"Argument {i + 1}: {args[i]}");
            }
        }
    }
}

How it works:
args: The args parameter in the Main method is an array of strings that contains the command-line arguments.
Check for arguments: If no arguments are passed, it displays a usage message.
Iterate through arguments: If arguments are provided, it loops through and prints each one.
Example Usage:
Run the program with arguments:
Code kopieren
dotnet run Hello World 123

Output:
Code kopieren
Command-line arguments received:
Argument 1: Hello
Argument 2: World
Argument 3: 123


This is a great starting point for building CLI tools in C#!

----------------------------------------------------------


Here’s a simple example of a C# program that takes command-line inputs, processes them, and outputs the result. This program calculates the sum of two numbers provided as command-line arguments.

Code kopieren
using System;

class Program
{
    static void Main(string[] args)
    {
        // Check if the correct number of arguments is provided
        if (args.Length != 2)
        {
            Console.WriteLine("Usage: dotnet run <number1> <number2>");
            return;
        }

        try
        {
            // Parse the command-line arguments to integers
            int number1 = int.Parse(args[0]);
            int number2 = int.Parse(args[1]);

            // Calculate the sum
            int sum = number1 + number2;

            // Output the result
            Console.WriteLine($"The sum of {number1} and {number2} is {sum}.");
        }
        catch (FormatException)
        {
            Console.WriteLine("Please provide valid integers as inputs.");
        }
    }
}

How to Run:
Save the code in a file, e.g., Program.cs.
Compile and run it using the .NET CLI:
Code kopieren
dotnet run 5 10

Output:
Code kopieren
The sum of 5 and 10 is 15.


This example is straightforward and demonstrates how to handle command-line inputs, validate them, and provide meaningful feedback.


----------------------------------------------------------

Here’s a simple example of a C# program that demonstrates how to use Console.ReadLine() to take user input via the command line interface (CLI):

Code kopieren
using System;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Welcome to the CLI Example!");
        
        // Prompt the user for their name
        Console.Write("Please enter your name: ");
        string name = Console.ReadLine();

        // Prompt the user for their age
        Console.Write("Please enter your age: ");
        string ageInput = Console.ReadLine();

        // Convert age to an integer (with basic error handling)
        if (int.TryParse(ageInput, out int age))
        {
            Console.WriteLine($"\nHello, {name}! You are {age} years old.");
        }
        else
        {
            Console.WriteLine("\nInvalid age entered. Please enter a valid number next time.");
        }

        Console.WriteLine("\nPress any key to exit...");
        Console.ReadKey();
    }
}

Explanation:
Console.WriteLine: Prints messages to the console.
Console.ReadLine: Reads a line of input from the user.
int.TryParse: Safely converts a string to an integer, avoiding exceptions if the input is invalid.
String Interpolation: $"Hello, {name}!" is used to embed variables directly into strings.

This program is interactive and user-friendly, making it a great starting point for CLI-based applications!

----------------------------------------------------------

Fields and methods inside classes are often referred to as "Class Members":

// The class
class MyClass
{
  // Class members
  string color = "red";        // field
  int maxSpeed = 200;          // field
  public void fullThrottle()   // method
  {
    Console.WriteLine("The car is going as fast as it can!");
  }
}



https://www.cpp-tutor.de/part2/klassen.html
https://www.w3schools.com/cs/cs_class_members.php







