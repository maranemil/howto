#############################################
Statische Klassenkomponenten
#############################################


Code kopieren
using System;

class OuterClass
{
    public static int StaticVar = 42;

    public class InnerClass
    {
        public void Display()
        {
            Console.WriteLine(StaticVar);
        }
    }
}

class Program
{
    static void Main()
    {
        OuterClass.InnerClass innerObj = new OuterClass.InnerClass();
        innerObj.Display();
    }
}

-----------------------------------------

In C#, you can declare static members inside a nested (inner) class, but the nested class itself can also be declared as static. Here's a breakdown of how this works:

1. Static Members in a Nested Class

A nested class can contain static fields, properties, methods, or other members. These members are shared across all instances of the nested class.

Code kopieren
public class OuterClass
{
    public class InnerClass
    {
        public static int StaticValue = 42;

        public static void DisplayMessage()
        {
            Console.WriteLine("Hello from the static method in InnerClass!");
        }
    }
}

// Usage
Console.WriteLine(OuterClass.InnerClass.StaticValue);
OuterClass.InnerClass.DisplayMessage();

2. Static Nested Class

A nested class itself can be declared as static. This means:

It cannot have instance members.
It can only contain static members.
It cannot be instantiated.
Code kopieren
public class OuterClass
{
    public static class StaticInnerClass
    {
        public static string StaticProperty { get; set; } = "Static Inner Class Property";

        public static void PrintMessage()
        {
            Console.WriteLine("Hello from the static inner class!");
        }
    }
}

// Usage
Console.WriteLine(OuterClass.StaticInnerClass.StaticProperty);
OuterClass.StaticInnerClass.PrintMessage();

3. When to Use Static Nested Classes

Static nested classes are useful when:

The nested class is tightly coupled to the outer class.
You want to group utility methods or constants related to the outer class.
You don't need to create instances of the nested class.

By using static declarations effectively, you can improve code organization and encapsulation.

-----------------------------------------

In C#, a static class is a special type of class that cannot be instantiated and is used to group related static members (methods, properties, fields, etc.). Here's an overview:

Key Features of Static Classes:
No Instantiation: You cannot create an object of a static class using the new keyword.
Static Members Only: All members of a static class must be static.
Utility Purpose: Often used for utility or helper methods that don't require object state.
Performance: No need to create an instance, which can simplify and speed up implementation.
Syntax:
Code kopieren
public static class Utility
{
    public static void PrintMessage(string message)
    {
        Console.WriteLine(message);
    }

    public static int Add(int a, int b)
    {
        return a + b;
    }
}

Usage:
Code kopieren
class Program
{
    static void Main()
    {
        Utility.PrintMessage("Hello, World!");
        int result = Utility.Add(5, 10);
        Console.WriteLine($"Result: {result}");
    }
}

When to Use:
For grouping methods that don't require instance data (e.g., Math class in .NET).
For global constants or configuration values.
To organize code logically without creating unnecessary objects.
Limitations:
Cannot inherit from another class or be inherited.
Cannot have instance constructors or destructors.

Static classes are a great way to keep your code clean and organized when dealing with shared functionality!


-----------------------------------------



https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/classes
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members
https://www.geeksforgeeks.org/c-sharp/nested-classes-in-c-sharp/
https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_03_009.html#dodtp409e3500-504b-45b7-b5a4-80baf1d23349



https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members
https://www.geeksforgeeks.org/c-sharp/c-sharp-static-class/
https://dotnettutorials.net/lesson/static-class-in-csharp/
https://www.tutorialsteacher.com/csharp/csharp-static
https://www.c-sharpcorner.com/article/working-with-static-in-c-sharp/
https://code-maze.com/static-classes-csharp/


-----------------------------------------

- static class can only contain static data members and static methods
- you cannot inherit a static class from another class.
- In static class, you are not allowed to create objects.
- The data members of static class can be directly accessed by its class name.
- Static class always contains static members
- Static class does not contain an instance constructor.
- Static class cannot inherit from another class.


STATISCHE KONSTRUKTOREN UND METHODEN 




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Reflection;
using System.ComponentModel;
using System.Collections;

namespace HelloWorld
{
	public class Program
	{
		public static void Main(string[] args)
		{
			Console.WriteLine("Hello, World!");
       
      Computer computer = new Computer();
      computer.Manufacturer = "Asus";
      computer.MemoryGB = 8;
      Computer.computerliste.Add(1, computer.Manufacturer);
      Computer.computerliste.Add(2, computer.Manufacturer);
      //computer.hddGB = 800;
      Console.WriteLine(computer.Manufacturer + " as Manufacturer");
      Console.WriteLine(computer.MemoryGB + " as MemoryGB");
      Console.WriteLine(computer.hddGB  + " as hddGB");
      Console.WriteLine($"Computer has {computer.MemoryGB} Memory and is made by {computer.Manufacturer}");
      computer.FormatHDD();
      Console.WriteLine($"-------------------------------------------------");
      Console.WriteLine("Count Hashtable: " + Computer.Anzahl);
      Console.WriteLine($"-------------------------------------------------");
      Type type = computer.GetType();
      PropertyInfo[] properties = type.GetProperties();
      foreach (var property in properties)
      {
          Console.WriteLine($"{property.Name}: {property.GetValue(computer)}");
      }
      Console.WriteLine($"-------------------------------------------------");
      foreach(PropertyDescriptor descriptor in TypeDescriptor.GetProperties(computer)) {
        string name=descriptor.Name;
        object value=descriptor.GetValue(computer);
        Console.WriteLine("{0}={1}",name,value);
      }
		}
	}
	



  internal class Computer 
  {
    

    // Konstruktor 
    static Computer() 
    { 
      computerliste = new Hashtable(); 
    }
    
	// Attribute Felder
    public static Hashtable computerliste; 
    
	//  Eigenschaften/properties
    static public int Anzahl 
    { 
      get { return computerliste.Count; } 
    }
    
    // ----------- 
    public string Manufacturer; 
    private int _MemoryGB; 
    public int hddGB;
    
    public Computer(int hddGB = 1000){
      //hddGB = 4000;
      this.hddGB = hddGB; 
      Console.WriteLine($"Der Computer hat Festplatte mit {this.hddGB} GB"); 
    }
   
    // props
    public int MemoryGB 
    { 
      get 
      { 
      return _MemoryGB; 
      } 
      set 
      { 
        if (value >= 0) _MemoryGB = value; 
        else Console.WriteLine($"cannot be negativ!"); 
      } 
    } 
    public short Voltage { get; private set; } = 22; // Spannung
    public void FormatHDD(){
      Console.WriteLine($"formating HDD ....");
    }
    
    		// ------------------------ 
   
    
    
  }
}




Output:

Hello, World!
Der Computer hat Festplatte mit 1000 GB
Asus as Manufacturer
8 as MemoryGB
1000 as hddGB
Computer has 8 Memory and is made by Asus
formating HDD ....
-------------------------------------------------
Count Hashtable: 2
Anzahl: 2
MemoryGB: 8
Voltage: 22
-------------------------------------------------
MemoryGB=8
Voltage=22




##############################################
Namespaces
##############################################

Namensräume werden dazu verwendet, Konflikte bei der Namensvergabe zu verhindern. Graphisch sind Namensräume mit Bäumen äquivalent, d. h., sie haben eine Wurzel (einen festen, definierten Ausgangspunkt), Knoten (Verzeichnisse) und Blätter (Objekte).

https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/namespaces
https://openbook.rheinwerk-verlag.de/visual_csharp_2012/1997_03_010.html#dodtpd01eb7ee-ad3f-4b5c-82dc-174b8a0260ac



C# programs are organized using namespaces. Namespaces are used both as an “internal” organization system for a program, and as an “external” organization system—a way of presenting program elements that are exposed to other programs.

Der Namensraum (englisch namespace) ist ein Begriff aus der Programmierung. Dabei werden – vor allem bei der objektorientierten Programmierung – die Namen für Objekte in einer Art Baumstruktur angeordnet und über entsprechende Pfadnamen eindeutig angesprochen.


Access by using Direktive or vollqualifizierter Name


System.Console.WriteLine("Hallo Welt");


using System;
Console.WriteLine("Hallo Welt");


namespace N1.N2
{
    class A {}
    class B {}
}

is semantically equivalent to

namespace N1
{
    namespace N2
    {
        class A {}
        class B {}
    }
}

namespace N1.N2
{
    class A {}
}

namespace N1.N2
{
    class B {}
}


##############################################
Strukturen 
##############################################

Ein Strukturtyp (oder struct type) ist ein Werttyp, der Daten und zugehörige Funktionen kapseln kann. Verwenden Sie das struct -Schlüsselwort, um einen Strukturtyp zu definieren: public Coords(double x, double y) X = x; Y = y; public double X { get; } public double Y { get; }


https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/language-specification/structs
https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/builtin-types/struct
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/structs
https://learn.microsoft.com/de-de/dotnet/standard/design-guidelines/choosing-between-class-and-struct
https://w3schools.tech/de/tutorial/csharp/csharp_struct



Hier ist der Hauptunterschied zwischen Struktur und Klasse in C++: Eine Struktur ist ein benutzerdefinierter Datentyp, der zusammengehörige Variablen gruppiert. Eine Klasse ist ein benutzerdefinierter Datentyp, der als Blaupause für Objekte dient. Deklariert mit dem struct Stichwort.

-------------

In C# gibt es einige wesentliche Unterschiede zwischen Strukturen (structs) und Klassen (classes), die sich auf ihre Verwendung und ihr Verhalten auswirken. Hier sind die wichtigsten Punkte:

1. Werttyp vs. Referenztyp
Strukturen sind Werttypen: Sie werden direkt auf dem Stack gespeichert und enthalten den tatsächlichen Wert.
Klassen sind Referenztypen: Sie werden auf dem Heap gespeichert, und Variablen enthalten nur einen Verweis auf den Speicherort.

2. Speicherort
Strukturen werden inline gespeichert, d.h., sie existieren dort, wo sie definiert sind (z. B. in einem Array oder einer Variable).
Klassen werden auf dem Heap gespeichert, und der Garbage Collector verwaltet ihren Speicher.

3. Standardmäßiges Verhalten
Strukturen werden standardmäßig by value (per Wert) übergeben, was bedeutet, dass eine Kopie erstellt wird.
Klassen werden standardmäßig by reference (per Referenz) übergeben, was bedeutet, dass Änderungen an der Referenz auch das Original beeinflussen.

4. Vererbung
Strukturen unterstützen keine Vererbung (außer von System.ValueType).
Klassen unterstützen vollständige Vererbung und Polymorphie.

5. Konstruktoren
Strukturen haben keinen Standardkonstruktor (außer dem impliziten Standardkonstruktor, der alle Felder auf Standardwerte setzt).
Klassen können benutzerdefinierte Konstruktoren mit beliebigen Parametern haben.

6. Performance
Strukturen sind in der Regel effizienter für kleine, unveränderliche Datentypen, da sie weniger Speicher-Overhead haben.
Klassen sind besser geeignet für komplexe Objekte oder solche, die häufig geändert werden.
Wann sollte man was verwenden?
Strukturen eignen sich für kleine, einfache Datentypen, die unveränderlich sind (z. B. Point, DateTime).
Klassen sind ideal für komplexere Objekte, die veränderlich sind oder Vererbung erfordern.

Ein Beispiel zur Veranschaulichung:

Code kopieren
// Struktur
struct Point
{
    public int X;
    public int Y;
}

// Klasse
class Circle
{
    public int Radius;
    public string Color;
}


Zusammengefasst: Der entscheidende Unterschied liegt in der Art, wie Speicher verwaltet wird und wie die Typen sich verhalten (Wert- vs. Referenztyp).


-------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HelloWorld
{	
	struct Typenschild
	{
		public string Hersteller;		
		
		public Typenschild(string Hersteller){
			this.Hersteller = Hersteller;	
		}		
	}	
	
	public class Program
	{		
		public static void Main(string[] args)
		{
			Console.WriteLine("Hello, World!"); 
			Typenschild typenschild = new Typenschild();
			typenschild.Hersteller = "ASUS";
			Console.WriteLine($"typenschild: {typenschild.Hersteller}");
		}
		public void Drucken(){
			
		}
	}	 
}



--------------

using System; 
  
 namespace HelloWorld 
 { 
     struct Name 
     { 
         public string Vorname; 
         public string Nachname; 
     } 
  
     class Person 
     { 
         //public Name Name { get; set; } 
		private Name _Name;          
		public Name Name          
		{
			get { return _Name; }
			set { _Name = value; } 
		} 
		public string Vorname { set { _Name.Vorname = value; } } 
		public string Nachname { set { _Name.Nachname = value; } } 
  
         public Person(string vorname, string nachname) 
         { 
             Name = new Name { Vorname = vorname, Nachname = nachname }; 
	     } 
     } 
  
     class Program 
     { 
         static void Main(string[] args) 
         { 
             Person ich = new Person("Thomas", "Meyer"); 
             Console.WriteLine($"Ich bin {ich.Name.Vorname} {ich.Name.Nachname}"); 
             ich.Vorname = "Max";   
             Console.ReadLine(); 
         } 
     } 
 } 
 
 
 
 















