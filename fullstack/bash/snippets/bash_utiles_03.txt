##########################
linux terminal colors bash
##########################


https://dev.to/ifenna__/adding-colors-to-bash-scripts-48g4
https://misc.flogisoft.com/bash/tip_colors_and_formatting
https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux

# Reset
Color_Off='\033[0m'       # Text Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[30m'        # Black
Red='\e[31m'          # Red
Green='\e[32m'        # Green
Yellow='\e[33m'       # Yellow
Blue='\e[34m'         # Blue
Purple='\e[35m'       # Purple
Cyan='\e[36m'         # Cyan
White='\e[37m'        # White


echo -e "\e[32mRed text\e[0m"

##########################
linux bash check file
##########################

https://linuxize.com/post/bash-check-if-file-exists/
https://linuxhint.com/check-if-a-file-exists-in-bash/

--------------------------------
---- Check File Exist
--------------------------------

FILE=/etc/resolv.conf
if test -f "$FILE"; then
    echo "$FILE exists."
fi

FILE=/etc/resolv.conf
if [ -f "$FILE" ]; then
    echo "$FILE exists."
fi

FILE=/etc/resolv.conf
if [[ -f "$FILE" ]]; then
    echo "$FILE exists."
fi

FILE=/etc/resolv.conf
if [ -f "$FILE" ]; then
    echo "$FILE exists."
else
    echo "$FILE does not exist."
fi

# inline check

test -f /etc/resolv.conf && echo "$FILE exists."
[ -f /etc/resolv.conf ] && echo "$FILE exists."
[[ -f /etc/resolv.conf ]] && echo "$FILE exists."
[ -f /etc/resolv.conf ] && { echo "$FILE exist."; cp "$FILE" /tmp/; }
[ -f /etc/resolv.conf ] && echo "$FILE exist." || echo "$FILE does not exist."

--------------------------------
---- Check if Directory Exist
--------------------------------

FILE=/etc/docker
if [ -d "$FILE" ]; then
    echo "$FILE is a directory."
fi

[ -d /etc/docker ] && echo "$FILE is a directory."

--------------------------------
---- Check if File does Not Exist
--------------------------------

FILE=/etc/docker
if [ ! -f "$FILE" ]; then
    echo "$FILE does not exist."
fi

[ ! -f /etc/docker ] && echo "$FILE does not exist."

--------------------------------
---- Check if Multiple Files Exist
--------------------------------

if [ -f /etc/resolv.conf -a -f /etc/hosts ]; then
    echo "Both files exist."
fi

if [[ -f /etc/resolv.conf && -f /etc/hosts ]]; then
    echo "Both files exist."
fi

# inline

[ -f /etc/resolv.conf -a -f /etc/hosts ] && echo "Both files exist."
[[ -f /etc/resolv.conf && -f /etc/hosts ]] && echo "Both files exist."

........

#!/bin/bash
filename=testfile
if [[ -f "$filename" ]];
then
    echo "$filename has found."
else
    echo "$filename has not been found"
fi


#!/bin/bash
dir11=testDir
if [ -d "$dir11" ]
then
echo "Directory has found"
else
   echo "Directory has not been found"
fi

--------------------------------
# By entering the file name in the terminal
--------------------------------

#!/bin/bash
echo "type your directory name."
read Dir1
if [ -d "Dir1" ]
then
echo "directory has been found"
else
   echo "directory has not found"
fi

--------------------------------
# inline
--------------------------------

test -f myfile.txt && echo "file has been found"
[ -f myfile.txt ] && echo "$file has been found."
[[ -f myfile.txt ]] && echo "$file has been found."
[[ -d testDir ]] && echo "directory does exist"
[ -d testDir ] && echo "directory does exist"

--------------------------------
Checking multiple files/Directories:
--------------------------------

#!/bin/bash
if [ -f new_file.txt -a -f newfile.txt ]; then
    echo "Both files exist."
fi

#!/bin/bash
if [[ -f new_file.txt && -f newfile.txt ]]; then
    echo "Both files exist."
fi


########################################
Replacing a Substring With Another String in Bash
########################################

https://linuxhandbook.com/replace-string-bash/
https://stackoverflow.com/questions/13210880/replace-one-substring-for-another-string-in-shell-script
https://linuxhint.com/replace_string_in_file_bash/

result=$(echo "$firstString" | sed "s/Suzi/$secondString/")
result=$(echo "$firstString" | sed "s/Suzi/$secondString/g")

# replace .. with .

#!/bin/bash
FILE_ORG=../some/file.pdf
FILE=$(echo $FILE_ORG | sed "s/.././")

###############################################
multiple makefiles in same directory
###############################################

https://stackoverflow.com/questions/12057852/multiple-makefiles-in-one-directory
https://stackoverflow.com/questions/51019790/generate-make-file?noredirect=1&lq=1
https://stackoverflow.com/questions/54753/tool-for-debugging-makefiles?rq=1
https://www.math.colostate.edu/~yzhou/computer/writemakefile.html
https://www.gnu.org/software/make/manual/html_node/Makefile-Names.html
https://uchicago-cs.github.io/cmsc22000/hw/hw3.html


give sensible names to the files like makefile.win and makefile.nix and use them:

make -f makefile.win
make -f makefile.nix

or have a Makefile that contains:

win:
  make -f makefile.win

nix:
  make -f makefile.nix

and use make win or make nix

 ...

make -f somename.mk
make -f Makefile.project


GNUmakefile, Makefile, makefile.


example Makefile
------------------------
FILE = test.txt

all: gen-file

.PHONY: clean all

gen-file:
    touch $(FILE)

clean:
    rm $(FILE)

---

make clean
make


#################################################################
Bash function to find newest file matching pattern
#################################################################

https://stackoverflow.com/questions/5885934/bash-function-to-find-newest-file-matching-pattern
https://www.baeldung.com/linux/get-recent-file-in-directory
https://askubuntu.com/questions/61179/find-the-latest-file-by-modified-date
https://superuser.com/questions/687523/get-the-last-file-name-in-a-variable-in-bash
https://unix.stackexchange.com/questions/282901/how-can-i-find-the-newest-file-in-a-directory-that-contains-a-certain-string
https://gist.github.com/brwyatt/c21a888d79927cb476a4


ls -t b2* | head -1
ls -t | head -1
ls -tp | grep -v /$ | head -1

var=$(ls | sort -V | tail -n 1)
latest=$(ls -tr | tail -n 1)
latest=$(ls | sort -n | tail -n 1)

unset -v latest
for file in "$dir"/*; do
  [[ $file -nt $latest ]] && latest=$file
done



find /path -type f -exec stat -c "%y %n" {} + | sort -r | head
find /path -printf '%T+ %p\n' | sort -r | head

find . -name "my-pattern" -print0 |    xargs -r -0 ls -1 -t |    head -1

find $DIR -type f -printf '%T+ %p\n' | sort -r | head -n 1 | cut -d' ' -f2
find ~/Downloads -type f -printf '%T+ %p\n' | sort -r | head -n 1 | cut -d' ' -f2
stat -f "%m%t%N" b2* | sort -rn | head -1 | cut -f2-

find . -cmin 1 -name "b2*"
find . -mtime 2 -name "b2*"


find /sample_directory -type f -printf "%t - %p\n" | sort -n | tail -1
find sample_directory/ -type f -exec stat -c '%X %n' {} \; | sort -nr | awk 'NR==1,NR==3 {print $2}'
ls sample_directory/ -Artls | tail -1
ls -tp | grep -v /$ | head -1



CURRENT_DIR='.'

get_recent_file () {
    FILE=$(ls -Art1 ${CURRENT_DIR} | tail -n 1)
    if [ ! -f ${FILE} ]; then
        CURRENT_DIR="${CURRENT_DIR}/${FILE}"
        get_recent_file
    fi
    echo $FILE
    exit
}
get_recent_file



##########################################################################
EOF bash
##########################################################################

https://unix.stackexchange.com/questions/583782/what-is-different-between-eof-and-eof-in-bash-script
https://stackoverflow.com/questions/2500436/how-does-cat-eof-work-in-bash
https://superuser.com/questions/1003760/what-does-eof-do
https://stackoverflow.com/questions/40359282/launch-a-cat-command-unix-into-dockerfile
https://www.docker.com/blog/introduction-to-heredocs-in-dockerfiles/
https://docs.aws.amazon.com/cli/latest/reference/configure/list.html

#!/bin/sh

aws configure <<EOF
  test1
  test1
  eu-central-1
  none
EOF

cat ~/.aws/config
cat ~/.aws/credentials
aws configure list

--------

Dockerfile Example:
# syntax = docker/dockerfile:1.4.0

RUN <<EOF aws configure <<EOF
  test1
  test1
  eu-central-1
  none
EOF

RUN <<EOF
echo "Hello" >> /hello
echo "World!" >> /hello
EOF


--------

cat <<EOF
    Line 1
    Line 2
EOF

cat <<-EOF
    Line 1
    Line 2
EOF



1. Assign multi-line string to a shell variable
$ sql=$(cat <<EOF
SELECT foo, bar FROM db
WHERE foo='baz'
EOF
)
The $sql variable now holds the new-line characters too. You can verify with echo -e "$sql".

2. Pass multi-line string to a file in Bash
$ cat <<EOF > print.sh
#!/bin/bash
echo \$PWD
echo $PWD
EOF
The print.sh file now contains:

#!/bin/bash
echo $PWD
echo /home/user
3. Pass multi-line string to a pipe in Bash
$ cat <<EOF | grep 'b' | tee b.txt
foo
bar
baz
EOF



##########################################################
bash if
##########################################################
https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php

ISLOCAL=false
if [ $ISLOCAL == true ]
then
   echo Hello
fi

#!/bin/bash
# Basic if statement
if [ $1 -gt 100 ]
then
echo Hey that\'s a large number.
pwd
fi