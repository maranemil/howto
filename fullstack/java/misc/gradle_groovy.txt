######################################################################
Maven vs. Gradle , Ant vs Maven vs Gradle, Groovy to Kotlin
######################################################################

Gradle Groovy
Maven
Apache Ant
Apache Ivy


Steht ein mehr oder weniger einfacher Build-Prozess im Vordergrund, bei dem es einfach darum geht, dass es funktioniert -> Maven.
Willst Du im Build alles mögliche "skripten" können -> Gradle.
Kleinen Projekten setzte ich oft Apache Ant mit Apache Ivy
Gant is just a lightweight facade on Groovy's AntBuilder.
For smaller projects Maven is still preferred while Gradle is suited for bigger and complex projects.
Gradle is an automation build tool that is developed on the features of Apache Ant and Apache Maven.
Maven is a project management and build tool generally used for Java projects. However it can be used for projects developed in Ruby, C#, Scala, and so on.
Gradle gives a domain-related language also called DSL for the build. This language is obtainable in Groovy and Kotlin.

Maven supports development in languages like Scala, C#, and Ruby.
Gradle supports development in languages like Java, C, C++, and Groovy.



Gradle has better performance because of the features listed below:
+ Java class compilation in an incremental way.
+ Reusing the build artifacts of other the Gradle builds with similar inputs.
+ More use of APIs.
+ Faster compilation with the help of compiler daemon.
+ Build cache management makes Gradle much faster than Maven.



https://www.geeksforgeeks.org/difference-between-gradle-and-maven/
https://gradlehero.com/maven-vs-gradle-comparison/
https://www.chakray.com/gradle-vs-maven-definitions-and-main-differences/
https://www.javatpoint.com/gradle-vs-maven
https://developer.okta.com/blog/2019/09/03/gradle-tutorial
https://www.baeldung.com/ant-maven-gradle
https://developer.android.com/build/migrate-to-kotlin-dsl
https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/
https://dzone.com/articles/gradle-vs-maven
https://docs.travis-ci.com/user/languages/groovy/
https://www.jetbrains.com/help/idea/work-with-gradle-dependency-diagram.html
https://hackernoon.com/maven-vs-gradle-how-to-choose-the-right-build-tool
https://junit.org/junit5/docs/current/user-guide/
https://www.simplilearn.com/tutorials/gradle-tutorial/gradle-vs-maven
https://www.softwaretestinghelp.com/gradle-vs-maven/


https://code.visualstudio.com/docs/java/java-build
https://github.com/groovy/groovy-eclipse/wiki/Groovy-Eclipse-Maven-plugin

https://docs.groovy-lang.org/latest/html/documentation/grape.html
https://docs.groovy-lang.org/latest/html/documentation/tools-groovyc.html
https://docs.groovy-lang.org/latest/html/documentation/grape.html

https://groovy.github.io/gmaven/groovy-maven-plugin/
https://groovy-lang.org/index.html
https://www.baeldung.com/groovy-java-applications
https://stackify.com/gradle-vs-maven/

https://ant.apache.org/
https://maven.apache.org/

repo central
https://central.sonatype.com/
https://mvnrepository.com/






--------------------------------------------------------
Coding Examples Of Gradle And Maven
--------------------------------------------------------

< project xmlns ="http://maven.apache/POM/2.0.0" xmlns:xsi="http://www.w3.org/2004/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/2.0.0 http://maven.apache.org/maven-v2_0_0.xsd">
    <modelVersion> 2.0.0 </modelVersion>
    <groupId> com.softwareTest </groupId>
    <artifactId> Java-builds </artifactId>
    <packaging> jar </packaging>
    <version> 2.0 </version>
    <dependencies>
        <dependency>
            <groupId>j unit </groupId>
            <artifactId> junit </artifactId>
            <version> 2.10 </version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId> org.apache.maven.plugins </groupId>
                <artifactId> maven-surefire-plugin </artifactId>
                <version> 2.2.1 </version>
            </plugin>
        </plugins>
    </build>
</project>

mvn package

-----------------

The corresponding build.gradle code performing the same result is given below:

apply plugin:'java'
apply plugin:'maven'

group = 'com.softwareTest'
         version ='2.0'
         repositories {
         mavenCentral()
         }
        dependencies {
        testCompile group:'junit', name:'junit', version:'2.10'
}

gradle tasks –all


--------------------------------------------------------
Gradle Vs Maven Basic Commands
--------------------------------------------------------
The following table lists down some basic commands of Gradle vs Maven:

Purpose				Gradle command		Maven command
To generate WAR/EAR/JAR		gradle assemble		mvn package
To run and compile		gradle test		mvn test
Delete directory of build	gradle clean		mvn clean
Integrate with Eclipse		gradle eclipse		mvn eclipse:eclipse
For installation		gradle install		mvn install
To get the version		gradle -version		mvn -version






We can follow the below steps in order to change Maven to Gradle:
#1) Navigate to the Maven project folder (location of pom.xml file).
#2) Execute the command gradle init.

This will result in generating a Gradle build simultaneously settings.gradle file and build.gradle files will be created.


To change Gradle to Maven we follow the below steps in order:
#1) build.gradle file should have the Maven plugin.
#2) build.gradle file should have the following block of code:

apply plugin: 'java'
apply plugin: 'maven'

group = 'com.test'
version = '0.4'

dependencies {
   compile 'commons-lang:commons-lang:2.3'
}

#3) Then execute gradle install.

--------------------------------------------------------
Configuration Of Maven
--------------------------------------------------------
MAVEN_OPTs environmental variable   -Xms256m -Xmx512m.
Settings.xml file: This file resides in the directory USER_HOME/.m2.
.mvn folder
.mvn/ extension.xml file
.mvn/ maven.config file
.mvn/ jvm.config file


Local Repository Configuration
The local repository location can be changed as a part of the configuration of the user. By default, the location is .m2 directory. This is achieved by the below xml code.
<settings>
  <localRepository> path to the directory </localRepository>
</settings>

Maven downloads a maximum of 5 artifacts from various groups at one go.
In order to download two artifacts, we need to specify the following command:
mvn -Dmaven.artifact.threads=2 verify


Deployment and Security Configuration
<settings>
   <servers>
    <server>
      <id> testrepository </id>
      <username> test </username>
        <password> password </password>
    </server>
  </servers>
</settings>


Maven Plugins

Core Plugins	Tasks performed
clean		Cleans up artifacts after the build.
compiler	Java source code is compiled.
deploy		Build artifacts are deployed to the remote repository.
install		Build artifacts are installed to the local repository.
verifier	Used for integration tests.
resources	Output directory gets the copy of the resources for including in Jar.
surefire	Junit tests are run in an isolated class loader.
site		Current project site is generated.
verifier	Used for integration test and checks specific conditions.


Maven Reporting plugins are listed below:

Reporting Plugins	Tasks performed
changelog		Recent changes from SCM is generated in form of list.
changes			Report on issue tracker is generated.
checkstyle		Checkstyle report is generated.
Javadoc			Java doc for the project is generated.
surefire report		Results of unit tests are generated in form of report.
linkcheck		Linkcheck report for project documentation is generated.
pmd			A pmd report is generated.
jxr			A source cross reference is generated.


--------------------------------------------------------------------------------------

https://docs.travis-ci.com/user/languages/java/#using-java-10-and-later

--------------------------------------------------------
Building a Groovy project
--------------------------------------------------------
.jvproject.yml
language: groovy
before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/


gradle assemble
gradle check
mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
mvn test -B
mvn verify


--------------------------------------------------------------------------------------
Projects Using Ant

ant test

.jvproject.yml
jdk:
  - oraclejdk8
  - openjdk7


--------------------------------------------------------------------------------------

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.programming.mitra</groupId>
    <artifactId>java-build-tools</artifactId>
    <packaging>jar</packaging>
    <version>1.0</version>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
            </plugin>
        </plugins>
    </build>
</project>

mvn package
mvn verify

--------------------------------------------------------------------------------------
https://dzone.com/articles/gradle-vs-maven

build.gradle

apply plugin:'java'
apply plugin:'checkstyle'
apply plugin:'findbugs'
apply plugin:'pmd'

version ='1.0'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group:'junit', name:'junit', version:'4.11'
}

gradle tasks --all



--------------------------------------------------------------------------------------
https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/

groovy
plugins {
	id 'org.springframework.boot' version '3.2.0'
}
kotlin
plugins {
	id("org.springframework.boot") version "3.2.0"
}


groovy
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
}
apply plugin: 'io.spring.dependency-management'

kotlin
plugins {
	java
	id("org.springframework.boot") version "3.2.0"
}
apply(plugin = "io.spring.dependency-management")

groovy
dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
}
ext['slf4j.version'] = '1.7.20'






--------------------------------------------------------------------------------------
https://developer.okta.com/blog/2019/09/03/gradle-tutorial
--------------------------------------------------------
Get to Know build.gradle
--------------------------------------------------------

// 1) configure the requirements to run the build script
buildscript {
    // set a custom property
    ext {
       springBootVersion = '2.1.6.RELEASE'
    }
    // check for dependencies in Maven Central when resolving the
    // dependencies in the buildscript block
    repositories {
       mavenCentral()
    }
    // we need the spring boot plugin to run the build script
    dependencies {
       classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 2) apply some plugins
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// 3) set some standard properties
group = 'com.okta.springboottokenauth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

// 4) repos to search to resolve dependencies for the project
repositories {
    mavenCentral()
}

// 5) project dependencies
dependencies {
    implementation( 'com.okta.spring:okta-spring-boot-starter:1.2.1' )
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
}


--------------------------------------------------------------------------------------

src/test/java/com/okta/springboottokenauth/LambdaTest.java

interface SimpleLambda {
    public int sum(int x, int y);
}

public class LambdaTest {

    // create a lambda function with an var
    // encapsulated in its scope
    public SimpleLambda getTheLambda(int offset) {
        int scopedVar = offset;
        return (int x, int y) -> x + y + scopedVar;
    }

    @Test
    public void testClosure() {
        // get and test a lambda/closure with offset = 1
        SimpleLambda lambda1 = getTheLambda(1);
        assertEquals(lambda1.sum(2,2), 5);

        // get and test a lambda/closure with offset = 2
        SimpleLambda lambda2 = getTheLambda(2);
        assertEquals(lambda2.sum(2,2), 6);
    }
}

--------------------------------------------------------------------------------------

├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
└── gradlew.bat


--------------------------------------------------------
Creating Custom Tasks
--------------------------------------------------------

Open your build.gradle file and add the following at the end:

println "1"

task howdy {
    println "2"
    doLast {
        println "Howdy"
    }
}

println "3"


Run it with:
./gradlew howdy


task copyDocs(type: Copy) {
    from 'src/main/doc'
    into 'build/target/doc'
}
task copyDocs(type: Copy) {
    from 'src/main/doc'
    into 'build/target/doc'
    eachFile { file ->
	    doSomething(file);
    }
    exclude '**/.DS_Store'
}

--------------------------------------------------------------------------------------
https://www.chakray.com/gradle-vs-maven-definitions-and-main-differences/

--------------------------------------------------------
HelloWorld in gradle (settings.gradle)
--------------------------------------------------------

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
mainClassName = 'hello.HelloWorld'
repositories {
    mavenCentral()
}
jar {
    baseName = 'gs-gradle'
    version =  '0.1.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
dependencies {
    compile "joda-time:joda-time:2.2"
    testCompile "junit:junit:4.12"
}

println 'This is executed during the configuration phase.'
task configured {
    println 'This is also executed during the configuration phase.'
}

--------------------------------------------------------------------------------------
https://gradlehero.com/maven-vs-gradle-comparison/
--------------------------------------------------------
Gradle Kotlin build scripts
--------------------------------------------------------
# Gradle
plugins {
    id 'java'
    id 'io.spring.dependency-management' version "1.0.11.RELEASE"
    id 'org.springframework.boot' version '2.6.1'
}

# Kotlin
plugins {
    java
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id("org.springframework.boot") version "2.6.1"
}

--------------------------------------------------------------------------------------


