

###############################################################
Cucumber with Selenium and Maven
###############################################################

https://www.youtube.com/watch?v=wbbbV3SiHBc&list=PLox9xfUeaKQ5H36BjsGq6sVQrhS179d30
https://www.youtube.com/watch?v=TUX7ntXlVkc&list=PL6tu16kXT9PpteusHGISu_lHcV6MbBtA6
https://www.youtube.com/watch?v=lbWqi1tdyTk&list=PLox9xfUeaKQ6SYG2GmqbwKL7PTzC7CkQk
https://www.youtube.com/watch?v=YzJBiqfISU8&list=PL699Xf-_ilW6oK3_otMtu7BPqiy0VlkE-
https://www.youtube.com/watch?v=HBXxBJ-7LFw&list=PLS1QulWo1RIaaQ3mAU9Nj4rqfwbAv3wIZ
https://www.youtube.com/watch?v=aFlAXLSHbCg&list=PLUDwpEzHYYLuOleK8iPl6kc2UbXGvllBY




https://mvnrepository.com/artifact/junit/junit/4.13.2
https://mvnrepository.com/artifact/io.cucumber/cucumber-java/7.15.0
https://mvnrepository.com/search?q=cucumber
https://mvnrepository.com/artifact/org.fitnesse/fitnesse
https://mvnrepository.com/artifact/org.fitnesse/fitnesse/20231203
https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api/5.10.1
https://mvnrepository.com/artifact/io.cucumber/cucumber-junit/7.15.0
https://mvnrepository.com/artifact/io.cucumber/cucumber-core/7.15.0
https://mvnrepository.com/artifact/io.cucumber/cucumber-testng


https://cucumber.io/docs/cucumber/
https://cucumber.io/docs/cucumber/checking-assertions/



java -version
mvn -version
mvn test
mvn test -X
mvn test -Dtest="MainTest"
mvn test -Dgroups="unittest"
echo $JAVA_HOME

which java
/usr/bin/java

------------------------------

https://junit.org/junit5/
https://reflectoring.io/junit5/#
https://spring.io/guides/gs/testing-web/#
https://www.baeldung.com/junit-tests-run-programmatically-from-java
https://www.baeldung.com/junit-5
https://www.freecodecamp.org/news/java-unit-testing/
https://www.tutorialspoint.com/junit/junit_test_framework.htm
https://junit.org/junit5/docs/current/user-guide/
https://www.browserstack.com/guide/how-to-write-junit-test-cases#
https://www.softwaretestinghelp.com/junit-tests-examples/
https://symflower.com/en/company/blog/2023/how-to-write-junit-test-cases/

------------------------------
https://cucumber.io/docs/installation/java/
https://maven.apache.org/surefire/maven-surefire-plugin/examples/cucumber.html
------------------------------
https://sagarthakare1.wordpress.com/2015/05/15/cucumber-setup-with-maven/comment-page-1/
https://github.com/joantolos/cucumber
https://gist.github.com/madan712/6223627449f75f175bfc7cbac12b7ad4
https://medium.com/@mlvandijk/getting-started-with-cucumber-in-java-a-10-minute-tutorial-586652d2c82
https://cucumber.io/docs/gherkin/reference/#example
https://cucumber.io/docs/guides/10-minute-tutorial/?lang=java#write-a-scenario
https://www.thinkcode.se/blog/2014/05/29/cucumberjvm-hello-world
https://cucumber.io/docs/guides/10-minute-tutorial/?lang=java

------------------------------

https://cucumber.io/docs/guides/10-minute-tutorial/?lang=java#create-an-empty-cucumber-project

mvn archetype:generate                      \
   "-DarchetypeGroupId=io.cucumber"           \
   "-DarchetypeArtifactId=cucumber-archetype" \
   "-DarchetypeVersion=7.15.0"               \
   "-DgroupId=hellocucumber"                  \
   "-DartifactId=hellocucumber"               \
   "-Dpackage=hellocucumber"                  \
   "-Dversion=1.0.0-SNAPSHOT"                 \
   "-DinteractiveMode=false"
   ------------------------------

   <?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>hellocucumber</groupId>
    <artifactId>hellocucumber</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-bom</artifactId>
                <version>7.15.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>5.10.1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-testng</artifactId>
            <version>7.15.0</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>datatable</artifactId>
            <version>7.15.0</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>7.15.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit-platform-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.2</version>
            </plugin>
        </plugins>
    </build>
</project>

------------------------------


   <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>untitled1maven</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.fitnesse/fitnesse -->
        <dependency>
            <groupId>org.fitnesse</groupId>
            <artifactId>fitnesse</artifactId>
            <version>20231203</version>
            <scope>provided</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-core -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-core</artifactId>
            <version>7.15.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>7.15.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-junit -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>7.15.0</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.cucumber/datatable -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>datatable</artifactId>
            <version>7.15.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-testng</artifactId>
            <version>7.15.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <pluginManagement>
            <plugins>

            </plugins>
        </pluginManagement>
    </build>
</project>

-----------------------
src/main/java/package

HelloWorld.java
package org.example;

public class HelloWorld {
    public static void main(String[] args) {
        System.out.printf("Hello World");
    }

    public static String sayHello(String string) {
        return string + " World";
    }
}

Main.java
package org.example;

// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,
// then press Enter. You can now see whitespace characters in your code.
public class Main {
    public static void main(String[] args) {
        // Press Alt+Eingabe with your caret at the highlighted text to see how
        // IntelliJ IDEA suggests fixing it.
        System.out.printf("Hello and welcome!");

        // Press Umschalt+F10 or click the green arrow button in the gutter to run the code.
        for (int i = 1; i <= 5; i++) {

            // Press Umschalt+F9 to start debugging your code. We have set one breakpoint
            // for you, but you can always add more by pressing Strg+F8.
            System.out.println("i = " + i);
        }
    }

    public static int findMax(int arr[]) {
        int max = 0;
        for (int i = 1; i < arr.length; i++) {
            if (max < arr[i]) {
                max = arr[i];
            }
        }
        return max;
    }
}
---------------------------------------------------------------------------------------------

src/test/java/package




RunCucumberTest.java
package hellocucumber;

import org.junit.runner.RunWith;
import io.cucumber.junit.CucumberOptions;
import io.cucumber.junit.Cucumber;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

import static org.junit.jupiter.api.Assertions.*;

public class RunCucumberTest {

    @Given("today is Sunday")
    public void today_is_sunday() {
        // Write code here that turns the phrase above into concrete actions
        throw new io.cucumber.java.PendingException();
    }

    @When("I ask whether it's Friday yet")
    public void i_ask_whether_it_s_friday_yet() {
        // Write code here that turns the phrase above into concrete actions
        throw new io.cucumber.java.PendingException();
    }

    @Then("I should be told {string}")
    public void i_should_be_told(String string) {
        // Write code here that turns the phrase above into concrete actions
        throw new io.cucumber.java.PendingException();
    }
}



MainTest.java
package org.example;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Tag;

import static org.junit.jupiter.api.Assertions.assertEquals;


@Tag("unittest")
class MainTest {

    @BeforeAll
    public static void init() {
        System.out.println("Doing stuff start");
    }

    @Test
    public void testFindMax() {
        assertEquals(4, Main.findMax(new int[]{1, 3, 4, 2}));
    }

    @Disabled
    public void testFindMax2() {
        assertEquals(4, Main.findMax(new int[]{12, 1, 3, 4, 2}));
    }

    @AfterAll
    public static void end() {
        System.out.println("Doing stuff end");
    }

}

---------------------------------------------------------------------------------------------

src/test/resources

hello.feature

Feature: Cucumber hello world example

  Scenario Outline: Hello World
    Given A String name <name>
    When sayHello method of HelloWorld.java is called
    Then It should return <output>

    Examples:
      |	name	|	output		|
      |	Hello 	|	Hello World	|
      |	Java	|	Hello Java	|
      |	India	|	Hello India	|
      |	Foo	|	Hello Foo	|


friday.feature

Feature: Is it Friday yet?
  Everybody wants to know when it's Friday

  Scenario: Sunday isn't Friday
    Given today is Sunday
    When I ask whether it's Friday yet
    Then I should be told "Nope"



---------------------------------------------------------------------------------------------
###############################################################################
spring testing
###############################################################################


https://spring.io/guides/gs/testing-web/#



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/main/java/com/example/testingweb/HomeController.java)

package com.example.testingweb;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class HomeController {
	@RequestMapping("/")
	public @ResponseBody String greeting() {
		return "Hello, World";
	}
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/main/java/com/example/testingweb/TestingWebApplication.java

package com.example.testingweb;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TestingWebApplication {
	public static void main(String[] args) {
		SpringApplication.run(TestingWebApplication.class, args);
	}
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/test/java/com/example/testingweb/TestingWebApplicationTest.java

package com.example.testingweb;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class TestingWebApplicationTests {
	@Test
	void contextLoads() {
	}

}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/test/java/com/example/testingweb/SmokeTest.java

package com.example.testingweb;

import static org.assertj.core.api.Assertions.assertThat;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class SmokeTest {

	@Autowired
	private HomeController controller;

	@Test
	void contextLoads() throws Exception {
		assertThat(controller).isNotNull();
	}
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/test/java/com/example/testingweb/HttpRequestTest.java

package com.example.testingweb;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.web.server.LocalServerPort;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
class HttpRequestTest {

	@LocalServerPort
	private int port;

	@Autowired
	private TestRestTemplate restTemplate;

	@Test
	void greetingShouldReturnDefaultMessage() throws Exception {
		assertThat(this.restTemplate.getForObject("http://localhost:" + port + "/",
				String.class)).contains("Hello, World");
	}
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/test/java/com/example/testingweb/TestingWebApplicationTest.java

package com.example.testingweb;

import static org.hamcrest.Matchers.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

@SpringBootTest
@AutoConfigureMockMvc
class TestingWebApplicationTest {

	@Autowired
	private MockMvc mockMvc;

	@Test
	void shouldReturnDefaultMessage() throws Exception {
		this.mockMvc.perform(get("/")).andDo(print()).andExpect(status().isOk())
				.andExpect(content().string(containsString("Hello, World")));
	}
}



src/test/java/com/example/testingweb/WebLayerTest.java

@WebMvcTest
include::complete/src/test/java/com/example/testingweb/WebLayerTest.java



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/main/java/com/example/testingweb/GreetingController.java

package com.example.testingweb;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller
public class GreetingController {

	private final GreetingService service;

	public GreetingController(GreetingService service) {
		this.service = service;
	}

	@RequestMapping("/greeting")
	public @ResponseBody String greeting() {
		return service.greet();
	}

}



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/main/java/com/example/testingweb/GreetingService.java

package com.example.testingweb;

import org.springframework.stereotype.Service;

@Service
public class GreetingService {
	public String greet() {
		return "Hello, World";
	}
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/test/java/com/example/testingweb/WebMockTest.java) shows how to test this controller with @WebMvcTest:

package com.example.testingweb;

import static org.hamcrest.Matchers.containsString;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

@WebMvcTest(GreetingController.class)
class WebMockTest {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private GreetingService service;

	@Test
	void greetingShouldReturnMessageFromService() throws Exception {
		when(service.greet()).thenReturn("Hello, Mock");
		this.mockMvc.perform(get("/greeting")).andDo(print()).andExpect(status().isOk())
				.andExpect(content().string(containsString("Hello, Mock")));
	}
}