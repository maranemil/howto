
################################################
maven java
################################################

https://stackoverflow.com/questions/15530886/mvn-install-or-mvn-package
https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
https://spring.io/guides/gs/maven/
https://www.baeldung.com/install-maven-on-windows-linux-mac
https://developers.arcgis.com/enterprise-sdk/guide/java/install-java-and-maven/
https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-maven
https://docs.gitlab.com/ee/user/packages/maven_repository/
https://www.vogella.com/tutorials/ApacheMaven/article.html

*
*
*

mvn -h
mvn --version
apt-cache search maven
sudo apt install maven -y

*
*
*

java --version
openjdk 11.0.18 2023-01-17
OpenJDK Runtime Environment (build 11.0.18+10-post-Ubuntu-0ubuntu122.04)
OpenJDK 64-Bit Server VM (build 11.0.18+10-post-Ubuntu-0ubuntu122.04, mixed mode, sharing)

mvn --version
Apache Maven 3.6.3
Maven home: /usr/share/maven
Java version: 11.0.18, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64
Default locale: de_DE, platform encoding: UTF-8
OS name: "linux", version: "5.15.0-71-generic", arch: "amd64", family: "unix"

*
*
*

mvn install is the option that is most often used.
mvn package is seldom used, only if you're debugging some issue with the maven build process.

mvn clean deploy
mvn clean install
mvn -U clean install
mvn clean compile

Creating a Project
----------------------
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false
cd my-app

Maven Phases
----------------------
Although hardly a comprehensive list, these are the most common default lifecycle phases executed.

validate: validate the project
compile: compile the source code of the project
test: test the compiled source code
package: take the compiled code and package it in its distributable format, such as a JAR.
integration-test: process and deploy the package if necessary into an environment where integration tests can be run
verify: run any checks to verify the package is valid and meets quality criteria
install: install the package into the local repository, for use as a dependency in other projects locally
deploy: done in an integration or release environment
There are two other Maven lifecycles of note beyond the default list above. They are

clean: cleans up artifacts created by prior builds
site: generates site documentation for this project

mvn clean dependency:copy-dependencies package
mvn site

*
*
*


https://www.youtube.com/watch?v=Xatr8AZLOsE
https://www.marcobehler.com/guides/mvn-clean-install-a-short-guide-to-maven

mvn clean install

- clean command, delete all previously compiled Java
- install will then compile, test & package

*
*
*


Add dependencies
https://www.vogella.com/tutorials/ApacheMaven/article.html

<dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
 </dependencies>


################################################
IntelliJ: Error: java: release version x not supported
################################################

https://stackoverflow.com/questions/52788743/intellij-error-java-release-version-10-not-supported
https://youtrack.jetbrains.com/issue/IDEA-299978
https://crunchify.com/intellij-idea-how-to-set-latest-java-sdk-and-fix-an-error-errorjava-error-release-version-14-not-supported/

File -> Settings-> Build, Execution, Development -> Compiler -> Java Compiler
update Project bytecode version to 8

public class JEP406 {

    public static void main(String[] args) {
        System.out.println(formatterJava17("Java 17"));
        System.out.println(formatterJava17(17));
    }

    static String formatterJava17(Object o) {
        return switch (o) {
            case Integer i -> String.format("int %d", i);
            case Long l    -> String.format("long %d", l);
            default        -> o.toString();
        };
    }
}

Letâ€™s install and set latest Java in your IntelliJ IDEA.
Right click on Project
Click on Open Module Settings
Click on Project -> Project SDK
Click on Dropdown
Click on Add SDK
Provide path of latest downloaded Java JDK
Click on Project language level
Set it to 14 - Switch expressions

################################################
HelloWorld java / Main Test Intellij
################################################

public class HelloWorld {
    public static void main(String[] args) {
        System.out.print("Hello and welcome!");
    }
}

public class Main {
    public static void main(String[] args) {
        System.out.print("Hello and welcome!");
        for (int i = 1; i <= 5; i++) {
            System.out.println("i = " + i);
        }
    }
}


################################################
Module xxx SDK 17 does not support source version 1.6.
Possible solutions:
- Downgrade Project SDK in settings to 1.6 or compatible. Open project settings.
- Upgrade language version in Maven build file to 17. Update pom.xml and reload the project.
################################################

https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/How-to-fix-common-JAVA_HOME-errors-quickly
https://github.com/pmd/pmd/issues/859
https://docs.oracle.com/cd/E19182-01/821-0917/inst_jdk_javahome_t/index.html
https://itsfoss.com/set-java-home-ubuntu/

https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/windows-7-install.html
https://docs.aws.amazon.com/corretto/latest/corretto-8-ug/windows-7-install.html
https://docs.aws.amazon.com/corretto/latest/corretto-8-ug/amazon-linux-install.html
https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/amazon-linux-install.html
https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/generic-linux-install.html

install Amazon Corretto 17
wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -
sudo add-apt-repository 'deb https://apt.corretto.aws stable main'
sudo apt-get update && sudo apt-get install java-common
sudo dpkg --install java-17-amazon-corretto-jdk_17.0.0.35-1_amd64.deb
java -version
sudo update-alternatives --config java
sudo update-alternatives --config javac

Uninstall Amazon Corretto 17
sudo dpkg --remove java-16-amazon-corretto-jdk


################################################
javac -version
################################################

Der Befehl 'javac' wurde nicht gefunden, kann aber installiert werden mit:
sudo apt install default-jdk              # version 2:1.11-72build2, or
sudo apt install openjdk-11-jdk-headless  # version 11.0.18+10-0ubuntu1~22.04
sudo apt install openjdk-17-jdk-headless  # version 17.0.6+10-0ubuntu1~22.04
sudo apt install openjdk-18-jdk-headless  # version 18.0.2+9-2~22.04
sudo apt install openjdk-19-jdk-headless  # version 19.0.2+7-0ubuntu3~22.04
sudo apt install openjdk-8-jdk-headless   # version 8u362-ga-0ubuntu1~22.04
sudo apt install ecj                      # version 3.16.0-1

sudo apt-get update --fix-missing
sudo apt install default-jdk -y

which javac
/usr/lib/jvm/java-11-openjdk-amd64//bin/javac

export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/bin/java
echo $JAVA_HOME

################################################
The environment variable JAVA_HOME is not correctly set.
################################################

https://stackoverflow.com/questions/63702419/mavenreportexception-java-home-not-correctly-set
https://www.baeldung.com/maven-java-home-jdk-jre

ls /usr/lib/jvm/java-11-openjdk-amd64/
echo $JAVA_HOME
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/
export PATH=$JAVA_HOME/bin:$PATH
java -version

mvn clean compile


#################################################
Building Java Projects with Maven
#################################################

https://central.sonatype.com/search?smo=true&q=arima
https://spring.io/guides/gs/maven/
https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
https://mvnrepository.com/search?q=arima&p=1
https://mvnrepository.com/artifact/org.renjin.cran/forecast
https://github.com/robjhyndman/forecast
https://github.com/robjhyndman/forecast/blob/master/README.md
https://mvnrepository.com/artifact/com.workday/timeseries-forecast
https://github.com/Workday/timeseries-forecast
https://github.com/Workday/timeseries-forecast/blob/master/src/main/java/com/workday/insights/timeseries/arima/Arima.java

install.packages('forecast', dependencies = TRUE)
# install.packages("remotes")
remotes::install_github("robjhyndman/forecast")


https://github.com/marcobehlerjetbrains/maven-tutorial
https://repo1.maven.org/maven2/
https://central.sonatype.com/?smo=true
https://books.sonatype.com/mvnref-book/reference/index.html
https://www.marcobehler.com/guides/mvn-clean-install-a-short-guide-to-maven
https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope
https://maven.apache.org/guides/introduction/introduction-to-the-pom.html