Concepte de bază
Sintaxa și Structura Limbajului: Cum să declari variabile, metode, clase, interfețe etc.

Controlul Fluxului: Instrucțiuni ca if
, for
, while
, switch
, etc.

Tipuri de Date și Variabile: Primitiv vs Obiect, autoboxing, etc.

Funcții și Metode: Parametri, returnare, overload și override, etc.

Concepte OOP (Programare Orientată pe Obiect)
Clase și Obiecte: Constructori, mostenire, polimorfism.

Interfețe și Abstractizare: Diferența între clase abstracte și interfețe.

Encapsulare: Public, private, protected, getteri și setteri.

Compoziție și Agregare

Colectii
Listă, Set, Map: Cum funcționează, diferențe, și când să le folosești.

Algoritmi Standard: Sortare, căutare, etc.

Java Avansat
Multithreading și Concurență: Synchronized, wait/notify, Executor framework.

Excepții: Try, catch, finally, throw și throws.

I/O și NIO: Citire/scriere de fișiere, operații pe buffer, canale, etc.

Framework-uri și Biblioteci
Spring Framework: Inversarea controlului (IoC), Dependency Injection, Spring Boot.

Hibernate: ORM, Lazy Initialization, caching, etc.

JUnit: pentru testare unitară.

Maven sau Gradle: pentru gestionarea dependențelor.

Tehnologii Conexe
RESTful Web Services: Cum să construiești și să consumi un web service.

Baze de Date: SQL, JDBC, JPA.

Front-end basics: HTML, CSS, JavaScript, eventual un framework ca Angular sau React.

Altele
Design Patterns: Singleton, Factory, Observer, etc.

Best Practices și Principii: SOLID, DRY, KISS, etc.

Tooling: IDEs, Git, Debugging, Profiling.

https://www.baeldung.com/java-string-pool
https://www.reddit.com/r/programare/comments/168zamr/ce_ar_trebui_sa_stie_un_programator_de_java/