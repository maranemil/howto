Below is an example of converting an audio file to MIDI using Python. This example uses the librosa library for audio analysis and the mido library for MIDI file creation.
Code Example:
Pythonimport librosa
import mido
from mido import MidiFile, MidiTrack, Message

def audio_to_midi(audio_file, midi_file, sr=22050):
    """
    Converts an audio file to a MIDI file by extracting pitch information.
    
    Parameters:
        audio_file (str): Path to the input audio file.
        midi_file (str): Path to save the output MIDI file.
        sr (int): Sampling rate for audio processing.
    """
    try:
        # Load the audio file
        y, sr = librosa.load(audio_file, sr=sr)
        
        # Extract pitches and magnitudes using librosa's piptrack
        pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
        
        # Create a new MIDI file and track
        midi = MidiFile()
        track = MidiTrack()
        midi.tracks.append(track)
        
        # Iterate over frames to extract MIDI notes
        for frame in range(pitches.shape[1]):
            pitch = pitches[:, frame]
            magnitude = magnitudes[:, frame]
            
            # Find the strongest pitch in the frame
            if magnitude.max() > 0:  # Only consider frames with significant energy
                note = int(librosa.hz_to_midi(pitch[magnitude.argmax()]))
                velocity = int(magnitude.max() * 127)  # Scale magnitude to MIDI velocity
                
                # Add a MIDI note-on and note-off message
                track.append(Message('note_on', note=note, velocity=velocity, time=0))
                track.append(Message('note_off', note=note, velocity=0, time=200))
        
        # Save the MIDI file
        midi.save(midi_file)
        print(f"MIDI file saved to {midi_file}")
    
    except Exception as e:
        print(f"Error: {e}")

# Example usage
audio_file = 'example.wav'  # Replace with your audio file path
midi_file = 'output.mid'    # Replace with your desired MIDI file path
audio_to_midi(audio_file, midi_file)

Explanation:

Audio Loading: The librosa.load function loads the audio file and converts it to a waveform.
Pitch Extraction: The librosa.piptrack function extracts pitch and magnitude information from the audio.
MIDI Creation: The mido library is used to create a MIDI file and add note-on and note-off messages based on the extracted pitches.
Velocity Scaling: Magnitudes are scaled to MIDI velocity values (0â€“127).

Requirements:
Install the required libraries:
Bashpip install librosa mido

Notes:

This is a basic example and works best for monophonic audio (single melody line).
For polyphonic audio or more accurate results, consider using specialized libraries like audio-to-midi or machine learning models.


