##########################################################
pylint errors
##########################################################

https://plugins.jetbrains.com/plugin/7973-sonarlint
https://www.sonarsource.com/products/sonarlint/

https://pypi.org/project/pylint/
https://pylint.pycqa.org/en/latest/
https://pylint.pycqa.org/en/latest/user_guide/messages/index.html
https://stackoverflow.com/questions/31907762/pylint-to-show-only-warnings-and-errors
https://vald-phoenix.github.io/pylint-errors/
https://pylint.pycqa.org/en/latest/user_guide/messages/messages_overview.html
https://rules.sonarsource.com/python/RSPEC-139
https://techoverflow.net/2021/04/05/how-to-ignore-pylint-problem-for-a-specific-single-line-of-code/
https://vald-phoenix.github.io/pylint-errors/plerr/errors/classes/W0223.html
https://github.com/pandas-dev/pandas/issues/27634
https://pylint.pycqa.org/en/latest/user_guide/messages/message_control.html
https://github.com/microsoft/PTVS/issues/634
https://vald-phoenix.github.io/pylint-errors/
https://pylint.pycqa.org/en/latest/user_guide/messages/warning/unknown-option-value.html

Codes
https://pylint.pycqa.org/en/latest/user_guide/messages/messages_overview.html#
http://pylint-messages.wikidot.com/all-codes#

# sudo apt install pylint
pip install pylint

pylint [options] modules_or_packages
pylint mydir
pylint --recursive=y mydir mymodule mypackage
pylint -j 4 mymodule1.py mymodule2.py mymodule3.py mymodule4.py

pylint mymodule1.py
pylint mymodule1.py --errors-only
pylint mymodule1.py --disable=R,C
pylint mymodule1.py --disable=all


Fatal (1)
Error (2)
Warning (4)
Convention (8)
Refactor (16)
Information (NA)

(C) convention, for programming standard violation
(R) refactor, for bad code smell
(W) warning, for python specific problems
(E) error, for probable bugs in the code
(F) fatal, if an error occurred which prevented pylint from doing further processing.


pylint mymodule1.py --list-groups

async
basic
classes
design
exceptions
format
imports
lambda-expressions
logging
method_args
metrics
miscellaneous
modified_iteration
newstyle
nonascii-checker
refactoring
similarities
spelling
stdlib
string
threading
typecheck
unicode_checker
unnecessary-dunder-call
unnecessary_ellipsis
unsupported_version
variables


##########################################################
E0110: Abstract class 'ExcelWriter' with abstract methods instantiated (abstract-class-instantiated)
##########################################################

https://pylint.pycqa.org/en/latest/user_guide/messages/warning/abstract-method.html
https://stackoverflow.com/questions/59983765/pandas-abstract-class-excelwriter-with-abstract-methods-instantiatedpylint-p

FIX
add this on line of code where pd.ExcelWriter() called
# pylint: disable=abstract-class-instantiated

https://code.visualstudio.com/docs/python/linting



##########################################################
Make C0412: Imports from package are not grouped, compatible with isort
Imports from same package are not grouped
##########################################################

https://deepsource.io/gh/graphite-project/graphite-web/issue/PYL-C0412/occurrences
https://github.com/PyCQA/pylint/issues/2806
https://openpyxl.readthedocs.io/en/stable/usage.html


Not preferred:

import os
import sys
from os import listdir
import time
from os.path import isfile, join

Preferred:

import os
from os import listdir
from os.path import isfile, join

import sys
import time


##########################################################
C0116: Missing function or method docstring (missing-function-docstring)
C0116 (missing-function-docstring)
##########################################################

https://vald-phoenix.github.io/pylint-errors/plerr/errors/basic/C0116.html
https://pylint.pycqa.org/en/latest/user_guide/messages/convention/missing-function-docstring.html
https://pylint.pycqa.org/en/v2.13.9/messages/convention/missing-function-docstring.html

Problematic code:
def foo():
    pass


Correct code:
def foo():
    """A dummy docstring."""
    pass


##########################################################
C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
##########################################################

https://pylint.pycqa.org/en/latest/user_guide/messages/convention/consider-using-enumerate.html
https://vald-phoenix.github.io/pylint-errors/plerr/errors/refactoring/C0200.html
https://wangonya.com/blog/python-enumerate/

Problematic code:
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
for i in range(len(seasons)):  # [consider-using-enumerate]
    print(i, seasons[i])


Correct code:
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
for i, season in enumerate(seasons):
    print(i, season)


array = [1, 2, 3, 4, 5]
for i in range(len(array)):
    print(i, array[i])

array = [1, 2, 3, 4, 5]
for i, n in enumerate(array):
    print(i, n)


##########################################################
W0105: String statement has no effect (pointless-string-statement)
##########################################################

https://pylint.pycqa.org/en/latest/user_guide/messages/warning/pointless-string-statement.html
https://pycodequ.al/docs/pylint-messages/w0105-pointless-string-statement.html
https://vald-phoenix.github.io/pylint-errors/plerr/errors/basic/W0105.html
https://github.com/PyCQA/pylint/issues/2864
https://deepsource.io/gh/yawks/pyrssw/issue/PYL-W0105/occurrences

Problematic code:
"""This is a docstring which describes the module"""
"""This is not a docstring"""  # [pointless-string-statement]

Correct code:
"""This is a docstring which describes the module"""
# This is comment which describes a particular part of the module.

Not preferred:
'Define a function to add 2 numbers here.'
def add(a, b):
    return a + b

Preferred:
Use Comments:
# Define a function to add 2 numbers here.
def add(a, b):
    return a + b


use docstrings:
def add(a, b):
    '''Function to add 2 numbers here.'''
    return a + b


##########################################################
R0913: Too many arguments (6/5) (too-many-arguments)
##########################################################

https://stackoverflow.com/questions/816391/python-avoiding-pylint-warnings-about-too-many-arguments
https://pycodequ.al/docs/pylint-messages/r0913-too-many-arguments.html
https://pylint.pycqa.org/en/latest/user_guide/messages/refactor/too-many-arguments.html
https://vald-phoenix.github.io/pylint-errors/plerr/errors/design/R0913.html
https://exchangetuts.com/python-avoiding-pylint-warnings-about-too-many-arguments-1639561205839804

class PersonInfo(object):
  def __init__(self, name, age, iq):
    self.name = name
    self.age = age
    self.iq = iq

or
#pylint: disable=R0913
#pylint: disable=too-many-arguments



R0913 (too-many-arguments)

Problematic code:
def foo(a, b, c, d, e, f, g, h, i, j):
    pass

Correct code:
def foo(*args):
    pass

##########################################################
C0301: Line too long (122/100) (line-too-long)
##########################################################

E501 line too long (83 > 79 characters)
https://stackoverflow.com/questions/14143284/line-is-too-long-django-pep8
https://pylint.pycqa.org/en/latest/user_guide/messages/convention/line-too-long.html
https://stackoverflow.com/questions/17319422/how-do-i-set-the-maximum-line-length-in-pycharm

# pylint: disable=C0301
# pylint: disable=line-too-long
flake8 --select=E501

pip install pycodestyle
pip install pylint

PyCharm
File -> Settings -> Editor -> Code Style -> General: Right margin (columns)
Ctrl+Alt+S), then Editor -> Code Style:
File >> Settings >> Editor >> Code Style: Right margin (columns)


##########################################################
E0401: Unable to import 'file' (import-error)
##########################################################

https://vald-phoenix.github.io/pylint-errors/plerr/errors/imports/E0401.html
https://stackoverflow.com/questions/1899436/pylint-unable-to-import-error-how-to-set-pythonpath
https://code.visualstudio.com/docs/python/environments
https://pylint.pycqa.org/en/stable/user_guide/messages/error/import-error.html
https://pycodequ.al/docs/pylint-messages/e0401-import-error.html
https://stackoverflow.com/questions/22448731/how-do-i-create-a-pylintrc-file

# package installed in your venv, globally, user space


Adding a .pylintrc

/etc/pylintrc for default global configuration
~/.pylintrc for default user configuration
pylint --rcfile=~/.pylintrc


[MASTER]
init-hook='import sys; sys.path.append(".")'

[Master]
init-hook='sys.path = list(); sys.path.append("/path/to/foo")'

[MASTER]
init-hook="from pylint.config import find_pylintrc; import os, sys; sys.path.append(os.path.dirname(find_pylintrc()))"

[MASTER]
init-hook='import sys; sys.path.append(".")'

[MASTER]
init-hook="from pylint.config import find_pylintrc;
import os, sys; sys.path.append(os.path.dirname(find_pylintrc()))"


init-hook="import imp, os; from pylint.config import find_pylintrc; imp.load_source('import_hook', os.path.join(os.path.dirname(find_pylintrc()), 'import_hook.py'))"

##########################################################
Sections of code should not be commented out RSPEC-125
Rule S125: Rule: Sections of code should not be "commented out"
##########################################################

https://stackoverflow.com/questions/675442/how-to-comment-out-a-block-of-code-in-python
https://github.com/SonarSource/sonar-dotnet/issues/2052
https://community.sonarsource.com/t/false-positives-in-python-s125/67122

# pylint: disable=S125





