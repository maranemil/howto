##########################################################
pylint errors
##########################################################

https://plugins.jetbrains.com/plugin/7973-sonarlint
https://www.sonarsource.com/products/sonarlint/

https://pypi.org/project/pylint/
https://pylint.pycqa.org/en/latest/
https://pylint.pycqa.org/en/latest/user_guide/messages/index.html
https://stackoverflow.com/questions/31907762/pylint-to-show-only-warnings-and-errors
https://vald-phoenix.github.io/pylint-errors/
https://pylint.pycqa.org/en/latest/user_guide/messages/messages_overview.html
https://rules.sonarsource.com/python/RSPEC-139
https://techoverflow.net/2021/04/05/how-to-ignore-pylint-problem-for-a-specific-single-line-of-code/
https://vald-phoenix.github.io/pylint-errors/plerr/errors/classes/W0223.html
https://github.com/pandas-dev/pandas/issues/27634
https://pylint.pycqa.org/en/latest/user_guide/messages/message_control.html
https://github.com/microsoft/PTVS/issues/634
https://vald-phoenix.github.io/pylint-errors/
https://pylint.pycqa.org/en/latest/user_guide/messages/warning/unknown-option-value.html

Codes
https://pylint.pycqa.org/en/latest/user_guide/messages/messages_overview.html#
http://pylint-messages.wikidot.com/all-codes#

# sudo apt install pylint
pip install pylint

pylint [options] modules_or_packages
pylint mydir
pylint --recursive=y mydir mymodule mypackage
pylint -j 4 mymodule1.py mymodule2.py mymodule3.py mymodule4.py

pylint mymodule1.py
pylint mymodule1.py --errors-only
pylint mymodule1.py --disable=R,C
pylint mymodule1.py --disable=all


Fatal (1)
Error (2)
Warning (4)
Convention (8)
Refactor (16)
Information (NA)

(C) convention, for programming standard violation
(R) refactor, for bad code smell
(W) warning, for python specific problems
(E) error, for probable bugs in the code
(F) fatal, if an error occurred which prevented pylint from doing further processing.


pylint mymodule1.py --list-groups

async
basic
classes
design
exceptions
format
imports
lambda-expressions
logging
method_args
metrics
miscellaneous
modified_iteration
newstyle
nonascii-checker
refactoring
similarities
spelling
stdlib
string
threading
typecheck
unicode_checker
unnecessary-dunder-call
unnecessary_ellipsis
unsupported_version
variables


##########################################################
E0110: Abstract class 'ExcelWriter' with abstract methods instantiated (abstract-class-instantiated)
##########################################################

https://pylint.pycqa.org/en/latest/user_guide/messages/warning/abstract-method.html
https://stackoverflow.com/questions/59983765/pandas-abstract-class-excelwriter-with-abstract-methods-instantiatedpylint-p

FIX
add this on line of code where pd.ExcelWriter() called
# pylint: disable=abstract-class-instantiated

https://code.visualstudio.com/docs/python/linting



##########################################################
Make C0412: Imports from package are not grouped, compatible with isort
Imports from same package are not grouped
##########################################################

https://deepsource.io/gh/graphite-project/graphite-web/issue/PYL-C0412/occurrences
https://github.com/PyCQA/pylint/issues/2806
https://openpyxl.readthedocs.io/en/stable/usage.html


Not preferred:

import os
import sys
from os import listdir
import time
from os.path import isfile, join

Preferred:

import os
from os import listdir
from os.path import isfile, join

import sys
import time


##########################################################
C0116: Missing function or method docstring (missing-function-docstring)
C0116 (missing-function-docstring)
##########################################################

https://vald-phoenix.github.io/pylint-errors/plerr/errors/basic/C0116.html
https://pylint.pycqa.org/en/latest/user_guide/messages/convention/missing-function-docstring.html
https://pylint.pycqa.org/en/v2.13.9/messages/convention/missing-function-docstring.html

Problematic code:
def foo():
    pass


Correct code:
def foo():
    """A dummy docstring."""
    pass


##########################################################
C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
##########################################################

https://pylint.pycqa.org/en/latest/user_guide/messages/convention/consider-using-enumerate.html
https://vald-phoenix.github.io/pylint-errors/plerr/errors/refactoring/C0200.html
https://wangonya.com/blog/python-enumerate/

Problematic code:
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
for i in range(len(seasons)):  # [consider-using-enumerate]
    print(i, seasons[i])


Correct code:
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
for i, season in enumerate(seasons):
    print(i, season)


array = [1, 2, 3, 4, 5]
for i in range(len(array)):
    print(i, array[i])

array = [1, 2, 3, 4, 5]
for i, n in enumerate(array):
    print(i, n)


##########################################################
W0105: String statement has no effect (pointless-string-statement)
##########################################################

https://pylint.pycqa.org/en/latest/user_guide/messages/warning/pointless-string-statement.html
https://pycodequ.al/docs/pylint-messages/w0105-pointless-string-statement.html
https://vald-phoenix.github.io/pylint-errors/plerr/errors/basic/W0105.html
https://github.com/PyCQA/pylint/issues/2864
https://deepsource.io/gh/yawks/pyrssw/issue/PYL-W0105/occurrences

Problematic code:
"""This is a docstring which describes the module"""
"""This is not a docstring"""  # [pointless-string-statement]

Correct code:
"""This is a docstring which describes the module"""
# This is comment which describes a particular part of the module.

Not preferred:
'Define a function to add 2 numbers here.'
def add(a, b):
    return a + b

Preferred:
Use Comments:
# Define a function to add 2 numbers here.
def add(a, b):
    return a + b


use docstrings:
def add(a, b):
    '''Function to add 2 numbers here.'''
    return a + b


##########################################################
R0913: Too many arguments (6/5) (too-many-arguments)
##########################################################

https://stackoverflow.com/questions/816391/python-avoiding-pylint-warnings-about-too-many-arguments
https://pycodequ.al/docs/pylint-messages/r0913-too-many-arguments.html
https://pylint.pycqa.org/en/latest/user_guide/messages/refactor/too-many-arguments.html
https://vald-phoenix.github.io/pylint-errors/plerr/errors/design/R0913.html
https://exchangetuts.com/python-avoiding-pylint-warnings-about-too-many-arguments-1639561205839804

class PersonInfo(object):
  def __init__(self, name, age, iq):
    self.name = name
    self.age = age
    self.iq = iq

or
#pylint: disable=R0913
#pylint: disable=too-many-arguments



R0913 (too-many-arguments)

Problematic code:
def foo(a, b, c, d, e, f, g, h, i, j):
    pass

Correct code:
def foo(*args):
    pass

##########################################################
C0301: Line too long (122/100) (line-too-long)
##########################################################

E501 line too long (83 > 79 characters)
https://stackoverflow.com/questions/14143284/line-is-too-long-django-pep8
https://pylint.pycqa.org/en/latest/user_guide/messages/convention/line-too-long.html
https://stackoverflow.com/questions/17319422/how-do-i-set-the-maximum-line-length-in-pycharm

# pylint: disable=C0301
# pylint: disable=line-too-long
flake8 --select=E501

pip install pycodestyle
pip install pylint

PyCharm
File -> Settings -> Editor -> Code Style -> General: Right margin (columns)
Ctrl+Alt+S), then Editor -> Code Style:
File >> Settings >> Editor >> Code Style: Right margin (columns)


##########################################################
E0401: Unable to import 'file' (import-error)
##########################################################

https://vald-phoenix.github.io/pylint-errors/plerr/errors/imports/E0401.html
https://stackoverflow.com/questions/1899436/pylint-unable-to-import-error-how-to-set-pythonpath
https://code.visualstudio.com/docs/python/environments
https://pylint.pycqa.org/en/stable/user_guide/messages/error/import-error.html
https://pycodequ.al/docs/pylint-messages/e0401-import-error.html
https://stackoverflow.com/questions/22448731/how-do-i-create-a-pylintrc-file

# package installed in your venv, globally, user space


Adding a .pylintrc

/etc/pylintrc for default global configuration
~/.pylintrc for default user configuration
pylint --rcfile=~/.pylintrc


[MASTER]
init-hook='import sys; sys.path.append(".")'

[Master]
init-hook='sys.path = list(); sys.path.append("/path/to/foo")'

[MASTER]
init-hook="from pylint.config import find_pylintrc; import os, sys; sys.path.append(os.path.dirname(find_pylintrc()))"

[MASTER]
init-hook='import sys; sys.path.append(".")'

[MASTER]
init-hook="from pylint.config import find_pylintrc;
import os, sys; sys.path.append(os.path.dirname(find_pylintrc()))"


init-hook="import imp, os; from pylint.config import find_pylintrc; imp.load_source('import_hook', os.path.join(os.path.dirname(find_pylintrc()), 'import_hook.py'))"

##########################################################
Sections of code should not be commented out RSPEC-125
Rule S125: Rule: Sections of code should not be "commented out"
##########################################################

https://stackoverflow.com/questions/675442/how-to-comment-out-a-block-of-code-in-python
https://github.com/SonarSource/sonar-dotnet/issues/2052
https://community.sonarsource.com/t/false-positives-in-python-s125/67122

# pylint: disable=S125

---------------------------------------------------------------------------
disable Pylint warnings
---------------------------------------------------------------------------

https://stackoverflow.com/questions/4341746/how-do-i-disable-a-pylint-warning
https://discuss.dizzycoding.com/how-do-i-disable-a-pylint-warning/


# pylint: disable=locally-disabled, multiple-statements, fixme, line-too-long

or

lint.py --generate-rcfile > standard.rc

add to standard.rc
disable=W0511, C0321

pylint --rcfile=standard.rc

or add a comment at the top of code

# pylint: disable=C0321

---------------------------------------------------------------------------
C0103: Constant name "xvar" doesn't conform to UPPER_CASE naming style (invalid-name)
---------------------------------------------------------------------------
https://github.com/PyCQA/pylint/issues/2166
https://stackoverflow.com/questions/10815549/pylint-showing-invalid-variable-name-in-output
https://peps.python.org/pep-0008/#global-variable-names
https://stackoverflow.com/questions/10815549/pylint-showing-invalid-variable-name-in-output
https://pylint.pycqa.org/en/latest/user_guide/messages/convention/invalid-name.html
https://pycodequ.al/docs/pylint-messages/c0103-invalid-name.html

xvar = 0 # line 5

def main():
    """
    Not empty
    """
    global xvar # line 11

From the developers of Pylint.

In this case Pylint is telling me that those variables appear to be constants and should be all UPPERCASE. This rule is in fact a naming convention that is specific to the folks at Logilab who created Pylint. That is the way they have chosen to name those variables. You too can create your own in-house naming conventions but for the purpose of this tutorial, we want to stick to the PEP-8 standard. In this case, the variables I declared should follow the convention of all lowercase. The appropriate rule would be something like: "should match [a-z_][a-z0-9_]{2,30}$". Notice the lowercase letters in the regular expression (a-z versus A-Z)

You can test it by running: pylint --const-rgx='[a-z_][a-z0-9_]{2,30}$' x.py


---------------------------------------------------------------------------
C2801: Unnecessarily calls dunder method __next__.
---------------------------------------------------------------------------

https://github.com/PyCQA/pylint/issues/6074
https://fossies.org/linux/pylint/pylint/checkers/dunder_methods.py
https://pylint.pycqa.org/en/latest/user_guide/messages/convention/unnecessary-dunder-call.html
https://github.com/PyCQA/pylint/issues/6795
https://stackoverflow.blog/2022/04/27/underscoring-or-dunder-scoring-the-importance-of-native-type-methods-in-python/
https://docs.python.org/3/library/functions.html
https://github.com/PyCQA/pylint/issues/6074
https://pylint.pycqa.org/en/latest/user_guide/messages/convention/unnecessary-dunder-call.html

Problematic code:
three = 3.0.__str__()  # [unnecessary-dunder-call]
twelve = "1".__add__("2")  # [unnecessary-dunder-call]

def is_bigger_than_two(x):
    return x.__gt__(2)  # [unnecessary-dunder-call]


Correct code:

three = str(3.0)
twelve = "1" + "2"
def is_bigger_than_two(x):
    return x > 2




---------------------------------------------------------------------------
W0621 redefined-outer-name
---------------------------------------------------------------------------
https://pycodequ.al/docs/pylint-messages/w0621-redefined-outer-name.html
https://pylint.pycqa.org/en/latest/user_guide/messages/warning/redefined-outer-name.html
https://stackoverflow.com/questions/24999937/i-am-getting-the-error-redefined-outer-name

pylint --help-msg=redefined-outer-name


---------------------------------------------------------------------------
SonarLint Rule S1172 "Unused method parameters should be removed" and EventHandlers
W0613 (unused-argument)
---------------------------------------------------------------------------
https://stackoverflow.com/questions/32078974/sonarlint-rule-s1172-unused-method-parameters-should-be-removed-and-eventhandl
https://vald-phoenix.github.io/pylint-errors/plerr/errors/variables/W0613.html
https://stackoverflow.com/questions/59136064/python-unused-argument-needed-for-compatibility-how-to-avoid-pylint-complainin
https://pycodequ.al/docs/pylint-messages/w0613-unused-argument.html
https://pylint.pycqa.org/en/latest/user_guide/messages/warning/unused-argument.html
https://www.codegrepper.com/code-examples/python/pylint%3A+disable%3Dunused-argument
https://stackoverflow.com/questions/35469253/silence-pylint-warning-about-unused-variables-for-string-interpolation


# pylint: disable=unused-argument ? disable-possibly-unused-variable

---------------------------------------------------------------------------
W0640 (cell-var-from-loop)
---------------------------------------------------------------------------
https://vald-phoenix.github.io/pylint-errors/plerr/errors/variables/W0640.html
https://pylint.pycqa.org/en/latest/user_guide/messages/warning/cell-var-from-loop.html
https://pycodequ.al/docs/pylint-messages/w0640-cell-var-from-loop.html
https://github.com/PyCQA/pylint/issues/5508
https://stackoverflow.com/questions/25314547/cell-var-from-loop-warning-from-pylint

# Problematic code:
def foo(numbers):
    for i in numbers:
        def bar():
            print(i)
        bar()


# Correct code:
def bar(x):
    print(x)

def foo(numbers):
    for i in numbers:
        bar(i)



ERR
for sort_key, order in query_data['sort']:
    results.sort(key=lambda k: get_from_dot_path(k, sort_key),
                 reverse=(order == -1))


FIX

results.sort(key=lambda k, sk=sort_key: get_from_dot_path(k, sk),
             reverse=(order == -1)

import functools
results.sort(key=functools.partial(get_from_dot_path, foo=sort_key),
             reverse=(order == -1))

##########################################################################
pylint in pycharm as external tool
##########################################################################
https://stackoverflow.com/questions/38134086/how-to-run-pylint-with-pycharm
https://github.com/leinardi/pylint-pycharm
https://www.jetbrains.com/help/pycharm/configuring-third-party-tools.html
https://plugins.jetbrains.com/plugin/11084-pylint


# sudo apt install plocate -y

pip install pylint

which pylint
/usr/local/bin/pylint

pycharm
Program: path to your installation of pylint-pycharm
Arguments: --virtualenv=$PyInterpreterDirectory$/.. $FileName$
Working directory: $FileDir$
Output filters: $FILE_PATH$\:$LINE$\:$COLUMN$\:.*


##########################################################################
Invalid escape sequence 'x' (W605)
##########################################################################
https://www.flake8rules.com/rules/W605.html
https://regex101.com/

Anti-pattern
regex = '\.png$'

Best practice
regex = r'\.png$'



##########################################
sonarlint
##########################################

https://www.sonarlint.org/
https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode
https://sonarcloud.io/
https://www.sonarqube.org/
https://plugins.jetbrains.com/plugin/7973-sonarlint#Jetbrains

https://community.sonarsource.com/c/sl/11
https://community.sonarsource.com/t/frequently-asked-questions/7204
https://community.sonarsource.com/


pend('/home/workspace/myproj/myproj')