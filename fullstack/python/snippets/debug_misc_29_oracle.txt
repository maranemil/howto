##########################################################################
cx_Oracle
##########################################################################

https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html
https://cx-oracle.readthedocs.io/en/latest/
https://pypi.org/project/cx-Oracle/
https://github.com/oracle/python-cx_Oracle
https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/dialects/oracle/cx_oracle.py
https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/dialects/mysql/mariadb.py
https://docs.sqlalchemy.org/en/14/dialects/oracle.html
https://oracle.github.io/python-cx_Oracle/
https://docs.oracle.com/en/database/oracle/oracle-database/index.html
https://docs.oracle.com/en/database/oracle/oracle-database/21/install-and-upgrade.html
https://docs.oracle.com/en/database/oracle/oracle-database/21/deeck/index.html

python -m pip install cx_Oracle --upgrade
python -m pip install cx_Oracle --upgrade --user

engine = create_engine(
    "oracle+cx_oracle://scott:tiger@oracle122",
    max_identifier_length=30)


# myscript.py

import cx_Oracle

# Connect as user "hr" with password "welcome" to the "orclpdb1" service running on this computer.
connection = cx_Oracle.connect(user="hr", password="welcome",
                               dsn="localhost/orclpdb1")

cursor = connection.cursor()
cursor.execute("""
        SELECT first_name, last_name
        FROM employees
        WHERE department_id = :did AND employee_id > :eid""",
        did = 50,
        eid = 190)
for fname, lname in cursor:
    print("Values:", fname, lname)



######################################################
Python to MariaDB Connector
######################################################

https://mariadb.com/resources/blog/how-to-connect-python-programs-to-mariadb/
https://pypi.org/project/mariadb/
https://mariadb.com/docs/connect/programming-languages/python/install/

pip3 install mariadb
pip install mariadb


pip search mysql-connector | grep --color mysql-connector-python

PyPI's XMLRPC API is currently disabled due to unmanageable load and will be deprecated in the near future.
https://pypi.org/
https://github.com/jeffmm/pypi-simple-search
https://github.com/shubhodeep9/pipsearch

https://stackoverflow.com/questions/72879852/python-setup-py-egg-info-did-not-run-successfully-when-pip-install-mariadb

If MariaDB Connector/C is not installed, see installation instructions
If MariaDB Connector/C is installed, either set the environment variable
MARIADB_CONFIG or edit the configuration file 'site.cfg' to set the
'mariadb_config' option to the file location of the mariadb_config utility.


sudo apt-get install libmariadb3 libmariadb-dev
pip install --upgrade setuptools

mariadb_python.h:21:10: fatal error: Python.h:

sudo apt install mariadb-connector-c-devel gcc python3-devel
sudo apt-get install mariadb-connector-c-devel
python3 -m pip install mariadb

https://www.virtuozzo.com/application-platform-docs/connection-to-mysql-python/

pip install mysql-connector

https://linuxhint.com/modulenotfounderror-module-named-mysqldb/
https://teracontent.com/how-to-use-mysql-mariadb-with-python-tutorial/

pip3 install mysql-connector-python
pip3 install mysql-python
pip3 install mysqlclient

pip install mysql-connector-python
pip install mysql-python
pip install mysqlclient

conda install -c anaconda mysql-python
conda install -c anaconda mysql-connector-python

import MySQLdb

...

apt install python3-pip
python3 -m pip install mysql-connector
python3 -m pip search mysql-connector | grep --color
python3 -m pip install mysql-connector-python-rf
apt install python3-mysqldb

sudo apt install libmariadb-dev
pip install mysql-connector

https://bobbyhadz.com/blog/python-no-module-named-mysql
https://www.datasciencelearner.com/importerror-no-module-named-mysqldb-fix/
https://techglimpse.com/no-module-named-mysqldb-solution/

pip3 install mysql-connector-python
sudo pip3 install mysql-connector-python
pip3 install mysql-connector-python-rf
pip install PyMySQL
conda install -c anaconda pymysql

pip install MySQL-python
sudo apt install python3-mysqldb

----------
https://docs.sqlalchemy.org/en/14/core/engines.html

FIX

mysql+pymysql 		- OK - pip install pymysql
mysql+mysqlconnector 	- OK - pip install mysql-connector-python

mysql+asyncmy 	?  https://github.com/long2ice/asyncmy
mysql+aiomysql 	?  https://github.com/aio-libs/aiomysql
mysql+oursql 	?  https://pythonhosted.org/oursql/
mysql+pyodbc 	?  https://pypi.org/project/pyodbc/  pip install pyodbc


# https://docs.sqlalchemy.org/en/14/orm/extensions/asyncio.html
from sqlalchemy.ext.asyncio import create_async_engine
engine = create_async_engine("mysql+aiomysql://user:pass@hostname/dbname?charset=utf8mb4")



#######################################################
MySQL to Oracle Migration Reference
#######################################################

http://www.sqlines.com/online
https://www.sqlines.com/mysql-to-oracle
https://www.sqlines.com/mysql-to-oracle#sqlines-sql-converter-tool
https://stackoverflow.com/questions/14829227/how-can-i-automatically-convert-mysql-ddl-to-oracle-ddl

https://www.oracle.com/database/sqldeveloper/
https://www.oracle.com/database/sqldeveloper/technologies/download/

https://www.mysql.com/products/workbench/


csvkit 2 oracle

https://csvkit.readthedocs.io/en/latest/scripts/csvsql.html
https://manpages.ubuntu.com/manpages/impish/man1/csvsql.1.html
https://github.com/wireservice/csvkit/blob/master/csvkit/utilities/csvsql.py
https://old.frictionlessdata.io/specs/csv-dialect/
https://csvkit.readthedocs.io/en/latest/scripts/csvsql.html#examples
https://s3.amazonaws.com/assets.datacamp.com/production/course_15878/slides/chapter3.pdf

-i {firebird,mssql,mysql,oracle,postgresql,sqlite,sybase,crate},
--dialect {firebird,mssql,mysql,oracle,postgresql,sqlite,sybase,crate}
                        Dialect of SQL to generate. Cannot be used with --db.


csvsql --dialect oracle state.csv > oracle_state.sql
csvsql -i oracle state.csv > oracle_state.sql

----

Oracle DATA PUMP Using SQLPLUS SPOOL command
https://dwbi.org/pages/43
https://dwbi.org/pages/42

emp_query.sql
SELECT EMPNO ||',' || ENAME || ',' || SAL || ',' || COMM FROM EMP;
SQL> CONN SCOTT/TIGER@ORCL
Connected.
SQL> SET FEEDBACK OFF HEADING OFF ECHO OFF
SQL> SPOOL C:\External_Tables\emp.csv
SQL> @C:\External_Tables\emp_query.sql
SQL> SPOOL OFF
host type C:\External_Tables\emp.csv



##############################################################
Connect Python to Oracle Database
##############################################################

https://datatofish.com/how-to-connect-python-to-an-oracle-database-using-cx_oracle/
https://blogs.oracle.com/coretec/post/python-mit-oracle-database-so-einfach-geht-das
https://www.oracletutorial.com/python-oracle/connecting-to-oracle-database-in-python/
https://oracle.github.io/python-cx_Oracle/samples/tutorial/Python-and-Oracle-Database-Scripting-for-the-Future.html
https://www.geeksforgeeks.org/oracle-database-connection-in-python/
https://stackoverflow.com/questions/3521692/how-can-i-access-oracle-from-python


sudo apt install python3-pip
pip install cx_Oracle

python -m pip install cx_Oracle --upgrade
python3 -m pip install cx_Oracle --upgrade


open tnsnames.ora file and look for your desired connection.



import cx_Oracle

dsn_tns = cx_Oracle.makedsn('Host Name', 'Port Number', service_name='Service Name')
conn = cx_Oracle.connect(user=r'User Name', password='Personal Password', dsn=dsn_tns)

c = conn.cursor()
c.execute('select * from database.table') # use triple quotes if you want to spread your query across multiple lines
for row in c:
    print (row[0], '-', row[1]) # this only shows the first two columns. To add an additional column you'll need to add , '-', row[2], etc.
#conn.close()


select sys_context('userenv','service_name') from dual
select username from dba_users

...

import cx_Oracle
db_connection_string = 'username/passwort@hostname.de.oracle.com:1521/servicename'
con = cx_Oracle.connect(db_connection_string)
print("Database version:", con.version)
con.close()


import cx_Oracle
db_connection_string = 'username/passwort@servicename'
con = cx_Oracle.connect(db_connection_string)
print("Database version:", con.version)
con.close()

...

import cx_Oracle
con = cx_Oracle.connect('username/password@localhost')
cursor = con.cursor()
cursor.execute(sqlquery)
cursor.executemany(sqlqueries)
cursor.close()
con.close()



1. Creation of table
------------------------
# importing module
import cx_Oracle

# Create a table in Oracle database
try:

    con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')
    print(con.version)

    # Now execute the sqlquery
    cursor = con.cursor()

    # Creating a table employee
    cursor.execute(
        "create table employee(empid integer primary key, name varchar2(30), salary number(10, 2))")

    print("Table Created successfully")

except cx_Oracle.DatabaseError as e:
    print("There is a problem with Oracle", e)

# by writing finally if any error occurs
# then also we can close the all database operation
finally:
    if cursor:
        cursor.close()
    if con:
        con.close()


..

2. Inserting a record into table using execute() method
------------------------

# importing module
import cx_Oracle

# Inserting a record into a table in Oracle database
try:
    con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')
    cursor = con.cursor()

    #con.autocommit = True
    # Inserting a record into table employee
    cursor.execute('insert into employee values(10001,\'Rahul\',50000.50)')

    # commit() to make changes reflect in the database
    con.commit()
    print('Record inserted successfully')

except cx_Oracle.DatabaseError as e:
    print("There is a problem with Oracle", e)

# by writing finally if any error occurs
# then also we can close the all database operation
finally:
    if cursor:
        cursor.close()
    if con:
        con.close()


 3. Inserting multiple records into a table using executemany() method
------------------------

import cx_Oracle

# Load data from a csv file into Oracle table using executemany
try:
    con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')

except cx_Oracle.DatabaseError as er:
    print('There is an error in Oracle database:', er)

else:
    try:
        cur = con.cursor()
        data = [[10007, 'Vikram', 48000.0], [10008, 'Sunil', 65000.1], [10009, 'Sameer', 75000.0]]

        cur = con.cursor()
        # Inserting multiple records into employee table
        # (:1,:2,:3) are place holders. They pick data from a list supplied as argument
        cur.executemany('insert into employee values(:1,:2,:3)', data)

    except cx_Oracle.DatabaseError as er:
        print('There is an error in Oracle database:', er)

    except Exception as er:
        print(er)

    else:
        # To commit the transaction manually
        con.commit()
        print('Multiple records are inserted successfully')

finally:
    if cur:
        cur.close()
    if con:
        con.close()



4. View result set from a select query using fetchall(), fetchmany(int), fetchone()
------------------------

import cx_Oracle

try:
    con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')

except cx_Oracle.DatabaseError as er:
    print('There is an error in the Oracle database:', er)

else:
    try:
        cur = con.cursor()

        # fetchall() is used to fetch all records from result set
        cur.execute('select * from employee')
        rows = cur.fetchall()
        print(rows)

        # fetchmany(int) is used to fetch limited number of records from result set based on integer argument passed in it
        cur.execute('select * from employee')
        rows = cur.fetchmany(3)
        print(rows)

        # fetchone() is used fetch one record from top of the result set
        cur.execute('select * from employee')
        rows = cur.fetchone()
        print(rows)

    except cx_Oracle.DatabaseError as er:
        print('There is an error in the Oracle database:', er)

    except Exception as er:
        print('Error:'+str(er))

    finally:
        if cur:
            cur.close()

finally:
    if con:
        con.close()



5. View result set from a select query using bind variable
------------------------

import cx_Oracle

try:
    con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')

except cx_Oracle.DatabaseError as er:
    print('There is error in the Oracle database:', er)

else:
    try:
        cur = con.cursor()

        cur.execute('select * from employee where salary > :sal', {'sal': 50000})
        rows = cur.fetchall()
        print(rows)

    except cx_Oracle.DatabaseError as er:
        print('There is error in the Oracle database:', er)

    except Exception as er:
        print('Error:', er)

    finally:
        if cur:
            cur.close()

finally:
    if con:
        con.close()


..............................

https://python-oracledb.readthedocs.io/en/latest/user_guide/connection_handling.html

import oracledb
import getpass

userpwd = getpass.getpass("Enter password: ")
connection = oracledb.connect(user="hr", password=userpwd, dsn="dbhost.example.com/orclpdb")

userpwd = os.environ.get("PYTHON_PASSWORD")
connection = oracledb.connect(user="hr", password=userpwd, dsn="localhost/orclpdb")

import os

userpwd = os.environ.get("PYTHON_PASSWORD")
connection = oracledb.connect(user="hr", password=userpwd, host="localhost", port=1521, service_name="orclpdb")

params = oracledb.ConnectParams(host="my_host", port=my_port, service_name="my_service_name")
conn = oracledb.connect(user="my_user", password="my_password", params=params)

..............................

import cx_Oracle

conn_str = u'user/password@host:port/service'
conn = cx_Oracle.connect(conn_str)
c = conn.cursor()
c.execute(u'select your_col_1, your_col_2 from your_table')
for row in c:
    print row[0], "-", row[1]
conn.close()

..............................


import pandas as pd
import cx_Oracle
conn= cx_Oracle.connect('username/pwd@host:port/service_name')
try:
    query = '''
         SELECT * from dual
             '''
    df = pd.read_sql(con = conn, sql = query)
finally:
    conn.close()
df.head()

..............................

With SID:

import cx_Oracle
dsn_tns = cx_Oracle.makedsn('server', 'port', 'sid')
conn = cx_Oracle.connect(user='username', password='password', dsn=dsn_tns)
c = conn.cursor()
c.execute('select count(*) from TABLE_NAME')
for row in c:
   print(row)
conn.close()

With Service Name:

import cx_Oracle
dsn_tns = cx_Oracle.makedsn('server', 'port', service_name='service_name')
conn = cx_Oracle.connect(user='username', password='password', dsn=dsn_tns)
c = conn.cursor()
c.execute('select count(*) from TABLE_NAME')
for row in c:
   print(row)
conn.close()

..............................

import cx_Oracle
   dsn_tns = cx_Oracle.makedsn('host', 'port', service_name='give service name')
   conn = cx_Oracle.connect(user='username', password='password', dsn=dsn_tns)
   c = conn.cursor()
   c.execute('select count(*) from schema.table_name')
for row in c:
   print row
conn.close()

..............................

config.py

username = 'OT'
password = '<password>'
dsn = 'localhost/pdborcl'
port = 1512
encoding = 'UTF-8'


connect.py

import cx_Oracle
import config

connection = None
try:
    connection = cx_Oracle.connect(
        config.username,
        config.password,
        config.dsn,
        encoding=config.encoding)

    # show the version of the Oracle Database
    print(connection.version)
except cx_Oracle.Error as error:
    print(error)
finally:
    # release the connection
    if connection:
        connection.close()




connect_pool.py

import cx_Oracle
import config

# Create the session pool
pool = cx_Oracle.SessionPool(
    config.username,
    config.password,
    config.database,
    min=100,
    max=100,
    increment=0,
    encoding=config.encoding
)

# Acquire a connection from the pool
connection = pool.acquire()

# Use the pooled connection
print('Using the connection')

# Release the connection to the pool
pool.release(connection)

# Close the pool
pool.close()




