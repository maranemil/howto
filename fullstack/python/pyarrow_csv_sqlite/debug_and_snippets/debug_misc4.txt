####################################################
pyarrow append
####################################################

https://stackoverflow.com/questions/47113813/using-pyarrow-how-do-you-append-to-parquet-file
https://stackoverflow.com/questions/32940416/methods-for-writing-parquet-files-using-python
https://arrow.apache.org/docs/python/parquet.html

import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq


chunksize=10000 # this is the number of lines

pqwriter = None
for i, df in enumerate(pd.read_csv('sample.csv', chunksize=chunksize)):
    table = pa.Table.from_pandas(df)
    # for the first chunk of records
    if i == 0:
        # create a parquet write object giving it an output file
        pqwriter = pq.ParquetWriter('sample.parquet', table.schema)
    pqwriter.write_table(table)

# close the parquet writer
if pqwriter:
    pqwriter.close()


####################################################
unhashable type list
####################################################

https://rollbar.com/blog/handling-unhashable-type-list-exceptions/
https://bobbyhadz.com/blog/python-typeerror-unhashable-type-list
https://www.datasciencelearner.com/typeerror-unhashable-type-list-fix-easily/
https://itsmycode.com/typeerror-unhashable-type-list/
https://stackoverflow.com/questions/62750576/write-nested-parquet-format-from-python


# load packages

import pandas as pd
import json
import pyarrow as pa
import pyarrow.parquet as pq

# Create dummy data
# dummy data with JSON as string
person_data = {'Name':  ['Bob'],
        'Age': [25],
        'languages': "{'mother_language': 'English', 'other_languages': ['German', 'French']}"
        }

# from dict to panda df
person_df = pd.DataFrame.from_dict(person_data)

# from panda df to pyarrow table
person_pat = pa.Table.from_pandas(person_df)

# save as parquet file
pq.write_table(person_pat, 'output/example.parquet')




# load dummy data
sample = pa.parquet.read_table('output/example.parquet')

# transform to dict
sample_dict = sample.to_pydict()
# print with indent for checking
print(json.dumps(sample_dict, sort_keys=True, indent=4))
# load json from string and replace string
sample_dict['languages'] = json.loads(str(sample_dict['languages']))
print(json.dumps(sample_dict, sort_keys=True, indent=4))
#type(sample_dict['languages'])


####################################################
convert dictionary into list
####################################################
https://pythonguides.com/python-convert-dictionary-to-list/
https://www.tutorialspoint.com/How-to-convert-Python-Dictionary-to-a-list
https://www.pythonpool.com/dictionary-to-list-python/
https://stackoverflow.com/questions/1679384/converting-dictionary-to-list
https://python-forum.io/thread-28266.html



import pandas as pd
import numpy as np
index = [('California', 2000), ('California', 2010),
         ('New York', 2000), ('New York', 2010),
         ('Texas', 2000), ('Texas', 2010)]
populations = [33871648, 37253956,
               18976457, 19378102,
               20851820, 25145561]
index = pd.MultiIndex.from_tuples(index)
print(index)
pop = populations.reindex(index)
population = pd.DataFrame(populations, index=index)


my_dict ={"b":20,"c":10}
con_lis = list(my_dict.items())
print("Converted dict to list:",con_lis)


to_dict ={"d":50,"f":10,"g":40}
new_val = list(to_dict.values())
print("Converted dict to list:",new_val)


to_dict ={"i":160,"w":110,"s":340}
m = list(zip(to_dict.keys(), to_dict.values()))
print("Convert dictionary to list:",m)


new_dict ={"z":320,"p":430,"o":245}
n_val = list(new_dict.keys())
print("Convert dictionary to list",n_val)

n_dictionary ={"James":240,"William":180,"Chris":140}
n_lis = [(key, value) for key, value in n_dictionary.items()]
print(n_lis)


my_dict ={"Newzealand":860,"Swizerland":780,"Moscow":340}
con_val= list(map(list,my_dict.items()))
print(con_val)


dictionary = {"u":67, "m":18,"f":92}
my_lis = []
for new_k, new_v in dictionary.items():
    my_lis.append([new_k, new_v])
print("Dictionary to list",my_lis)


to_dictionary = {"h":[51], "g":[198],"l":[912]}
output = [[new_key] + new_val for new_key, new_val in to_dictionary.items()]
print(output)



import collections
my_dictionary = { "U.S.A": 74, "Algeria":82, "Cambodia": 51 }
new_tup_lis = collections.namedtuple('my_lis', 'Country val')
convert_lis = list(new_tup_lis(*item) for item in my_dictionary.items())
print(convert_lis)



new_dictiy = { "p" : [4, 9], "d" : [5, 8], "l" : [19, 18] }
con_li_dic = [{new_k : new_val[x] for new_k, new_val in new_dictiy.items()}
         for x in range(2)]
print ("Convert list into dictionaries:",con_li_dic)



d = {"name":"python", "version":3.9}
new_list = list(d.items())
print(new_list)


d = {"name":"python", "version":3.9}
new_list = list(d.values())
print(new_list)


d = {"name":"python", "version":3.9}
new_list = []
for key, val in d.items():
    new_list.append([key, val])
print(new_list)


d = {"name":"python", "version":3.9}
new_list = [(k, v) for k, v in d.items()]
print(new_list)


d = {"name":"python", "version":3.9}
new_list = zip(d.keys(), d.values())
new_list = list(new_list)
print(new_list)


d = {"name":"python", "version":3.9}
new_list = list(map(list, d.items()))
print(new_list)

####################################################
'list' object has no attribute 'values' when we are using append
####################################################

https://datascience.stackexchange.com/questions/62819/list-object-has-no-attribute-values-when-we-are-using-append-in-python
https://researchdatapod.com/how-to-solve-python-attributeerror-list-object-has-no-attribute-apply/
https://bobbyhadz.com/blog/python-attributeerror-list-object-has-no-attribute



y =y.values().astype(int)

convert y to a list of integers you can use list comprehension:
y = [int(x) for x in y]

use map as alternative:
y = list(map(int, y))

lst = ["2", "4", "6", "8", "10", "12"]
lst.apply(lambda x: int(x)
print(lst)

lst = ["2", "4", "6", "8", "10", "12"]
int_lst = [int(x) for x in lst]
print(int_lst)

lst = ["2", "4", "6", "8", "10", "12"]
int_lst = list(map(int, lst))
print(int_lst)


####################################################
AttributeError: 'list' object has no attribute 'reset_index'
####################################################
https://stackoverflow.com/questions/56213580/attributeerror-list-object-has-no-attribute-reset-index

new.groupby('car').price

https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
https://docs.sqlalchemy.org/en/14/core/connections.html


####################################################
How do I use itertools.groupby()?
####################################################

https://stackoverflow.com/questions/773/how-do-i-use-itertools-groupby
https://www.geeksforgeeks.org/itertools-groupby-in-python/
https://www.pythonpool.com/pythons-itertools-groupby/


# want to use it like itertools.groupby()
import itertools
# want to use directly
from itertools import groupby

groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
   groups.append(list(g))    # Store group iterator as a list
   uniquekeys.append(k)


from itertools import groupby
things = [("animal", "bear"), ("animal", "duck"), ("plant", "cactus"), ("vehicle", "speed boat"), ("vehicle", "school bus")]
for key, group in groupby(things, lambda x: x[0]):
    for thing in group:
        print("A %s is a %s." % (thing[1], key))
    print("")


for key, group in groupby(things, lambda x: x[0]):
    listOfThings = " and ".join([thing[1] for thing in group])
    print(key + "s:  " + listOfThings + ".")




import itertools
string = 'aaaabbbbbbcccdddddd'
string_tuple = itertools.groupby(string)
print(string_tuple, type(string_tuple))

for item in string_tuple:
    print(item)

for key, iter_item in string_tuple:
    print(f"Key:{key}")
    for item in iter_item:
        print(item,end=" ")
    print()


import itertools

anagrams =['angel','below','glean','bored','robed','study','dusty','cat','act','inch','chin','taste','state','elbow']
grouped_anagrams = [list(group) for key, group in itertools.groupby(sorted(anagrams, key=sorted),sorted)]
print(grouped_anagrams)


https://note.nkmk.me/en/python-itertools-groupby/

import itertools

l = [0, 0, 0, 1, 1, 2, 0, 0]
print([(k, list(g)) for k, g in itertools.groupby(l)])
# [(0, [0, 0, 0]), (1, [1, 1]), (2, [2]), (0, [0, 0])]
print([k for k, g in itertools.groupby(l)])
# [0, 1, 2, 0]

print([list(g) for k, g in itertools.groupby(l)])
# [[0, 0, 0], [1, 1], [2], [0, 0]]

print([(k, list(g)) for k, g in itertools.groupby(l)])
# [(0, [0, 0, 0]), (1, [1, 1]), (2, [2]), (0, [0, 0])]


####################################################
Python - TypeError: 'object' object is not iterable
####################################################

print(dir(perfectNum))
print(list(perfectNum))
print(list(dict(some_map).items())[:3])


####################################################
Python - print map object
####################################################

some_map = map(....)

import csv
dictsome = dict(some_map)
with open('some.csv', 'w') as f:
    f.write("key;value\n")
    for key in dictsome.keys():
        f.write("%s; %s\n" % (key, dictsome[key]))

some_csv = pd.read_csv("some.csv", delimiter=';', sep=';', usecols=['key','value'], skipinitialspace=True)
print(some_csv.head(3))




####################################################
Python - read csv without index
####################################################

https://stackoverflow.com/questions/12960574/pandas-read-csv-index-col-none-not-working-with-delimiters-at-the-end-of-each-li
https://sparkbyexamples.com/pandas/pandas-to-csv-no-index/


df = pd.read_csv('file.csv', index_col=0)
pd.read_csv("file.csv", sep=';', usecols=['key', 'value'], skipinitialspace=True, low_memory=True, nrows=10, index_col=0)

# get values
df.to_dict().values()
print(list(df.to_dict().values())) # iterable
print(dict(df.to_dict()).values())

# iterable
pr1 = (x for x in dict(df.to_dict()).values())
print(pr1)
print(pr1.__next__())


# to dict
df2 = list(df.to_dict().values())
    mydict = {}
    for item in df2:
        mydict.update(item)

# make series
pd.Series(mydict) ..


####################################################
AttributeError:
'dict' object has no attribute '__next__'
'list' object has no attribute '__next__'
####################################################

https://stackoverflow.com/questions/18547878/attribute-error-next

# iterable
pr1 = (x for x in dict(df.to_dict()).values())
print(pr1)
print(pr1.__next__())



####################################################
redis 4.3.4
####################################################

pip install redis

https://pypi.org/project/redis/
https://github.com/redis/redis-py
https://docs.redis.com/latest/rs/references/client_references/client_python/
https://redis.io/docs/stack/get-started/tutorials/stack-python/

import redis

r = redis.Redis(
    host='hostname',
    port=port,
    password='password')

r.set('foo', 'bar')
value = r.get('foo')
print(value)



####################################################
pyarrow Table
####################################################

https://arrow.apache.org/docs/python/api/datatypes.html
https://arrow.apache.org/docs/cpp/datatypes.html
https://arrow.apache.org/cookbook/py/schema.html#setting-the-data-type-of-an-arrow-array
https://arrow.apache.org/cookbook/py/schema.html
https://arrow.apache.org/docs/python/generated/pyarrow.Table.html
https://arrow.apache.org/docs/python/generated/pyarrow.schema.html
https://arrow.apache.org/docs/python/generated/pyarrow.Table.html
https://arrow.apache.org/docs/python/generated/pyarrow.Table.html
https://arrow.apache.org/docs/python/generated/pyarrow.RecordBatch.html#pyarrow.RecordBatch.from_pydict
https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetWriter.html
https://arrow.apache.org/docs/python/parquet.html
https://arrow.apache.org/docs/7.0/python/generated/pyarrow.Table.html
https://pitrou.net/arrowdevdoc/python/parquet.html
https://pitrou.net/arrowdevdoc/python/parquet.html


https://spark.apache.org/docs/latest/sql-data-sources-parquet.html
https://wesm.github.io/arrow-site-test/python/generated/pyarrow.Table.html
https://docs-snaplogic.atlassian.net/wiki/spaces/SD/pages/1438227/Parquet+Writer

import pyarrow.parquet as pq

pylist2 = [{'n_legs': 2, 'animals': 'Flamingo'}, {'year': 2021, 'animals': 'Centipede'}]
my_schema2 = pa.schema([
    pa.field('year', pa.int64()),
    pa.field('n_legs', pa.int64()),
    pa.field('animals', pa.string())],
    metadata={"year": "Year of entry"})

table = pa.Table.from_pylist(pylist2, schema=my_schema2)
table.schema

writer = pq.ParquetWriter('test_123_2.parquet', schema=my_schema2)
writer.write_table(table)
writer.close()
df2 = pd.read_parquet('test_123_2.parquet')
print(df2.head(3))




https://github.com/apache/arrow/issues/13142
https://stackoverflow.com/questions/56981659/how-to-write-parquet-with-user-defined-schema-through-pyarrow
https://stackoverflow.com/questions/33813815/how-to-read-a-parquet-file-into-pandas-dataframe
https://snyk.io/advisor/python/pyarrow/functions/pyarrow.Table.from_pandas
https://stackoverflow.com/questions/49565713/assign-schema-to-pa-table-from-pandas
https://docs.python.org/3/library/sqlite3.html


-------------------------------------------------------------------
####################################################
Convert Pandas DataFrame into a List
####################################################

https://datatofish.com/convert-pandas-dataframe-to-list/

df.values.tolist()

import pandas as pd

data = {'product': ['Tablet','Printer','Laptop','Monitor'],
        'price': [250,100,1200,300]
        }

df = pd.DataFrame(data)

products_list = df.values.tolist()
print(products_list)
print(type(products_list))

####################################################
Convert Pandas DataFrame into a List of dict
####################################################

https://datatofish.com/convert-pandas-dataframe-to-list/
https://stackoverflow.com/questions/29815129/pandas-dataframe-to-list-of-dictionaries
https://datascientyst.com/convert-dataframe-list-dictionaries-pandas/
https://www.geeksforgeeks.org/create-a-pandas-dataframe-from-list-of-dicts/
https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_dict.html
https://www.codegrepper.com/code-examples/whatever/dataframe+to+list+of+dicts

rows = [
    {
        'customer': 1,
        'item1': 'apple',
        'item2': 'milk',
        'item3': 'tomato'
    }
]

df = pd.DataFrame(rows)
df.to_dict('records') # FIX
df.T.to_dict().values()

# list of dict
import pandas as pd
your_list = [{'points': 50, 'time': '5:00', 'year': 2010},
 {'points': 25, 'time': '6:00', 'month': "february"},
 {'points':90, 'time': '9:00', 'month': 'january'},
 {'points_h1':20, 'month': 'june'}]
df = pd.DataFrame(your_list)

# list of dict
df = pd.DataFrame({'Name': ['John', 'Sara','Peter','Cecilia'],
                   'Age': [38, 47,63,28],
                  'City':['Boston', 'Charlotte','London','Memphis']})
datadict = df.to_dict('records')



####################################################
convert index of a pandas dataframe into a column
####################################################

https://stackoverflow.com/questions/20461165/how-to-convert-index-of-a-pandas-dataframe-into-a-column
https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.set_index.html
https://sparkbyexamples.com/pandas/pandas-set-index-to-column-in-dataframe/
https://datatofish.com/index-to-column-pandas-dataframe/

df['index1'] = df.index

df.reset_index(inplace=True)
df.reset_index(inplace=True)
df = df.rename(columns = {'index':'new column name'})


import pandas as pd
data = {'Product': ['Computer','Printer','Monitor','Desk','Phone'],
          'Price': [1200,250,400,700,350]
        }
df = pd.DataFrame(data, columns = ['Product','Price'], index = ['Item_1','Item_2','Item_3','Item_4','Item_5'])
print(df)

df.reset_index(inplace=True)
import pandas as pd
data = {'Product': ['Computer','Printer','Monitor','Desk','Phone'],
          'Price': [1200,250,400,700,350]
        }
df = pd.DataFrame(data, columns = ['Product','Price'], index = ['Item_1','Item_2','Item_3','Item_4','Item_5'])
df.reset_index(inplace=True)
print(df)




#df = df.reset_index(level=0)
#df.reset_index(level=['tick', 'obs'])
#df = df.rename_axis('index1').reset_index()
#df = df.rename_axis(['index1', 'index2', 'index3']).reset_index()

index = pd.MultiIndex.from_product([['TX', 'FL', 'CA'],
                                    ['North', 'South']],
                                   names=['State', 'Direction'])

df = pd.DataFrame(index=index,
                  data=np.random.randint(0, 10, (6,4)),
                  columns=list('abcd'))
df.reset_index()
df.reset_index(level='State')





