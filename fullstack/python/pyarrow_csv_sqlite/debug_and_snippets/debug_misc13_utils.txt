-----------------------------------------------------------------------------
################################################################
Extract file name from path,
################################################################

https://stackoverflow.com/questions/8384737/extract-file-name-from-path-no-matter-what-the-os-path-format

import os
print(os.path.basename(your_path))

-----------------------------------------------------------------------------

Online Python compiler (interpreter) to run Python online.
https://www.programiz.com/python-programming/online-compiler/

-----------------------------------------------------------------------------

################################################################
list-all-files-of-a-directory
################################################################
https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory

from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]


from os import walk
f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break


from os import walk
filenames = next(walk(mypath), (None, None, []))[2]  # [] if no file



import glob
# All files and directories ending with .txt and that don't begin with a dot:
print(glob.glob("/home/adam/*.txt"))
# All files and directories ending with .txt with depth of 2 folders, ignoring names beginning with a dot:
print(glob.glob("/home/adam/*/*.txt"))


import os
arr = os.listdir()
arr = os.listdir('tmp/')

import glob
txtfiles = []
for file in glob.glob("*.txt"):
    txtfiles.append(file)

mylist = [f for f in glob.glob("*.txt")]


import os
from os import listdir
from os.path import isfile, join
cwd = os.getcwd()
onlyfiles = [os.path.join(cwd, f) for f in os.listdir(cwd) if
os.path.isfile(os.path.join(cwd, f))]
print(onlyfiles)

-----------------------------------------------------------------------------------------
################################################################
clear swap memory linux
################################################################

https://www.redhat.com/sysadmin/clear-swap-linux
https://askubuntu.com/questions/1357/how-to-empty-swap-if-there-is-free-ram
https://linuxhandbook.com/clear-swap/
https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/

free -m
sudo swapoff -a
sudo swapon -a

sudo swapoff -a; sudo swapon -a
sudo swapoff --all
sudo swapoff -a && sudo swapon -a


sync; echo 1 > /proc/sys/vm/drop_caches
sync; echo 2 > /proc/sys/vm/drop_caches
sync; echo 3 > /proc/sys/vm/drop_caches

sudo swapoff -a && sudo fallocate -l 8G /swapfile3 && sudo chmod 600 /swapfile3 && sudo mkswap /swapfile3 && sudo swapon /swapfile3 -a && swapon -s && swapon --show


sudo swapon --all

------------------------------------------------------------------------------------
################################################################
Clear Cache
################################################################

https://pypi.org/project/clear-cache/
https://pypi.org/project/cleanpy/
https://stackoverflow.com/questions/43459673/clear-cache-or-memory-in-python
https://linuxhint.com/pip-clear-cache/
https://www.programcreek.com/python/?CodeExample=clear+cache
https://github.com/streamlit/streamlit/issues/732
https://sourceexample.com/article/en/2a5f7e8460daa23d12e07b8c6adb8275/
https://www.codegrepper.com/code-examples/python/clear+all+python+cache
https://www.geeksforgeeks.org/clear-lru-cache-in-python/

python -m pip install clear_cache

from clear_cache import clear as clear_cache
clear_cache(dir = ".")

MyVariable = None

from streamlit import caching
caching.clear_cache()

import streamlit as st
st.legacy_caching.clear_cache()

------------------------------------------------------------------------------------

os.makedirs('tmp', exist_ok=True)

------------------------------------------------------------------------------------
################################################################
JAVA_HOME is not set
################################################################

java --version

sudo apt install default-jre              # version 2:1.11-72build2, or
sudo apt install openjdk-11-jre-headless  # version 11.0.16+8-0ubuntu1~22.04
sudo apt install openjdk-17-jre-headless  # version 17.0.3+7-0ubuntu0.22.04.1
sudo apt install openjdk-18-jre-headless  # version 18~36ea-1
sudo apt install openjdk-8-jre-headless   # version 8u312-b07-0ubuntu1

java.sql.SQLException: No suitable driver

java -cp mysql-connector-java-5.1.18-bin.jar:. MySQLTest
java -classpath ".;sqlite-jdbc-3.27.2.1.jar" net.sqlitetutorial.Connect
java -cp .:sqlitejdbc-v056.jar Test


org.sqlite.JDBC
sqlite-jdbc-3.7.2.jar
https://github.com/xerial/sqlite-jdbc

WARNING:root:'PYARROW_IGNORE_TIMEZONE' environment variable was not set. It is required to set this environment variable to '1' in both driver and executor sides if you use pyarrow>=2.0.0. pandas-on-Spark will set it for you but it does not work if there is a Spark context already launched.

java.lang.ClassNotFoundException: com.sqlite.jdbc.Driver

https://sparkbyexamples.com/pandas/pandas-read-sql-query-or-table/
https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html
https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql_table.html
https://arrow.apache.org/docs/python/parquet.html#finer-grained-reading-and-writing


https://dbschema.com/download.html

https://dbschema.com/jdbc-drivers/SqliteJdbcDriver.zip
https://dbschema.com/download/DbSchema_linux_9_0_3.deb


---------------------------------------------------------------------------------------

####################################################
python process killed
####################################################

https://stackoverflow.com/questions/726690/what-killed-my-process-and-why

If the user or sysadmin did not kill the program the kernel may have.
The kernel would only kill a process under exceptional circumstances such as extreme resource starvation

dmesg -T| grep -E -i -B100 'killed process'
dmesg -T| grep -E 'Killed process'

Out of memory: Killed process 4002 (python3) total-vm:6229292kB, anon-rss:4494588kB, file-rss:0kB, shmem-rss:0kB, UID:1000 pgtables:11508kB oom_score_adj:0

---------------------------------------------------------------------------------------

################################################################
count files
################################################################

https://devconnected.com/how-to-count-files-in-directory-on-linux/
https://stackoverflow.com/questions/10238363/how-to-get-wc-l-to-print-just-the-number-of-lines-without-file-name
https://stackoverflow.com/questions/9157138/recursively-counting-files-in-a-linux-directory

ls tmp/ | wc -l
find tmp/ -type f | wc -l

---------------------------------------------------------------------------------------

####################################################
clear variable
####################################################

https://stackoverflow.com/questions/8237647/clear-variable-in-python
https://exerror.com/how-to-clear-variables-in-python/


If want to totally delete it use del:
del your_variable


Or otherwise, to make the value None:
your_variable = None

If it's a mutable iterable (lists, sets, dictionaries, etc, but not tuples because
they're immutable), you can make it empty like:

your_variable.clear()

---------------------------------------------------------------------------------------

####################################################
unix timestamp
####################################################
https://stackoverflow.com/questions/16755394/what-is-the-easiest-way-to-get-current-gmt-time-in-unix-timestamp-format


import time
time.time()

import time
int(time.time())

from datetime import datetime
datetime.utcnow().timestamp()

from datetime import datetime
print(datetime.now().timestamp())

####################################################
delete file if exists
####################################################
https://appdividend.com/2021/08/13/how-to-delete-file-if-exists-in-python/#:~:text=To%20delete%20a%20file%20if,remove()%20method.

import os
if os.path.exists("app.cpp"):
    os.remove("app.cpp")
    print("The file has been deleted successfully")
else:
    print("The file does not exist!")


####################################################
    'list' object has no attribute 'reset_index'
####################################################

() - truple
{} - dict
[] - list

parquet must have string column names
https://github.com/pandas-dev/pandas/issues/25043
https://fixexception.com/pandas/parquet-must-have-string-column-names/
https://stackoverflow.com/questions/54861430/how-do-i-save-multi-indexed-pandas-dataframes-to-parquet
https://www.codegrepper.com/code-examples/python/parquet+must+have+string+column+names
https://gemfury.com/cytora/python:pandas/-/content/io/parquet.py
https://www.programcreek.com/python/example/126811/pyarrow.parquet
https://newbedev.com/python-parquet-must-have-string-column-names-code-example
https://docs.dask.org/en/stable/generated/dask.dataframe.to_parquet.html
https://pandas.pydata.org/pandas-docs/version/1.1/reference/api/pandas.DataFrame.to_parquet.html
https://pandas.pydata.org/pandas-docs/dev/reference/api/pandas.DataFrame.to_parquet.html
https://www.pythonfixing.com/2022/04/fixed-can-i-store-parquet-file-with.html
https://www.mikulskibartosz.name/how-to-write-parquet-file-in-python/
https://www.codegrepper.com/code-examples/python/frameworks/django/dictionary+to+parquet+python

FIX
listtop = pd.DataFrame(top.items())
listtop.head(3)
listtop.columns = listtop.columns.astype(str)
listtop.to_parquet("top.pqt")

https://docs.python.org/3/tutorial/datastructures.html

-------------------------------------------------------------------------------


####################################################
Colored text terminal
####################################################

https://stackoverflow.com/questions/287871/how-do-i-print-colored-text-to-the-terminal


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


print('\x1b[6;30;42m' + 'Success!' + '\x1b[0m')
print("\033[94m  test  \033[0m \n")


import os

# System call
os.system("")

# Class of different styles
class style():
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    UNDERLINE = '\033[4m'
    RESET = '\033[0m'

print(style.YELLOW + "Hello, World!")

-----------------------------------------------------------------------

####################################################
Validate/Check Parquet File Schema From PC/Laptop
####################################################

https://github.com/target/data-validator
https://coding-stream-of-consciousness.com/2020/03/04/validate-check-parquet-file-schema-from-pc-laptop/

pip install parquet-cli

parq part.parquet --schema
parquet-tools meta --debug part.parquet

-----------------------------------------------------------------------

python -m pip install --upgrade pip
pip install -r requirements.txt

-----------------------------------------------------------------------

####################################################
jupyter install
####################################################


sudo apt install python3-pip
pip install jupyter
jupyter notebook

sudo snap install jupyter       # version 1.0.0, or
sudo apt  install jupyter-core  # version 4.9.1-1


python -m pip install <package>

pip install wheel
pip install pandas

which python
python --version
which pip

sudo python3 -m pip install wheel
sudo python3 -m pip install pandas
sudo apt install python3-pandas

python3 -m pip install pandas
python3 -m pip --version
pip3 install --upgrade pip

python3 -V
pipenv --version
sudo apt install pipenv
pip --version
pip install --upgrade pip setuptools wheel
sudo apt install -y python3-dev

pip install -r requirements.txt

https://bobbyhadz.com/blog/python-no-module-named-pandas
http://net-informations.com/ds/err/pderr.htm

Cannot set up a python SDK at Python 3.9 (/usr/bin/python3.9). The SDK seems invalid.

rm -r .idea

python3 --version && which python3
python -m pip install --upgrade pip


####################################################
jupyter
####################################################

https://speedysense.com/install-jupyter-notebook-on-ubuntu-20-04/
https://askubuntu.com/questions/737094/jupyter-notebook-installation

sudo apt update && sudo apt -y upgrade
sudo apt install python3-pip python3-dev
sudo -H pip3 install --upgrade pip
sudo -H pip3 install virtualenv
mkdir notebook
cd notebook
virtualenv jupyterenv
source jupyterenv/bin/activate

...

pip install jupyter
jupyter notebook
http://127.0.0.1:8889/tree

..........

sudo apt-get update --fix-missing

..........

https://stackoverflow.com/questions/40993626/list-memory-usage-in-ipython-and-jupyter
https://github.com/jupyter-server/jupyter-resource-usage
https://ipython-books.github.io/44-profiling-the-memory-usage-of-your-code-with-memory_profiler/
https://waylonwalker.com/reset-ipython/

conda install -c conda-forge jupyter-resource-usage
pip install jupyter-resource-usage

import sys

# These are the usual ipython objects, including this one you are creating
ipython_vars = ['In', 'Out', 'exit', 'quit', 'get_ipython', 'ipython_vars']

# Get a sorted list of the objects and their sizes
sorted([(x, sys.getsizeof(globals().get(x))) for x in dir() if not x.startswith('_') and x not in sys.modules and x not in ipython_vars],
    key=lambda x: x[1],
    reverse=True)



-----------------------------------------------------------------------

####################################################
PHP
####################################################
sudo apt install php php-cli

sudo apt install php8.1-cli php8.1-curl php8.1-gd php8.1-intl php8.1-interbase \
    php8.1-mbstring php8.1-mongodb php8.1-mysql php8.1-opcache php8.1-pgsql php8.1-redis \
    php8.1-soap php8.1-sqlite3 php8.1-xml php8.1-xsl php8.1-yaml php8.1-zip

php -S localhost:8888
http://localhost:8888/adminer.php

-----------------------------------------------------------------------

sudo apt install bluesfish
sudo apt install kate kosole

####################################################
sqlite admins
####################################################

https://sqlitebrowser.org/
https://www.sqlitetutorial.net/sqlite-limit/
https://www.sqlite.org/limits.html

https://sqlitestudio.pl/
https://www.phpliteadmin.org/
https://dbeaver.io/download/

sudo snap install sqlitebrowser
sudo snap install dbeaver-ce

-----------------------------------------------------------------------

####################################################
memory cpu
####################################################

https://codeutility.org/python-the-right-way-to-limit-maximum-number-of-threads-running-at-once-stack-overflow/
https://pyquestions.com/the-right-way-to-limit-maximum-number-of-threads-running-at-once
https://data-flair.training/blogs/python-method/
https://docs.python.org/3/library/resource.html
http://pymotw.com/2/resource/
https://pymotw.com/3/resource/
https://www.geeksforgeeks.org/python-how-to-put-limits-on-memory-and-cpu-usage/
https://github.com/joblib/threadpoolctl
https://github.com/joblib/threadpoolctl
https://stackoverflow.com/questions/56959643/what-is-pythons-equivalent-to-ulimit

https://www.baeldung.com/linux/max-threads-per-process

ulimit -s 8192

-----------------------------------------------------------------------

sqlite3 dump data

https://www.sqlite.org/optoverview.html
https://stackoverflow.com/questions/26225210/sqlite-3-is-there-a-way-to-export-a-database-file-to-a-tab-delimited-text-file

sudo apt install sqlite3
sqlite3 -header -separator " " ./data.db "select * from datafile;" > out.csv

----------------------------------------------------------------------


####################################################
parquet-tools
####################################################

https://stackoverflow.com/questions/36140264/inspect-parquet-from-command-line
https://linuxcommandlibrary.com/man/parquet-tools
https://stackoverflow.com/questions/53306327/installing-parquet-tools
https://pypi.org/project/parquet-tools/
https://github.com/ktrueda/parquet-tools
https://formulae.brew.sh/formula/parquet-tools
https://parquet.apache.org/
https://linuxcommandlibrary.com/man/parquet-tools
https://pypi.org/project/parquet-tools/
https://rustrepo.com/repo/manojkarthick-pqrs
https://github.com/chhantyal/parquet-cli
https://github.com/Aletheios/parquetscraper
https://www.projectpro.io/recipes/read-parquet-file-pyspark
https://community.cloudera.com/t5/Community-Articles/Build-and-use-Parquet-tools-to-read-parquet-files/ta-p/248629
http://www.mtitek.com/tutorials/bigdata/hadoop/parquet-tools.php


pip install parquet-cli
parq input.parquet
parq input.parquet --schema
parq input.parquet --count
parq input.parquet --head 10
parq input.parquet --tail 10
parq --help

pip install parquet-tools
python3 -m pip install parquet-tools
parquet-tools show filename.parquet
parquet-tools show test.parquet

parquet-tools csv s3://bucket-name/test.parquet |csvq "select one, three where three"


parquet-tools cat --json file.gz.parquet

parquet-tools csv input.gz.parquet | csvq -f json "select id, description"

parquet-tools head file.parquet | less


import pandas as pd
df = pd.read_parquet('your-file.parquet')
df.head(10)

parquet-tools --help
parquet-tools show -n5 [path/to/parquet]
parquet-tools csv [path/to/parquet]
parquet-tools csv FILE.parquet > FILE.csv
parquet-tools inspect [path/to/parquet]
parquet-tools inspect [path/to/parquet] | head
parquet-tools meta [path/to/parquet]



parquet-tools cat [path/to/parquet]
parquet-tools head [path/to/parquet]
parquet-tools schema [path/to/parquet]
parquet-tools meta [path/to/parquet]
parquet-tools dump [path/to/parquet]
parquet-tools rowcount [path/to/parquet]
parquet-tools column-index [path/to/parquet]

parquet-tools merge [path/to/parquet1] [path/to/parquet2] [path/to/target_parquet]

####################################################
jq
####################################################

https://linuxcommandlibrary.com/basic/json


echo '{"name": "Linux"}' |  jq "."


####################################################
The globals
####################################################

https://www.w3schools.com/python/python_variables_global.asp
https://stackoverflow.com/questions/10588317/python-function-global-variables
https://stackoverflow.com/questions/1989251/alternatives-to-keeping-large-lists-in-memory-python

global someVar
someVar = 55

def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)


x = "awesome"
def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)



####################################################
create variables dynamically in Python
####################################################

https://stackoverflow.com/questions/5036700/how-can-you-dynamically-create-variables
https://www.delftstack.com/de/howto/python/python-dynamic-variable-name/
https://www.codespeedy.com/how-to-create-dynamic-variable-name-in-python/

globals()[f"my_variable_{i}"] = i
vars()['meta_anio_2012'] = 'translate'


for n in range(0, 7):
    globals()['strg%s' % n] = 'Hello'
# strg0 = 'Hello', strg1 = 'Hello' ... strg6 = 'Hello'
for x in range(0, 7):
    globals()[f"variable1{x}"] = f"Hello the variable number {x}!"
print(variable15)



for x in range(0, 7):
    globals()[f"variable1{x}"] = f"Hello CodeSpeedy Student {x}!!!"
print(variable12)

####################################################
openpyxl - A Python library to read/write Excel 2010 xlsx/xlsm files
####################################################

https://openpyxl.readthedocs.io/en/stable/
https://pypi.org/project/openpyxl/

pip install openpyxl

from openpyxl import Workbook
wb = Workbook()

# grab the active worksheet
ws = wb.active

# Data can be assigned directly to cells
ws['A1'] = 42

# Rows can also be appended
ws.append([1, 2, 3])

# Python types will automatically be converted
import datetime
ws['A2'] = datetime.datetime.now()

# Save the file
wb.save("sample.xlsx")


----------------------------------------------------------------------------
####################################################
colored text to the terminal?
####################################################

https://stackoverflow.com/questions/287871/how-do-i-print-colored-text-to-the-terminal?rq=1

    class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

----------------------------------------------------------------------------

####################################################
Print the "approval" sign/check mark (✓) U+2713 in Python
####################################################
https://stackoverflow.com/questions/16676101/print-the-approval-sign-check-mark-u2713-in-python

print u'\u2713'
print u'\u2713'.encode('utf8')
python -c "print '✓'"
print("\u2713")

#!/usr/bin/python
# -*- coding: UTF-8 -*-
print '✓'
----------------------------------------------------------------------------


----------------------------------
####################################################
What is the use of "assert" in Python?
####################################################

https://stackoverflow.com/questions/5142418/what-is-the-use-of-assert-in-python
https://www.w3schools.com/python/ref_keyword_assert.asp
https://www.programiz.com/python-programming/assert-statement
https://cito.github.io/byte_of_python/read/assert-statement.html
https://codegree.de/python-assert/
https://www.tutorialsteacher.com/python/python-assert
https://www.tutorialspoint.com/python/assertions_in_python.htm
https://www.codingem.com/python-assert-statements/

assert condition
assert condition, "error message"

if not condition:
    raise AssertionError()

assert(condition, message)


# disabling asserts
python -O script.py

assert 2 + 2 == 5, "Houston we've got a problem"

if __debug__:
   if not expression: raise AssertionError


number = input('Enter a positive number:')
assert (number > 0), 'Only positive numbers are allowed!'


meineliste = ['element']
assert len(meineliste) >= 1
meineliste.pop()
assert len(meineliste) >= 1


try:
    assert len([1, 2, 3]) <= 0, 'Liste hat mehr als 0 Elemente'
except AssertionError as meldung:
    print(meldung)

...

x = 0
assert x > 0, 'Only positive numbers are allowed'
print('x is a positive number.')

...

# Example: AssertionError Copy
def square(x):
    assert x>=0, 'Only positive numbers are allowed'
    return x*x
try:
    square(-2)
except AssertionError as msg:
    print(msg)


------------------------------------------------------------------------------
####################################################
Regular expression operations
####################################################
https://docs.python.org/3/library/re.html
https://developers.google.com/edu/python/regular-expressions
https://www.w3schools.com/python/python_regex.asp


import re
m = re.search('(?<=abc)def', 'abcdef')

import re
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)


####################################################
How to create a file name with the current date & time in Python
####################################################
https://stackoverflow.com/questions/10607688/how-to-create-a-file-name-with-the-current-date-time-in-python


import time
timestr = time.strftime("%Y%m%d-%H%M%S")
print timestr

filename1 = datetime.now().strftime("%Y%m%d-%H%M%S")
filename1 = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")

from datetime import datetime
datetime.now().strftime("%Y_%m_%d-%I_%M_%S_%p")


##########################################################
zipfile — Work with ZIP archives
##########################################################

https://docs.python.org/3/library/zipfile.html
https://stackoverflow.com/questions/1855095/how-to-create-a-zip-archive-of-a-directory
https://thispointer.com/python-how-to-create-a-zip-archive-from-multiple-files-or-directory/

with ZipFile('spam.zip', 'w') as myzip:
    myzip.write('eggs.txt')

with ZipFile('spam.zip') as myzip:
    with myzip.open('eggs.txt') as myfile:
        print(myfile.read())

...

Command-Line Interface

python -m zipfile -c monty.zip spam.txt eggs.txt
python -m zipfile -c monty.zip life-dir

extract
python -m zipfile -e monty.zip target-dir/

get list of files
python -m zipfile -l monty.zip

..

# using shutil
import shutil
shutil.make_archive(output_filename, 'zip', dir_name)

..

import os
import zipfile

def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file),
                       os.path.relpath(os.path.join(root, file),
                                       os.path.join(path, '..')))

with zipfile.ZipFile('Python.zip', 'w', zipfile.ZIP_DEFLATED) as zipf:
    zipdir('tmp/', zipf)

..

import os
import zipfile

zf = zipfile.ZipFile("myzipfile.zip", "w")
for dirname, subdirs, files in os.walk("mydirectory"):
    zf.write(dirname)
    for filename in files:
        zf.write(os.path.join(dirname, filename))
zf.close()

..

from zipfile import ZipFile
zipObj = ZipFile('sample.zip', 'w')
zipObj.write('sample_file.csv')
zipObj.write('test_1.log')
zipObj.write('test_2.log')
zipObj.close()


with ZipFile('sample2.zip', 'w') as zipObj2:
   zipObj2.write('sample_file.csv')
   zipObj2.write('test_1.log')
   zipObj2.write('test_2.log')



from zipfile import ZipFile
import os
from os.path import basename
with ZipFile('sampleDir.zip', 'w') as zipObj:
   for folderName, subfolders, filenames in os.walk(dirName):
       for filename in filenames:
           filePath = os.path.join(folderName, filename)
           zipObj.write(filePath, basename(filePath))


####################################################
env
####################################################

Using .env Files for Environment Variables in Python Applications
https://dev.to/jakewitcher/using-env-files-for-environment-variables-in-python-applications-55a1

pip install python-dotenv

# .env
# environment variables defined inside a .env file
GCP_PROJECT_ID=my-project-id

# .py
import os
from dotenv import load_dotenv
load_dotenv()
GCP_PROJECT_ID = os.getenv('GCP_PROJECT_ID')

# v2 load
from dotenv import load_dotenv
from pathlib import Path
dotenv_path = Path('path/to/.env')
load_dotenv(dotenv_path=dotenv_path)

############################################################

Using dictionaries to store data as key-value pairs

############################################################

http://www.compciv.org/guides/python/fundamentals/dictionaries-overview/
https://www.pythontutorial.net/python-basics/python-dictionary/
https://stackoverflow.com/questions/22496596/how-does-one-insert-a-key-value-pair-into-a-python-list


mydict = {"apples": 42, "oranges": 999}
mydict['oranges']

# dict

person = {
    'first_name': 'John',
    'last_name': 'Doe',
    'age': 25,
    'favorite_colors': ['blue', 'green'],
    'active': True
}

# dictionary

data = {
    'a': 15,
    'c': 10,
    'b': 2,
}
# Sort by key:
print [v for (k, v) in sorted(data.iteritems())]
# Output: [15, 2, 10]
# Keys, sorted by value:
from operator import itemgetter
print [k for (k, v) in sorted(data.iteritems(), key = itemgetter(1))]
# Output: ['b', 'c', 'a']


# tuples

data = [
    ('a', 15),
    ('c', 10),
    ('b', 2),
]
data.sort() # Sorts the list in-place
print data
# Output: [('a', 15), ('b', 2), ('c', 10)]
print [x[1] for x in data]
# Output [15, 2, 10]
# Sort by value:
from operator import itemgetter
data = sorted(data, key = itemgetter(1))
print data
# Output [('b', 2), ('c', 10), ('a', 15)]
print [x[1] for x in data]
# Output [2, 10, 15]




#############################
Dictionary to lowercase in Python
#############################

https://stackoverflow.com/questions/764235/dictionary-to-lowercase-in-python
https://www.datacamp.com/tutorial/case-conversion-python
https://www.programiz.com/python-programming/methods/string/lower
https://stackoverflow.com/questions/6797984/how-do-i-lowercase-a-string-in-python

message = 'PYTHON IS FUN'
print(message.lower())



python 3:

{k.lower(): v for k, v in my_dict.items()}
dict((k.lower(), v.lower()) for k,v in {'My Key':'My Value'}.iteritems())
dict((k.lower(), v) for k,v in {'My Key':'My Value'}.iteritems())



#############################
python string compare
#############################

https://note.nkmk.me/en/python-str-compare/
https://jakevdp.github.io/WhirlwindTourOfPython/14-strings-and-regular-expressions.html
https://www.guru99.com/python-regular-expressions-complete-tutorial.html
https://www.adamsmith.haus/python/answers/how-to-check-if-a-string-matches-a-pattern-in-python
https://www.geeksforgeeks.org/pattern-matching-python-regex/
https://docs.python.org/3/library/re.html


Exact match (equality comparison): ==, !=
Partial match: in, not in
Forward/backward match: startswith(), endswith()
Order comparison: <, <=, >, >=
Case-insensitive comparison: upper(), lower()
Regex: re.search(), re.fullmatch()


Exact match

print('abc' == 'abc')
# True
print('abc' == 'xyz')
# False


Partial match:

print('bbb' in 'aaa-bbb-ccc')
# True
print('xxx' in 'aaa-bbb-ccc')
# False
print('xxx' not in 'aaa-bbb-ccc')
# True
print('bbb' not in 'aaa-bbb-ccc')
# False


Forward/backward match


s = 'aaa-bbb-ccc'
print(s.startswith('aaa'))
# True
print(s.startswith('bbb'))
# False
print(s.startswith(('aaa', 'bbb', 'ccc')))
# True
print(s.startswith(('xxx', 'yyy', 'zzz')))
# False
print(s.endswith('ccc'))
# True
print(s.endswith('bbb'))
# False
print(s.endswith(('aaa', 'bbb', 'ccc')))
# True


Order comparison

print('a' < 'b')
# True
print('aa' < 'ab')
# True
print('abc' < 'abcd')
# True
print(ord('a'))
# 97
print(sorted(['aaa', 'abc', 'Abc', 'ABC']))
# ['ABC', 'Abc', 'aaa', 'abc']

Case-insensitive comparison


s1 = 'abc'
s2 = 'ABC'
print(s1 == s2)
# False
print(s1.lower() == s2.lower())
# True

Regex: re.search(), re.fullmatch()

import re
s = 'aaa-AAA-123'
print(re.search('aaa', s))
# <re.Match object; span=(0, 3), match='aaa'>
print(re.search('xxx', s))
# None
print(re.search('^123', s))
# None
print(re.search('[A-Z]+', s))
# <re.Match object; span=(4, 7), match='AAA'>


re.fullmatch()
s = '012-3456-7890'
print(re.fullmatch(r'\d{3}-\d{4}-\d{4}', s))
# <re.Match object; span=(0, 13), match='012-3456-7890'>
s = 'tel: 012-3456-7890'
print(re.fullmatch(r'\d{3}-\d{4}-\d{4}', s))
# None

s = '012-3456-7890'
print(re.search(r'^\d{3}-\d{4}-\d{4}$', s))
# <re.Match object; span=(0, 13), match='012-3456-7890'>
s = 'tel: 012-3456-7890'
print(re.search('^\d{3}-\d{4}-\d{4}$', s))
# None

re.IGNORECASE
s = 'ABC'
print(re.search('abc', s))
# None
print(re.search('abc', s, re.IGNORECASE))
# <re.Match object; span=(0, 3), match='ABC'>



import re
test_string = 'a1b2cdefg'
matched = re.match("[a-z][0-9][a-z][0-9]+", test_string)
is_match = bool(matched)
print(is_match)
OUTPUT true




###############################################
List of Tuples
###############################################

https://www.geeksforgeeks.org/python-create-a-list-of-tuples/
https://www.tutorialspoint.com/python/python_tuples.htm
https://www.askpython.com/python/list/python-list-of-tuples

data = [(1, 'sravan'), (2, 'ojaswi'), (3, 'bobby'),
        (4, 'rohith'), (5, 'gnanesh')]
# display data
data


# create two lists  with college id and name
roll_no = [1, 2, 3, 4, 5]
name = ['sravan', 'ojaswi', 'bobby', 'rohith', 'gnanesh']
# zip the two lists using zip() function
data = list(zip(roll_no, name))
# display data
data


# create a list with name
name = ['sravan', 'ojaswi', 'bobby', 'rohith', 'gnanesh']
# zip the two lists using iter() function
data = [x for x in zip(*[iter(name)])]
# display data
data


# create a list with name
name = [['sravan'], ['ojaswi'], ['bobby'],
        ['rohith'], ['gnanesh']]
# create list of tuple using above
# list using map function
data = list(map(tuple, name))
# display data
data



# create a list with name
name = [['sravan'], ['ojaswi'], ['bobby'],
        ['rohith'], ['gnanesh']]
# create list of tuple using above list
# using  list comprehension and tuple()
# method
data = [tuple(x) for x in name]
# display data
data




LT_data = [(1,2,3),('S','P','Q')]
print("List of Tuples:\n",LT_data)



lst1 = [10,20,30]
lst2 = [50,"Python","JournalDev"]
lst_tuple = list(zip(lst1,lst2))
print(lst_tuple)



lst = [50,"Python","JournalDev",100]
lst_tuple = [x for x in zip(*[iter(lst)])]
print(lst_tuple)



lst = [50,"Python","JournalDev",100]
lst_tuple = [x for x in zip(*[iter(lst)]*2)]
print(lst_tuple)



lst = [[50],["Python"],["JournalDev"],[100]]
lst_tuple =list(map(tuple, lst))
print(lst_tuple)



lst = [[50],["Python"],["JournalDev"],[100]]
lst_tuple =[tuple(ele) for ele in lst]
print(lst_tuple)


######################################################
Python Loop Through a Tuple
######################################################

https://www.w3schools.com/python/gloss_python_loop_tuple_items.asp
https://www.tutorialspoint.com/How-to-iterate-through-a-tuple-in-Python
https://www.adamsmith.haus/python/answers/how-to-iterate-through-a-list-of-tuples-in-python
https://towardsdatascience.com/python-basics-tuples-9bb3851257b5
https://www.delftstack.com/howto/python/iterate-through-tuple-python/
https://www.geeksforgeeks.org/how-we-can-iterate-through-list-of-tuples-in-python/
https://bobbyhadz.com/blog/python-iterate-over-list-of-tuples
https://www.tutorialkart.com/python/python-iterate-over-items-of-a-tuple/

thistuple = ("apple", "banana", "cherry")
for x in thistuple:
  print(x)


list_of_tuples = [("Betty", 45), ("John" , 84), ("Malik" , "34"), ("Jose" , 20)]
for index, tuple in enumerate(list_of_tuples):
	element_one = tuple[0]
	element_two = tuple[1]
	print(element_one, element_two)



a = tuple([
    ("hello", 5),
    ("world", 25),
    ("computer", 125),
    ("science", 625),
    ("python", 3125)
])
for x, y in a:
    print(f"{x}: {y}")




# create a list of tuples with student
# details
name = [('sravan',7058,98.45),
        ('ojaswi',7059,90.67),
        ('bobby',7060,78.90),
        ('rohith',7081,67.89),
        ('gnanesh',7084,98.01)]

# iterate using for loop
for x in name:
  # iterate in each tuple element
  for y in x:
      print(y)
  print()





# create a list of tuples with student
# details
name = [('sravan',7058,98.45),
        ('ojaswi',7059,90.67),
        ('bobby',7060,78.90),
        ('rohith',7081,67.89),
        ('gnanesh',7084,98.01)]
l = []
# iterate using index with enumerate function
for index, tuple in enumerate(name):
    # access through index
      # by appending to list
    l.append(name[index])
# iterate through the list
for x in l:
    for y in x:
       print(y)
    print()


my_list = [('a', 'one'), ('b', 'two'), ('c', 'three')]
# 👇️ using nested for loop

for tup in my_list:
    for item in tup:
        print(item)


print('---------------------------')

# 👇️ iterate over list of tuples with index

for index, tup in enumerate(my_list):
    print(index)
    print(tup[0])
    print(tup[1])


print('---------------------------')

# 👇️ iterate over list of tuples with unpacking

for first, second in my_list:
    print(first, second)



############################################################################################
Python Nested Dictionary
############################################################################################

https://www.programiz.com/python-programming/nested-dictionary
https://www.geeksforgeeks.org/python-nested-dictionary/
https://linuxhint.com/python_dictionary_of_dictionaries/

nested_dict = { 'dictA': {'key_1': 'value_1'},
                'dictB': {'key_2': 'value_2'}}


people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},   2: {'name': 'Marie', 'age': '22', 'sex': 'Female'}}
print(people)

people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},   2: {'name': 'Marie', 'age': '22', 'sex': 'Female'}}
print(people[1]['name'])
print(people[1]['age'])
print(people[1]['sex'])

# Add element to a Nested Dictionary
people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},         2: {'name': 'Marie', 'age': '22', 'sex': 'Female'}}
people[3] = {}
people[3]['name'] = 'Luna'
people[3]['age'] = '24'
people[3]['sex'] = 'Female'
people[3]['married'] = 'No'
print(people[3])

# Add another dictionary to the nested dictionary
people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},
          2: {'name': 'Marie', 'age': '22', 'sex': 'Female'},
          3: {'name': 'Luna', 'age': '24', 'sex': 'Female', 'married': 'No'}}

people[4] = {'name': 'Peter', 'age': '29', 'sex': 'Male', 'married': 'Yes'}
print(people[4])


Delete elements from a Nested Dictionary
people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},
          2: {'name': 'Marie', 'age': '22', 'sex': 'Female'},
          3: {'name': 'Luna', 'age': '24', 'sex': 'Female', 'married': 'No'},
          4: {'name': 'Peter', 'age': '29', 'sex': 'Male', 'married': 'Yes'}}

del people[3]['married']
del people[4]['married']
print(people[3])
print(people[4])


Iterating Through a Nested Dictionary

people = {1: {'Name': 'John', 'Age': '27', 'Sex': 'Male'},
          2: {'Name': 'Marie', 'Age': '22', 'Sex': 'Female'}}

for p_id, p_info in people.items():
    print("\nPerson ID:", p_id)

    for key in p_info:
        print(key + ':', p_info[key])



#####################################
Python String split() Method
#####################################
https://www.w3schools.com/python/ref_string_split.asp

txt = "welcome to the jungle"
x = txt.split()
print(x)

txt = "hello, my name is Peter, I am 26 years old"
x = txt.split(", ")
print(x)


#####################################
How do I trim whitespace from a string?   Python Trim String - rstrip(), lstrip(), strip()
#####################################

https://stackoverflow.com/questions/761804/how-do-i-trim-whitespace-from-a-string
https://flexiple.com/python/python-trim/
https://www.freecodecamp.org/news/python-strip-how-to-trim-a-string-or-line/
https://www.digitalocean.com/community/tutorials/python-trim-string-rstrip-lstrip-strip

' Hello '.strip()
' Hello'.strip()
'Bob has a cat'.strip()
'   Hello   '.strip()

####################################################
python debug
####################################################

https://stackoverflow.com/questions/4929251/how-to-step-through-python-code-to-help-debug-issues
https://wiki.python.org/moin/PythonDebuggingTools
https://docs.python.org/3/library/pdb.html
https://hub.packtpub.com/debugging-and-profiling-python-scripts-tutorial/
https://code.visualstudio.com/docs/python/debugging
https://stackoverflow.com/questions/5980042/how-to-implement-the-verbose-or-v-option-into-a-script
https://www.programcreek.com/python/?CodeExample=set+verbose
https://docs.python.org/3/using/cmdline.html

pip install pdbpp
pip install ipdb

from ipdb import set_trace
import pdb

set_trace()
pdb.set_trace()
foo()
breakpoint()  # drop into the debugger at this point
bar()

python -m pdb scriptName.py

ipdb (IPython debugger)
python3 -m pip install --user ipdb
__import__('ipdb').set_trace(context=21)

####################################################
redis 4.3.4
####################################################

pip install redis

https://pypi.org/project/redis/
https://github.com/redis/redis-py
https://docs.redis.com/latest/rs/references/client_references/client_python/
https://redis.io/docs/stack/get-started/tutorials/stack-python/

import redis

r = redis.Redis(
    host='hostname',
    port=port,
    password='password')

r.set('foo', 'bar')
value = r.get('foo')
print(value)


#######################################################
shell commands
#######################################################
https://janakiev.com/blog/python-shell-commands/
https://stackabuse.com/executing-shell-commands-with-python/
https://stackoverflow.com/questions/89228/how-do-i-execute-a-program-or-call-a-system-command

import subprocess
subprocess.run(["ls", "-l"])

import os
os.system("echo Hello from the other side!")


import os
stream = os.popen('echo Returned output')
output = stream.read()

with open('test.txt', 'w') as f:
    process = subprocess.Popen(['ls', '-l'], stdout=f)

output


#######################################################
How to Create a Password-Protected ZIP File in Linux
#######################################################
https://www.tecmint.com/create-password-protected-zip-file-in-linux/

zip -e file.zip file

##############################################################
Copy a File using Python
##############################################################
https://datatofish.com/copy-file-python/
https://stackoverflow.com/questions/123198/how-to-copy-files

import shutil
file_src = 'source.txt'
f_src = open(file_src, 'rb')
file_dest = 'destination.txt'
f_dest = open(file_dest, 'wb')
shutil.copyfileobj(f_src, f_dest)


import shutil
shutil.copy2('source.txt', 'destination.txt')
shutil.copy('source.txt', 'destination.txt')
shutil.copyfile('source.txt', 'destination.txt')

import  os
os.system('cp source.txt destination.txt')
os.popen('cp source.txt destination.txt')


import subprocess
status = subprocess.call('cp source.txt destination.txt', shell=True)
status = subprocess.check_output('cp source.txt destination.txt', shell=True)

##############################################################
python_try_except
##############################################################

 https://www.w3schools.com/python/python_try_except.asp
 https://docs.python.org/3/tutorial/errors.html

  try:
...     raise Exception('spam', 'eggs')
... except Exception as inst:
...     print(type(inst))    # the exception instance
...     print(inst.args)     # arguments stored in .args
...     print(inst)          # __str__ allows args to be printed directly,
...                          # but may be overridden in exception subclasses
...     x, y = inst.args     # unpack args
...     print('x =', x)
...     print('y =', y)






#####################################################
Pylint and Flake8
#####################################################

https://www.freecodecamp.org/news/auto-format-your-python-code-with-black
https://flake8.pycqa.org/en/latest/internal/formatters.html
https://pypi.org/project/autopep8/
https://py-vscode.readthedocs.io/en/latest/files/linting.html
http://www.sefidian.com/2021/08/03/how-to-use-black-flake8-and-isort-to-format-python-codes/
https://pypi.org/project/flake8-black/
https://pypi.org/project/flake8-string-format/
https://pypi.org/project/flake8/

pip install flake8
pip install black

black --check file.py
black -l 60 file.py
black --line-length 79 --target-version py27 .

pip install autopep8
for f in `find . -name "*.py"`; do autopep8 --in-place --select=E701 $f; done

isort --multi-line 3 --profile black --python-version 27 .


flake8 some_file.py
flake8 --ignore P101 file.py
flake8 --max-doc-length=72 --ignore=E211,E999,F401,F821,W503

files that contain this line are skipped:
# flake8: noqa




#######################################################
Python setup.py
#######################################################

https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
https://stackoverflow.com/questions/54430694/python-setup-py-how-to-get-find-packages-to-identify-packages-in-subdirectori
https://godatadriven.com/blog/a-practical-guide-to-using-setup-py/
http://code.nabla.net/doc/setuptools/api/setuptools/setuptools.find_packages.html
https://www.programcreek.com/python/example/10688/setuptools.find_packages
https://pythonhosted.org/an_example_pypi_project/setuptools.html
https://docs.python.org/3/distutils/setupscript.html
https://github.com/PeterRochford/SkillMetrics/blob/master/setup.py
https://cheat.readthedocs.io/en/latest/python/packaging.html
https://click.palletsprojects.com/en/7.x/setuptools/


# Always prefer setuptools over distutils
from setuptools import setup, find_packages
# To use a consistent encoding
from codecs import open
from os import path
here = path.abspath(path.dirname(__file__))

setup(
    name='ursonos',
    version='0.0.1',
    packages=find_packages(),
    url='',
    license='',
    author='poirier',
    author_email='dan@poirier.us',
    description='Urwid application to control Sonos',
    install_requires=[
        'soco',
        'urwid'
    ]
)

python setup.py sdist
python setup.py bdist_wheel --universal


from setuptools import setup, find_packages

setup(
    name="pkgname",
    version="1.9.13",
    packages=find_packages(where="src"),
    package_dir={"": "src", "pkgname": "src/pkgname"},
    url="",
    license="",
    author="poirier",
    author_email="",
    description="",
    python_requires=">=3.6",
    install_requires=["Django<=3.0", "dj-database-url", "gunicorn", "whitenoise"],
    entry_points={"console_scripts": ["manage=manage:main"]},

    package_data={
        "pkgname": ["templates/*.html", "templates/include/*.html", "static/*"],
    }
)

...

from setuptools import setup, find_packages
setup(
    name="mypackage",
    version="0.1",
    packages=["baz", "bar", "foo"],
    package_dir={
        "": ".",
        "bar": "./bar-pack/bar",
        "foo": "./foo-pack/foo",
    },
)#

from setuptools import setup, find_packages
setup(
    name='example',
    version='0.1.0',
    packages=find_packages(include=['exampleproject', 'exampleproject.*'])
)

setup(
    name='example',
    version='0.1.0',
    packages=find_packages(include=['exampleproject', 'exampleproject.*']),
    install_requires=[
        'PyYAML',
        'pandas==0.23.3',
        'numpy>=1.14.5',
        'matplotlib>=2.2.0,,
        'jupyter'
    ]
)

setup(
    name='example',
    version='0.1.0',
    packages=find_packages(include=['exampleproject', 'exampleproject.*']),
    install_requires=[
        'PyYAML',
        'pandas==0.23.3',
        'numpy>=1.14.5'
    ],
    extras_require={
        'interactive': ['matplotlib>=2.2.0', 'jupyter'],
    }
)


from setuptools import setup, find_packages

setup(
    name='example',
    version='0.1.0',
    description='Setting up a python package',
    author='Rogier van der Geer',
    author_email='rogiervandergeer@godatadriven.com',
    url='https://blog.godatadriven.com/setup-py',
    packages=find_packages(include=['exampleproject', 'exampleproject.*']),
    install_requires=[
        'PyYAML',
        'pandas==0.23.3',
        'numpy>=1.14.5'
    ],
    extras_require={'plotting': ['matplotlib>=2.2.0', 'jupyter']},
    setup_requires=['pytest-runner', 'flake8'],
    tests_require=['pytest'],
    entry_points={
        'console_scripts': ['my-command=exampleproject.example:main']
    },
    package_data={'exampleproject': ['data/schema.json']}
)

setup.cfg:

[aliases]
test=pytest

[flake8]
max-line-length=120

[bdist_wheel]
universal=1


#!/usr/bin/env python
from distutils.core import setup
setup(name='Distutils',
	version='1.0',
	description='Python Distribution Utilities',
	author='Greg Ward',
	author_email='gward@python.net',
	url='https://www.python.org/sigs/distutils-sig/',
	packages=['distutils', 'distutils.command'],
)


##############################################
Comments and Docstrings Google Python Style Guide
https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings
##############################################

https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html
https://sphinx-rtd-tutorial.readthedocs.io/en/latest/folders.html
https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html
https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html
https://pythonhosted.org/an_example_pypi_project/sphinx.html


pip install sphinx
pip install sphinx-rtd-theme
#pip install bluepy

sphinx-quickstart
sphinx-apidoc -f -o ./source ./project

Autodoc configuratio

import os
import sys
sys.path.insert(0, os.path.abspath('../../simpleble/'))

make clean
make html


Files should start with a docstring describing the contents and usage of the module.

"""A one line summary of the module or program, terminated by a period.

Leave one blank line.  The rest of this docstring should contain an
overall description of the module or program.  Optionally, it may also
contain a brief description of exported classes and functions and/or usage
examples.

  Typical usage example:

  foo = ClassFoo()
  bar = foo.FunctionBar()
"""


##############################################
 Python code formatter
 https://github.com/psf/black
##############################################

 pip install git+https://github.com/psf/black

 black {source_file_or_directory}
 python -m black {source_file_or_directory}

 ##############################################
 flake8
 https://github.com/pycqa/flake8
 ##############################################

 flake8 is a python tool that glues together pycodestyle, pyflakes, mccabe, and third-party plugins to check the style and quality of some python code.


##############################################
 class has no __init__ method
##############################################

https://www.pythonmorsels.com/what-is-init/
https://micropyramid.com/blog/understand-self-and-__init__-method-in-python-class/
https://stackoverflow.com/questions/448271/what-is-init-py-for
https://docs.python.org/3/reference/import.html#regular-packages
https://docs.python.org/3/tutorial/modules.html

Regular packages

parent/
    __init__.py
    one/
        __init__.py
    two/
        __init__.py
    three/
        __init__.py



 class MyClass:

    def print(self):
        print(self)


 class Point:
    """2-dimensional point."""
    def __init__(self, x, y):
        self.x = x
        self.y = y



 Python defines two types of packages, regular packages and namespace packages.
 Regular packages are traditional packages as they existed in Python 3.2 and earlier.
 A regular package is typically implemented as a directory containing an __init__.py file.
 When a regular package is imported, this __init__.py file is implicitly executed, and the
 objects it defines are bound to names in the packages namespace. The __init__.py file can
 contain the same Python code that any other module can contain, and Python will
 add some additional attributes to the module when it is imported.

mydir/spam/__init__.py
mydir/spam/module.py

import spam.module
from spam import module
import spam



database/
    __init__.py
    schema.py
    insertions.py
    queries.py



__init__.py
import os
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
engine = create_engine(os.environ['DATABASE_URL'])
Session = sessionmaker(bind=engine)

queries.py
from database import Session
session = Session()


create_session.py
from database.create_session import Session
session = Session()


-------------------------------------------------------------------------------------
https://docs.sonarqube.org/latest/setup/install-cluster/
https://docs.sonarqube.org/latest/setup/install-server/
https://hub.docker.com/_/sonarqube/
https://docs.sonarqube.org/latest/setup/get-started-2-minutes/
https://docs.sonarqube.org/latest/analysis/languages/python/
https://docs.sonarqube.org/latest/analysis/external-issues/
https://github.com/PyCQA/bandit/blob/main/README.rst
https://flake8.pycqa.org/en/latest/
https://docs.sonarqube.org/latest/analysis/coverage/
https://coverage.readthedocs.io/en/stable/
https://nedbatchelder.com/
https://nose.readthedocs.io/en/latest/
https://docs.pytest.org/en/latest/

docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest


sonar.python.pylint.reportPaths
sonar.python.bandit.reportPaths
sonar.python.flake8.reportPaths

python<version> -m pip install flake8
python -m pip install flake8

pytest arg1 arg2 arg3
coverage run -m pytest arg1 arg2 arg3
python -m unittest discover
coverage run -m unittest discover

pip install nose
python setup.py install
nosetests -h






