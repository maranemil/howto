# check sqlite col format
SELECT count(colname) FROM {cls.table} WHERE colname NOT LIKE 'ABC_%' LIMIT 1

------------------------------------------------------------------------
####################################################
How to format string in a Pandas DataFrame Column
####################################################
https://www.projectpro.io/recipes/format-string-in-pandas-dataframe-column

import pandas as pd

first_names = pd.Series(['Sheldon Cooper', 'Leonard Hofstadter', 'Howard Wolowitz', 'Raj Koothrappali'])
print(first_names)
print(first_names.str.lower())
print(first_names.str.upper())
print(first_names.str.title())
print(first_names.str.split(" "))
print(first_names.str.capitalize())


https://stackoverflow.com/questions/38054373/trying-to-check-if-string-in-python-follows-the-correct-pattern-good-formatting

# abusing the fact that default arguments are evaluated only during function definition
def check_identifier(value, pattern=re.compile("[A-Z][A-Z][0-9][0-9][A-Z][A-Z]")):
    return 'OK' if pattern.match(value) else 'identifier Format incorrect'

data['identifier Check'] = data['identifier'].apply(check_identifier)

...

def check_identifier(value, pattern=re.compile("[A-Z][A-Z][0-9][0-9][A-Z][A-Z]")):
    return 'OK' if pattern.match(value) else 'identifier Format incorrect'

df = pd.DataFrame({'a':['AB12CD', 'AB12Cd']})
print(df)
   a
   0  AB12CD
   1  AB12Cd

df['identifier Check'] = df['a'].apply(check_identifier)
print(df)

------------------------------------------------------------------------
####################################################
jupyter notebook online
####################################################

https://jupyter.org/try
https://jupyter.org/
https://jupyter.org/try-jupyter/retro/notebooks/?path=notebooks/Intro.ipynb
https://jupyter.org/try-jupyter/lab/

check pattern

import pandas as pd
import re

first_codes = pd.Series(['MB_12345', 'MB_12346', 'MB_12347', 'MB_12348','DK_98765'])
print(first_codes)
for code in first_codes:
    if re.search('^MB_.*$',code):
        print(code)
    else:
        print('code is wrong ' + code )



------------------------------------------------------------------------
####################################################
Python RegEx
####################################################

https://www.programiz.com/python-programming/regex
https://developers.google.com/edu/python/regular-expressions
https://www.w3schools.com/python/python_regex.asp
https://docs.python.org/3/library/re.html

import re
match = re.search(pat, str)


import re
str = 'an example word:cat!!'
match = re.search(r'word:\w\w\w', str)
# If-statement after search() tests if it succeeded
if match:
  print('found', match.group()) ## 'found word:cat'
else:
  print('did not find')


import re

txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

https://stackoverflow.com/questions/12595051/check-if-string-matches-pattern?rq=1
https://stackoverflow.com/questions/3879534/how-to-check-that-a-regular-expression-has-matched-a-string-completely-i-e-t?rq=1

^([A-Z][a-z]{0,2}\d*)*$

C6H5Fe2I   # this string should be matched successfully. Result: C6 H5 Fe2 I
H2TeO4     # this string should be matched successfully Result: H2 Te O4
H3PoooO5   # exception should be raised
C2tH6      # exception should be raised

re.match(r'(([A-Z][a-z]{,2})(\d*))+$', 'H2TeO4')
re.match(r'(([A-Z][a-z]{,2})(\d*))+$', 'H3PoooO5')


import re
if re.match(r"hello[0-9]+", 'hello1'):
  print('Yes')


import re
name = ["A1B1", "djdd", "B2C4", "C2H2", "jdoi","1A4V"]
# Match names.
for element in name:
     m = re.match("(^[A-Z]\d[A-Z]\d)", element)
     if m:
        print(m.groups())



import re
import sys
prog = re.compile('([A-Z]\d+)+')
while True:
  line = sys.stdin.readline()
  if not line: break
  if prog.match(line):
    print 'matched'
  else:
    print 'not matched'

import re
ab = re.compile("^([A-Z]{1}[0-9]{1})+$")
ab.match(string)

------------------------------------------------------------------------

####################################################
What is the difference between NaN and None?
####################################################

https://stackoverflow.com/questions/17534106/what-is-the-difference-between-nan-and-none?rq=1

for k, v in my_dict.iteritems():
    if np.isnan(v):


#  without forcing dtype it changes None to NaN!
s_bad = pd.Series([1, None], dtype=object)
s_good = pd.Series([1, np.nan])

In [13]: s_bad.dtype
Out[13]: dtype('O')

In [14]: s_good.dtype
Out[14]: dtype('float64')

In [15]: s_bad.sum()
Out[15]: 1

In [16]: s_good.sum()
Out[16]: 1.0

------------------------------------------------------------------------
####################################################
convert bytes to a hex string in Python 3?
####################################################

https://stackoverflow.com/questions/6624453/whats-the-correct-way-to-convert-bytes-to-a-hex-string-in-python-3?rq=1

>>> b'\xde\xad\xbe\xef'.hex()
'deadbeef'

reverse:
>>> bytes.fromhex('deadbeef')
b'\xde\xad\xbe\xef'


or

>>> import binascii
>>> binascii.hexlify('foo'.encode('utf8'))
b'666f6f'
>>> binascii.unhexlify(_).decode('utf8')
'foo'



------------------------------------------------------------------------

https://github.com/mljar/mercury

------------------------------------------------------------------------
####################################################
Python 3: Import Another Python File as a Module
####################################################

https://csatlas.com/python-import-file-module/
https://www.tutorialspoint.com/How-to-import-other-Python-files
https://learn.adafruit.com/micropython-basics-loading-modules/import-code
https://www.geeksforgeeks.org/python-import-module-from-different-directory/
https://www.entechin.com/how-to-import-a-class-from-another-file-in-python/

mymodule.py
def say_hello():
   print( 'Hello, world!' )

test.py
import mymodule
mymodule.say_hello()

...

subdir/mymodule.py

test.py
import subdir.mymodule
subdir.mymodule.say_hello()

import subdir.mymodule as m
m.say_hello()

from subdir.mymodule import say_hello
say_hello()

# Import a File in a Different Directory


import sys
sys.path.append( '/alpha/beta' )
import mymodule
mymodule.say_hello()


import os
import sys
script_dir = os.path.dirname( __file__ )
mymodule_dir = os.path.join( script_dir, '..', 'alpha', 'beta' )
sys.path.append( mymodule_dir )
import mymodule
mymodule.say_hello()


------------------------------------------------------------------------
####################################################
Running unittest with typical test directory structure
####################################################

https://stackoverflow.com/questions/1896918/running-unittest-with-typical-test-directory-structure
https://gist.github.com/tasdikrahman/2bdb3fb31136a3768fac
https://docs.python-guide.org/writing/tests/
https://docs.python.org/3/library/unittest.html
https://www.patricksoftwareblog.com/python-unit-testing-structuring-your-project/
https://s3.amazonaws.com/assets.datacamp.com/production/course_15974/slides/chapter1.pdf
https://s3.amazonaws.com/assets.datacamp.com/production/course_15974/slides/chapter2.pdf
https://s3.amazonaws.com/assets.datacamp.com/production/course_15974/slides/chapter3.pdf
https://s3.amazonaws.com/assets.datacamp.com/production/course_15974/slides/chapter4.pdf
https://www.digitalocean.com/community/tutorials/python-unittest-unit-test-example

new_project
├── antigravity
│   ├── __init__.py         # make it a package
│   └── antigravity.py
└── test
    ├── __init__.py         # also make test a package
    └── test_antigravity.py



# import the package
import antigravity

# import the antigravity module
from antigravity import antigravity

# or an object inside the antigravity module
from antigravity.antigravity import my_object

Running a single test module:
cd new_project
python -m unittest test.test_antigravity

Running a single test case or test method:
python -m unittest test.test_antigravity.GravityTestCase
python -m unittest test.test_antigravity.GravityTestCase.test_method


Running all tests:

cd new_project
python -m unittest discover
# Also works without discover for Python 3
# as suggested by @Burrito in the comments
python -m unittest


project_path
├── Makefile
├── src
│   ├── script_1.py
│   ├── script_2.py
│   └── script_3.py
└── tests
    ├── __init__.py
    ├── test_script_1.py
    ├── test_script_2.py
    └── test_script_3.py


__init__.py
import os
import sys
PROJECT_PATH = os.getcwd()
SOURCE_PATH = os.path.join(
    PROJECT_PATH,"src"
)
sys.path.append(SOURCE_PATH)


Makefile:
run_tests:
    python -m unittest discover .

...

# unittest
import unittest
def fun(x):
    return x + 1

class MyTest(unittest.TestCase):
    def test(self):
        self.assertEqual(fun(3), 4)




# Doctest in a function:
def square(x):
    """Return the square of x.

    >>> square(2)
    4
    >>> square(-2)
    4
    """

    return x * x

if __name__ == '__main__':
    import doctest
    doctest.testmod()


Tools

py.test
---------------------------
pip install pytest

# content of test_sample.py
def func(x):
    return x + 1

def test_answer():
    assert func(3) == 5

py.test

..

Hypothesis - pip install hypothesis
tox - pip install tox

mock - pip install mock

from mock import MagicMock
thing = ProductionClass()
thing.method = MagicMock(return_value=3)
thing.method(3, 4, 5, key='value')
thing.method.assert_called_with(3, 4, 5, key='value')

--------------
####################################################
unittest
####################################################
https://docs.python.org/3/library/unittest.html

import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()



python -m unittest test_module1 test_module2
python -m unittest test_module.TestClass
python -m unittest test_module.TestClass.test_method
python -m unittest tests/test_something.py
python -m unittest -v test_module
python -m unittest # without arguments Test Discovery is started
python -m unittest -h

# Test Discovery

cd project_directory
python -m unittest discover

python -m unittest discover -s project_directory -p "*_test.py"
python -m unittest discover project_directory "*_test.py"

# Organizing test code

import unittest

class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def test_default_widget_size(self):
        self.assertEqual(self.widget.size(), (50,50),
                         'incorrect default size')

    def test_widget_resize(self):
        self.widget.resize(100,150)
        self.assertEqual(self.widget.size(), (100,150),
                         'wrong size after resize')



# Skipping tests and expected failures

lass MyTestCase(unittest.TestCase):

    @unittest.skip("demonstrating skipping")
    def test_nothing(self):
        self.fail("shouldn't happen")

    @unittest.skipIf(mylib.__version__ < (1, 3),
                     "not supported in this library version")
    def test_format(self):
        # Tests that work for only a certain version of the library.
        pass

    @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
    def test_windows_support(self):
        # windows specific testing code
        pass

    def test_maybe_skipped(self):
        if not external_resource_available():
            self.skipTest("external resource not available")
        # test code that depends on the external resource
        pass


####################################################
Python Unit Test Example Source
####################################################
https://www.digitalocean.com/community/tutorials/python-unittest-unit-test-example

class Person:

    name = []
    def set_name(self, user_name):
        self.name.append(user_name)
        return len(self.name) - 1

    def get_name(self, user_id):
        if user_id >= len(self.name):
            return 'There is no such user'
        else:
            return self.name[user_id]


if __name__ == '__main__':
    person = Person()
    print('User Abbas has been added with id ', person.set_name('Abbas'))
    print('User associated with id 0 is ', person.get_name(0))

python3.6 Person.py

Python unittest structure

import unittest
class Testing(unittest.TestCase):
    def test_string(self):
        a = 'some'
        b = 'some'
        self.assertEqual(a, b)

    def test_boolean(self):
        a = True
        b = True
        self.assertEqual(a, b)

if __name__ == '__main__':
    unittest.main()


python3.6 -m unittest -v Testing





import unittest

# This is the class we want to test. So, we need to import it
import Person as PersonClass


class Test(unittest.TestCase):
    """
    The basic class that inherits unittest.TestCase
    """
    person = PersonClass.Person()  # instantiate the Person Class
    user_id = []  # variable that stores obtained user_id
    user_name = []  # variable that stores person name

    # test case function to check the Person.set_name function
    def test_0_set_name(self):
        print("Start set_name test\n")
        """
        Any method which starts with ``test_`` will considered as a test case.
        """
        for i in range(4):
            # initialize a name
            name = 'name' + str(i)
            # store the name into the list variable
            self.user_name.append(name)
            # get the user id obtained from the function
            user_id = self.person.set_name(name)
            # check if the obtained user id is null or not
            self.assertIsNotNone(user_id)  # null user id will fail the test
            # store the user id to the list
            self.user_id.append(user_id)
        print("user_id length = ", len(self.user_id))
        print(self.user_id)
        print("user_name length = ", len(self.user_name))
        print(self.user_name)
        print("\nFinish set_name test\n")

    # test case function to check the Person.get_name function
    def test_1_get_name(self):
        print("\nStart get_name test\n")
        """
        Any method that starts with ``test_`` will be considered as a test case.
        """
        length = len(self.user_id)  # total number of stored user information
        print("user_id length = ", length)
        print("user_name length = ", len(self.user_name))
        for i in range(6):
            # if i not exceed total length then verify the returned name
            if i < length:
                # if the two name not matches it will fail the test case
                self.assertEqual(self.user_name[i], self.person.get_name(self.user_id[i]))
            else:
                print("Testing for get_name no user test")
                # if length exceeds then check the 'no such user' type message
                self.assertEqual('There is no such user', self.person.get_name(i))
        print("\nFinish get_name test\n")


if __name__ == '__main__':
    # begin the unittest.main()
    unittest.main()


python3.6 -m unittest -v PersonTest.Test

-------------------------------------------
####################################################
pytest
####################################################
https://docs.pytest.org/en/7.1.x/
https://docs.pytest.org/en/7.1.x/getting-started.html
https://docs.pytest.org/en/7.1.x/contents.html
https://semaphoreci.com/community/tutorials/testing-python-applications-with-pytest
https://www.tutorialspoint.com/pytest/index.htm

https://docs.pytest.org/en/7.1.x/how-to/output.html
https://gist.github.com/kwmiebach/3fd49612ef7a52b5ce3a
https://code-maven.com/slides/python/pytest-verbose
https://adamj.eu/tech/2019/10/03/my-most-used-pytest-commandline-flags/
https://pytest-c-testrunner.readthedocs.io/running.html

pytest --showlocals 	# show local variables in tracebacks
pytest -l           	# show local variables (shortcut)
pytest --tb=auto    	# (default) 'long' tracebacks for the first and last
                     	# entry, but 'short' style for the other entries
pytest --tb=long    	# exhaustive, informative traceback formatting
pytest --tb=short   	# shorter traceback format
pytest --tb=line    	# only one line per failure
pytest --tb=native  	# Python standard library formatting
pytest --tb=no      	# no traceback at all
pytest --no-header
pytest --no-header -v
pytest --no-header -vv
pytest -ra		# Producing a detailed summary report
pytest -rfs
pytest -rpP
pytest --resultlog=path # Creating resultlog format files


pip install -U pytest
pytest --version

pytest --quiet
pytest -q

py.test test_sample.py -v
py.test test_sample.py -vv
py.test test_sample.py -vvv
py.test -q -s test_file.py::ClassName
python -m pytest -q test_sample.py   # Call pytest through python


pytest
py.test
pytest -q test_sysexit.py
pytest -q test_tmp_path.py


# content of test_sysexit.py
import pytest
def f():
    raise SystemExit(1)
def test_mytest():
    with pytest.raises(SystemExit):
        f()


# content of test_class.py
class TestClass:
    def test_one(self):
        x = "this"
        assert "h" in x
    def test_two(self):
        x = "hello"
        assert hasattr(x, "check")


# content of test_class_demo.py
class TestClassDemoInstance:
    value = 0

    def test_one(self):
        self.value = 1
        assert self.value == 1

    def test_two(self):
        assert self.value == 1


-------------------------------------------
####################################################
Python cls vs self: Knowing About References in Methods
####################################################

https://www.pythonpool.com/python-cls-vs-self/
https://stackoverflow.com/questions/7554738/python-self-no-self-and-cls

Static Method

class Sample:
  @staticmethod
  def method():
    print('This is a static method')
Sample.method()


Class Method

class Sample:
  var = "Class Variable"
  @classmethod
  def method(cls):
    print(cls.var)
Sample.method()


Instance method

class Sample:
  def __init__(self, a):
        self.a = a
  def method(self):
    print(self.a)

obj = Sample(10)
obj.method()

-------------------------------------------

####################################################
The Warning
####################################################

https://stackoverflow.com/questions/21430900/py-test-skips-test-class-if-constructor-is-defined

This PytestCollectionWarning is pointing out that the member methods of TestMain won't be treated as test cases
 since the class has an __init__ method. It's a warning because you might really want those to be used as
 test cases but mistakenly added an __init__ method. However, it may be that you just have a class
 that starts with the word Test and so the warning is a false alarm.


 use setup_class insetead of __init__.


 class TestClassName(object):
    def __init__(self):
       pass

    def setup_method(self, method):
       print "setup_method called"

    def teardown_method(self, method):
       print "teardown_method called"

    def test_a(self):
       print "test_a called"
       assert 1 == 1

    def test_b(self):
       print "test_b called"
       assert 1 == 1


 ---------------------------------------
####################################################
sqlite3.OperationalError: near "show": syntax error
[SQLITE_ERROR] SQL error or missing database (near "SHOW": syntax error)
####################################################

https://stackoverflow.com/questions/947215/how-to-get-a-list-of-column-names-on-sqlite3-database
https://stackoverflow.com/questions/59709946/sqlite3-operationalerror-near-show-syntax-error
https://sqlite.org/forum/info/9add3c3898aed7c4
https://sqlite.org/lang_createtable.html
https://www.sqlite.org/faq.html
https://www.sqlite.org/pragma.html#pragfunc
https://tableplus.com/blog/2018/04/sqlite-show-all-columns.html

PRAGMA table_info(Datalogger1);
SELECT name FROM pragma_table_info('Datalogger1')
SELECT name FROM PRAGMA_TABLE_INFO('Datalogger1');
SELECT LOWER(name)  FROM pragma_table_info('Datalogger1');




#############################
pytest test class method
#############################

https://zetcode.com/python/pytest/
https://automationpanda.com/2017/03/14/python-testing-101-pytest/
https://semaphoreci.com/community/tutorials/testing-python-applications-with-pytest
https://docs.pytest.org/en/7.1.x/how-to/unittest.html
https://docs.pytest.org/en/6.2.x/fixture.html
http://www.wellho.net/resources/ex.php?item=y212/test_mathfuncs3.py
https://docs.pytest.org/en/7.1.x/how-to/assert.html
https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html

pytest -q test_file.py::TestClass::test_method


#############################
print to console in pytest
#############################

https://stackoverflow.com/questions/24617397/how-to-print-to-console-in-pytest

def test_good():
    for i in range(1000):
        print(i)

def test_bad():
    print('this should fail!')
    assert False


pytest --capture=no     # show print statements in console
pytest -s               # equivalent to previous command


pytest -q test_file.py::TestClass::test_method -s -v



#####################################
assert "<class 'int'>" == 'int'
#####################################

https://careerkarma.com/blog/python-string-to-int/
https://stackabuse.com/python-check-if-variable-is-a-number/
https://pynative.com/python-isinstance-explained-with-examples/
https://www.guru99.com/type-isinstance-python.html
https://note.nkmk.me/en/python-check-int-float/
https://stackoverflow.com/questions/4541155/check-if-a-number-is-int-or-float

myVariable = input('Enter a number')
if type(myVariable) == int or type(myVariable) == float:
    # Do something
else:
    print('The variable is not a number')


myNumber = 1
print(type(myNumber))

myFloat = 1.0
print(type(myFloat))

myString = 's'
print(type(myString))


myVariable = 'A string'
if type(myVariable) == int or float:
    print('The variable a number')
else:
    print('The variable is not a number')


import numbers
variable = 5
print(isinstance(5, numbers.Number))





