####################################################

pandas.Series.empty

####################################################

https://pandas.pydata.org/pandas-docs/version/0.18/generated/pandas.Series.empty.html
https://pandas.pydata.org/docs/reference/api/pandas.Series.empty.html
https://www.geeksforgeeks.org/creating-a-pandas-series/
https://www.educba.com/pandas-series/

pandas.Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)

pd.DataFrame({'A' : []})
pd.DataFrame({'A' : [np.nan]})


# import pandas as pd
import pandas as pd
# import numpy as np
import numpy as np
# simple array
data = np.array(['g', 'e', 'e', 'k', 's'])
# providing an index
ser = pd.Series(data, index=[10, 11, 12, 13, 14])
print(ser)


import pandas as pd
# a simple list
list = ['g', 'e', 'e', 'k', 's']
# create series form a list
ser = pd.Series(list)
print(ser)


import pandas as pd
# a simple dictionary
dict = {'Geeks': 10,'for': 20,'geeks': 30}
# create series from dictionary
ser = pd.Series(dict)
print(ser)



mport pandas as pd
import numpy as np
# giving a scalar value with index
ser = pd.Series(10, index=[0, 1, 2, 3, 4, 5])
print(ser)



# import pandas and numpy
import pandas as pd
import numpy as np
# series with numpy linspace()
ser1 = pd.Series(np.linspace(3, 33, 3))
print(ser1)
# series with numpy linspace()
ser2 = pd.Series(np.linspace(1, 100, 10))
print(ser2)



# code
import pandas as pd
ser=pd.Series(range(10))
print(ser)


import pandas as pd
ser=pd.Series(range(1,20,3), index=[x for x in 'abcdefg')]
print(ser)


import pandas as pd
import numpy as np
ser=np.arange(10,15)
serobj=pd.Series(data=ser*5,index=ser)
print(serobj)

####################################################
'NoneType' object is not callable
####################################################

https://appdividend.com/2022/06/15/what-is-nonetype-object-in-python/

data = None

if data is None:
    print("It is in fact a None")
else:
    print("No, it is Not None")

####################################################
'NoneType' object is not callable
####################################################

https://www.daniweb.com/programming/software-development/threads/462042/nonetype-object-is-not-callable

from random import randrange

x = randrange (0,100)
y = randrange (0,100)
#print  (x)('x')(y)
print("{}x{}".format(x, y))

answer = int(input('Type your answer here:   '))
if answer == x*y:
    print ('Correct!')
else:
    print ('Incorrect')


####################################################
'NoneType' object is not callable
####################################################

https://www.configrouter.com/python-nonetype-object-is-not-callable-beginner-28792/

def loop(f, n): #f repeats n times
if n<=0: return else: f() loop(f, n-1) loop(hi, 5)

####################################################
python - E731 do not assign a lambda expression, use a def
####################################################

https://www.thecodeteacher.com/question/13147/python---E731-do-not-assign-a-lambda-expression,-use-a-def
https://github.com/OCA/maintainer-quality-tools/issues/332
https://www.flake8rules.com/rules/E731.html
https://stackoverflow.com/questions/25010167/e731-do-not-assign-a-lambda-expression-use-a-def

def f(x): return 2*x

####################################################
EnvironmentVariables
####################################################

https://help.ubuntu.com/community/EnvironmentVariables

export FOO=bar
export DISTRO=jammy
echo $DISTRO


####################################################
Installing Python Packages From a Requirements File
####################################################

https://learnpython.com/blog/python-requirements-file/
https://pip.pypa.io/en/stable/cli/pip_freeze/

pip freeze > requirements.txt
python3 -m pip freeze

tensorflow==2.3.1
uvicorn==0.12.2
fastapi==0.63.0

pip install -r requirements.txt

ImportError: No module named pip
sudo apt-get install python3-pip


Defaulting to user installation because normal site-packages is not writeable
python3 -m pip install [package_name]

ERROR: Could not find a version that satisfies the requirement itertools (from versions: none)

test connection
curl https://pypi.org

https://exerror.com/solved-could-not-find-a-version-that-satisfies-the-requirement/
https://itsmycode.com/solved-defaulting-to-user-installation-because-normal-site-packages-is-not-writeable/

#python3 -m pip install --upgrade pip
#pip install --upgrade setuptools
apt-get update && apt-get upgrade python-pip

pip install virtualenv
virtualenv --version
virtualenv my_name

https://github.com/vulogov/zq/issues/7
https://docs.python.org/2/library/json.html

pip install json

The json module is built into python, so anycodings_pip there is no need to install it.

pip install .
pip install requests


# check if package already installed
https://unix.stackexchange.com/questions/235230/how-to-check-if-a-module-or-a-package-is-already-installed-in-python3
https://stackoverflow.com/questions/1051254/check-if-python-package-is-installed

pip list | grep NAME
pip list | grep -F package
pip show package

pip list --disable-pip-version-check | grep -E "^ruamel\.yaml "


if python -c "import package_name" &> /dev/null; then
    echo 'all good'
else
    echo 'uh oh'
fi

try:
    import mymodule
except ImportError as e:
    pass  # module doesn't exist, deal with it.


####################################################
Install Python 3 Using apt
####################################################

https://www.makeuseof.com/install-python-ubuntu/
https://unix.stackexchange.com/questions/218911/repairing-python-setup

sudo apt-get --reinstall install python3
sudo apt-get update
sudo apt-get upgrade


python3 --version
Python 3.10.4

sudo apt-get -f install
sudo apt-get autoremove
sudo apt-get clean
sudo apt-get autoclean
sudo apt-get update
sudo apt-get upgrade -f
sudo dpkg --configure -a
sudo apt-get update && sudo apt-get dist-upgrade

sudo apt update
sudo apt install python3
sudo apt install software-properties-common
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update
sudo apt --only-upgrade install python3
sudo apt install python3.2
sudo apt install python3.3
sudo apt install python3.8
python --version

####################################################
Update/Upgrade not working
####################################################

https://askubuntu.com/questions/1421222/update-upgrade-not-working
https://askubuntu.com/questions/1420969/how-to-force-packages-that-have-been-kept-back-to-be-installed-as-automat

python3-distupgrade ubuntu-release-upgrader-core

apt-cache policy base-files
sudo apt -o APT::Get::Always-Include-Phased-Updates=true upgrade

update-manager --debug
sudo apt install update-manager
apt-mark showhold

####################################################
sqlalchemy
####################################################

https://pypi.org/project/fastparquet/
https://docs.sqlalchemy.org/en/14/core/engines.html

pip install sqlalchemy

from sqlalchemy import create_engine
engine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')

pip install fastparquet

from fastparquet import ParquetFile
pf = ParquetFile('myfile.parq')
df = pf.to_pandas()
df2 = pf.to_pandas(['col1', 'col2'], categories=['col1'])


https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/json.html
https://docs.python.org/3/library/email.html
https://docs.python.org/3/library/sqlite3.html
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/datetime.html
https://docs.python.org/3/library/collections.html

####################################################
argparse
####################################################

https://pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
https://www.oulub.com/de-DE/Python/howto.argparse
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/argparse.html
https://www.programcreek.com/python/example/11676/argparse.SUPPRESS
https://github.com/kislyuk/argcomplete/issues/113
https://programtalk.com/python-examples/argparse.SUPPRESS/
https://programtalk.com/python-examples/argparse.SUPPRESS/?ipage=3
https://programtalk.com/python-examples/argparse.SUPPRESS/
https://www.educative.io/answers/what-is-argparse-argumentdefault-in-python
https://www.programcreek.com/python/example/11676/argparse.SUPPRESS


import argparse

# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--input", required=True,
	help="path to input image")
ap.add_argument("-o", "--output", required=True,
	help="path to output image")
parser.add_argument('--help', default=argparse.SUPPRESS)
args = vars(ap.parse_args())


parser.add_argument('--foo',help=argparse.SUPPRESS)
parser.print_help()


https://towardsdatascience.com/a-simple-guide-to-command-line-arguments-with-argparse-6824c30ab1c3
https://towardsdatascience.com/a-simple-guide-to-command-line-arguments-with-argparse-6824c30ab1c3

import argparse
parser = argparse.ArgumentParser()
subparser = parser.add_subparsers(dest='command')
login = subparser.add_parser('login')
register = subparser.add_parser('register')
login.add_argument('--username', type=str, required=True)
login.add_argument('--password', type=str, required=True)
register.add_argument('--firstname', type=str, required=True)
register.add_argument('--lastname', type=str, required=True)
register.add_argument('--username', type=str, required=True)
register.add_argument('--email', type=str, required=True)
register.add_argument('--password', type=str, required=True)
args = parser.parse_args()
if args.command == 'login':
  print('Logging in with username:', args.username,
  'and password:', args.password)
elif args.command == 'register':
  print('Creating username', args.username,
  'for new member', args.firstname, args.lastname,
  'with email:', args.email,
  'and password:', args.password)


####################################################
Showing tables using SQL statement
####################################################

https://www.sqlitetutorial.net/sqlite-show-tables/
https://www.sqlite.org/faq.html#q1

sqlite3 mydb.db

SELECT
    name
FROM
    sqlite_schema
WHERE
    type ='table' AND
    name NOT LIKE 'sqlite_%';

con = sqlite3.connect(mydb.db)
cur = con.cursor()
res = cur.execute("SELECT name FROM     sqlite_schema WHERE  type ='table' AND name NOT LIKE 'sqlite_%';")
print(res.fetchone())
print(res.fetchall())

####################################################
sqlalchemy
####################################################

https://docs.sqlalchemy.org/en/14/dialects/oracle.html
https://googleapis.dev/python/pybigquery/0.7.0/index.html
https://googleapis.dev/python/sqlalchemy-bigquery/latest/README.html

arraysize - set the cx_oracle.arraysize value on cursors, defaulted to 50.
This setting is significant with cx_Oracle as the contents of LOB objects are only readable within a row (e.g. within a batch of 50 rows).

####################################################
Series
####################################################

https://researchdatapod.com/how-to-solve-python-attributeerror-series-object-has-no-attribute-lower/

import pandas as pd
series = pd.Series(['LeARNINg', 'PYTHON', 'iS', 'ReALly', 'FUN!'])
print(series)
series_lower = series.str.lower()
print(series_lower)

series_lower = series.apply(lambda x: x.lower())
print(series_lower)


https://stackoverflow.com/questions/40506390/pandas-series-object-has-no-attribute-colnames-when-using-apply

df['D'] = (df.apply(lambda x: myfunc(x[colNames[0]], x[colNames[1]]), axis=1))

https://www.marsja.se/how-to-get-the-column-names-from-a-pandas-dataframe-print-and-list/



import pandas as pd

df = pd.read_csv('https://vincentarelbundock.github.io/Rdatasets/csv/carData/UN98.csv',
                index_col=0)

df.head()
print(df.columns)
print(df.keys())
print(list(df.columns))

https://datascientyst.com/pandas-show-all-columns-rows/

import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)


https://thispointer.com/python-4-ways-to-print-items-of-a-dictionary-line-by-line/
https://www.w3schools.com/python/python_dictionaries.asp

Print a dictionary line by line using for loop & dict.items()

# A dictionary of student names and their score
student_score = {   'Ritika': 5,
                    'Sam': 7,
                    'John': 10,
                    'Aadi': 8}
# Iterate over key/value pairs in dict and print them
for key, value in student_score.items():
    print(key, ' : ', value)


https://thispointer.com/get-first-key-value-pair-from-a-python-dictionary/

# A dictionary of string and integers
word_freq = {
    'Hello' : 56,
    "at"    : 23,
    'test'  : 43,
    'This'  : 78,
    'Why'   : 11
}
# Get first key-value pair of the dictionary
first_pair = next(iter((word_freq.items())) )
print('First Key Value Pair of Dictionary:')
print(first_pair)
print('First Key: ', first_pair[0])
print('First Value: ', first_pair[1])



https://theprogrammingexpert.com/get-first-item-in-dictionary-python/

dictionary = { "key1":"This", "key2":"is", "key3":"a", "key4":"dictionary." }

first_value = list(dictionary.values())[0]

print("The first value of the dictionary is: " + first_value)


https://www.geeksforgeeks.org/python-mapping-key-values-to-dictionary/

# initializing list
test_list = [{'name' : 'Manjeet', 'age' : 23},
             {'name' : 'Akshat',  'age' : 22},
             {'name' : 'Nikhil', 'age' : 21}]

# printing original list
print("The original list is : " + str(test_list))

# Mapping key values to Dictionary
# Using dictionary comprehension
res = {sub['name'] : sub['age'] for sub in test_list}

# printing result
print("The flattened dictionary is : " + str(dict(res)))


https://www.techbeamers.com/python-map-function/

# Considering Dict as our iterable parameter
iter_Dict = {"Python":0, "CSharp":0, "Java":0}
print_Iter(iter_Dict)

# Calling map() function on a dictionary
map_result =  map(getLength, iter_Dict)
print("Type of map_result is {}".format(type(map_result)))

# Printing map() output
print("Lengths are: ")
show_result(map_result)

https://stackoverflow.com/questions/12229064/mapping-over-values-in-a-python-dictionary

my_dictionary = dict(map(lambda kv: (kv[0], f(kv[1])), my_dictionary.iteritems()))

####################################################
pandas index series
####################################################

https://www.geeksforgeeks.org/python-pandas-index-to_series/

# importing pandas as pd
import pandas as pd

# Creating the index
idx = pd.Index(['Harry', 'Mike', 'Arther', 'Nick'],
                                   name ='Student')

# Print the Index
print(idx)
# convert the index into a series
print(idx.to_series())
..
# importing pandas as pd
import pandas as pd

# Creating the index
idx = pd.Index(['Alice', 'Bob', 'Rachel', 'Tyler', 'Louis'],
                                            name ='Winners')

# Print the Index
print(idx)
# convert the index into a series
idx.to_series(index =['Student 1', 'Student 2', 'Student 3','Student 4', 'Student 5'])

####################################################
large data
####################################################

https://www.pytables.org/
https://remusao.github.io/posts/few-tips-sqlite-perf.html

import sqlite3

connection = sqlite3.connect(':memory:')

# Create a table
connection.execute('CREATE TABLE events(ts, msg)')

# Insert values
connection.executemany(
    'INSERT INTO events VALUES (?,?)',
    [
        (1, 'foo'),
        (2, 'bar'),
        (3, 'baz')
    ]
)

# Print inserted rows
for row in connection.execute('SELECT * FROM events'):
    print(row)

connection.close()


https://www.ibm.com/docs/en/watson-studio-local/1.2.3?topic=practices-access-large-data


curs.execute('select * from people')
for row in curs:
    print row


## or batch process many rows:

from __future__ import generators

def ResultIterator(cursor, arraysize=1000):
    'iterator using fetchmany and consumes less memory'
    while True:
        results = cursor.fetchmany(arraysize)
        if not results:
            break
        for result in results:
            yield result
# conn is a DB-API database connection
curs = conn.cursor()
curs.execute('select * from HUGE_TABLE')

for result in ResultIterator(curs):
    doDatascienceOnResult(result)


## Processing a row at a time

row = curs.fetchone()
while row:
    print row
    row = curs.fetchone()


####################################################
parquet
####################################################

https://arrow.apache.org/docs/python/parquet.html
https://pypi.org/project/parquet/
https://pypi.org/project/fastparquet/
https://www.codegrepper.com/code-examples/python/frameworks/django/install+parquet-format
https://pyquestions.com/using-pyarrow-how-do-you-append-to-parquet-file
https://www.educative.io/answers/how-to-load-a-parquet-file-in-pandas

import pyarrow.parquet as pq
df = pq.read_table(source=your_file_path).to_pandas()


import pandas as pd
df = pd.read_csv('example.csv')
df.to_parquet('output.parquet')

import pandas as pd
df =  pd.read_parquet('data.parquet', engine='pyarrow')
print(df)
cols = ["Name"]
df1 = pd.read_parquet('data.parquet', columns=cols)
print(df1)


####################################################
panda to json
####################################################

https://appdividend.com/2022/03/15/pandas-to_json
https://www.delftstack.com/de/howto/python-pandas/pandas-dataframe-to-json/
https://datascienceparichay.com/article/write-pandas-dataframe-to-json-file/
https://thispointer.com/export-pandas-dataframe-to-json/
https://www.geeksforgeeks.org/exporting-pandas-dataframe-to-json-file/

import pandas as pd

# Creating Dataframe
df = pd.DataFrame(
    [['Stranger Things', 'Money Heist'], ['Most Dangerous Game', 'The Stranger']],
    columns=['Netflix', 'Quibi'])

print(df)
data = df.to_json(orient='index')
data = df.to_json('./export.json', orient='index')
data = df.to_json('./export.json', orient='index')
print(data)

# data = df.to_json(orient='columns')
# data = df.to_json(orient='table')
# data = df.to_json(orient='values')
# data = df.to_json(orient='index')
# data = df.to_json(orient='records')


# Convert Python Dictionary To JSON
https://www.geeksforgeeks.org/how-to-convert-python-dictionary-to-json/
https://favtutor.com/blogs/dict-to-json-python
https://appdividend.com/2022/06/07/python-dict-to-json/

import json

# Data to be written
dictionary ={
    "name" : "sathiyajith",
    "rollno" : 56,
    "cgpa" : 8.6,
    "phonenumber" : "9976770500"
}

with open("sample.json", "w") as outfile:
    json.dump(dictionary, outfile)


# Serializing json
json_object = json.dumps(dictionary, indent = 4)
print(json_object)

####################################################
In Python how to obtain a partial view of a dict?
####################################################

https://stackoverflow.com/questions/28704526/in-python-how-to-obtain-a-partial-view-of-a-dict

# Python 3.x
dict(list(mydict.items())[0:2])
# Python 3.x
dict(islice(mydict.items(), 0, 2))

####################################################
Break with
####################################################

https://www.adamsmith.haus/python/answers/how-to-iterate-through-the-lines-of-a-file-in-python
https://stackoverflow.com/questions/17949508/python-read-all-text-file-lines-in-loop

with open('t.ini') as f:
   for line in f:
       # For Python3, use print(line)
       print line
       if 'str' in line:
          break


with open("sample.txt", "r") as a_file:
  for line in a_file:
    stripped_line = line.strip()
    print(stripped_line)

with open('t.ini') as f:
       for line in f:
           print line.strip()
           if 'str' in line:
              break

####################################################
Itertool functions
####################################################

https://note.nkmk.me/en/python-itertools-groupby/
https://www.geeksforgeeks.org/itertools-groupby-in-python/
https://stackoverflow.com/questions/773/how-do-i-use-itertools-groupby
https://docs.python.org/3/library/itertools.html



l = [[0, 'Alice', 0],
     [1, 'Alice', 10],
     [2, 'Bob', 20],
     [3, 'Bob', 30],
     [4, 'Alice', 40]]

for k, g in itertools.groupby(l, lambda x: x[1]):
    print(k, list(g))
# Alice [[0, 'Alice', 0], [1, 'Alice', 10]]
# Bob [[2, 'Bob', 20], [3, 'Bob', 30]]
# Alice [[4, 'Alice', 40]]


for k, g in itertools.groupby(sorted(l, key=lambda x: x[1]), lambda x: x[1]):
    print(k, sum(x[2] for x in g))
# Alice 50
# Bob 50


import itertools
L = [("a", 1), ("a", 2), ("b", 3), ("b", 4)]
# Key function
key_func = lambda x: x[0]

for key, group in itertools.groupby(L, key_func):
    print(key + " :", list(group))

a : [('a', 1), ('a', 2)]
b : [('b', 3), ('b', 4)]


import itertools
a_list = [("Animal", "cat"),
          ("Animal", "dog"),
          ("Bird", "peacock"),
          ("Bird", "pigeon")]


an_iterator = itertools.groupby(a_list, lambda x : x[0])
for key, group in an_iterator:
    key_and_group = {key : list(group)}
    print(key_and_group)
Output

{'Animal': [('Animal', 'cat'), ('Animal', 'dog')]}
{'Bird': [('Bird', 'peacock'), ('Bird', 'pigeon')]}



from itertools import groupby
things = [("animal", "bear"), ("animal", "duck"), ("plant", "cactus"), ("vehicle", "speed boat"), ("vehicle", "school bus")]
for key, group in groupby(things, lambda x: x[0]):
    for thing in group:
        print("A %s is a %s." % (thing[1], key))
    print("")

