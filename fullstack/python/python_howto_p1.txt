##########################################################
#
# Online Python
#
##########################################################

https://repl.it/languages/python3
https://www.onlinegdb.com/online_python_compiler
https://www.tutorialspoint.com/execute_python_online.php
http://www.python-online.ch/pyonline/PyOnline.php
https://www.python.org/shell/
https://www.programiz.com/python-programming/online-compiler/
https://pynative.com/online-python-code-editor-to-execute-python-code/
https://www.jdoodle.com/python3-programming-online/
https://trinket.io/python
https://www.guru99.com/execute-python-online.html

##########################################################
#
# Python uppercase
#
##########################################################

>>> s = 'sdsd'
>>> s.upper()
'SDSD'

##########################################################
#
#   Python Resize Crop
#   http://docs.wand-py.org/en/0.4.1/guide/resizecrop.html
#
##########################################################

>>> from urllib2 import urlopen
>>> from wand.image import Image
>>> f = urlopen('http://api.twitter.com/1/users/profile_image/hongminhee')
>>> with Image(file=f) as img:
...     width = img.width
...     height = img.height
...
>>> f.close()
>>> width
48
>>> height
48


##########################################################
#
#   How to use exit
#
##########################################################

https://stackoverflow.com/questions/19747371/python-exit-commands-why-so-many-and-when-should-each-be-used/19747562
https://stackoverflow.com/questions/1187970/how-to-exit-from-python-without-traceback

Conclusion
Use exit() or quit() in the REPL.
Use sys.exit() in scripts, or raise SystemExit() if you prefer.
Use os._exit() for child processes to exit after a call to os.fork().

Footnotes
* Actually, quit() and exit() are callable instance objects, but I think it's okay to call them functions.

---------

Different Means of Exiting
os._exit():

Exit the process without calling the cleanup handlers.
exit(0):

a clean exit without any errors / problems.
exit(1):

There was some issue / error / problem and that is why the program is exiting.
sys.exit():

When the system and python shuts down; it means less memory is being used after the program is run.
quit():

Closes the python file.

---------------

import sys, traceback

def main():
    try:
        do main program stuff here
        ....
    except KeyboardInterrupt:
        print "Shutdown requested...exiting"
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)

if __name__ == "__main__":
    main()

import sys

try:
    sys.exit(1) # Or something that calls sys.exit()
except SystemExit as e:
    sys.exit(e)
except:
    # Cleanup and reraise. This will print a backtrace.
    # (Insert your cleanup code here.)
    raise



##########################################################

How to connect to SQLite using Python
https://www.a2hosting.com/kb/developer-corner/sqlite/connecting-to-sqlite-using-python

##########################################################


#!/usr/bin/python

from sqlite3 import connect

# Replace username with your own A2 Hosting account username:
conn = connect('/home/username/test.db')
curs = conn.cursor()

curs.execute("CREATE TABLE employees (firstname varchar(32), lastname varchar(32), title varchar(32));")
curs.execute("INSERT INTO employees VALUES('Kelly', 'Koe', 'Engineer');")
conn.commit()

curs.execute("SELECT lastname FROM employees;")
for (name) in curs.fetchall():
    print name

conn.close()


####################################################
#
#	cmd for system command in Perl
#
# 	https://metacpan.org/pod/System::Command
# 	https://blog.udemy.com/perl-system-command/
# 	https://perldoc.perl.org/functions/system.html
#
####################################################

my @args = ("command", "arg1", "arg2");
    system(@args) == 0
        or die "system @args failed: $?";

my $cmd = 'pwd';
my $response = system($cmd);
if($response){
	print "fail!\n";
}

if (system("ls") == 0) {
	print "success!\n";
}

# strace -f -o strace.log perl yourscript.pl



###################################################################
#
# convert imagemagick
#
###################################################################


convert example.png -resize 200 example.png
convert example.png -resize x100 example.png


###################################################################
#
# 	multiprocessing
# 	https://docs.python.org/2/library/multiprocessing.html
#
###################################################################


from multiprocessing import Pool
import random
from random import shuffle

def f(x):
    return int(random.randint(1, 500)) * int(random.random() * 100) * pow(x,28)

if __name__ == '__main__':
    pool = Pool(processes=80)              # start 4 worker processes
    result = pool.apply_async(f, [10])    # evaluate "f(10)" asynchronously
    print (result.get(timeout=1))           # prints "100" unless your computer is *very* slow
    print (pool.map(f, range(10)))          # prints "[0, 1, 4,..., 81]"

from multiprocessing import Process, Queue
def f(q):
    q.put([42, None, 'hello'])
if __name__ == '__main__':
    q = Queue()
    p = Process(target=f, args=(q,))
    p.start()
    print (q.get())    # prints "[42, None, 'hello']"
    p.join()

from multiprocessing import Process, Pipe

def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print (parent_conn.recv())   # prints "[42, None, 'hello']"
    p.join()


###################################################################
#
# 	chunks py3 Break A List Into N-Sized Chunks
#
###################################################################

def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

import pprint
pprint.pprint(list(chunks(range(10, 75), 10)))
[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
 [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]


lst = range(50)
In [26]: np.array_split(lst,5)
Out[26]:
[array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
 array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),
 array([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]),
 array([30, 31, 32, 33, 34, 35, 36, 37, 38, 39]),
 array([40, 41, 42, 43, 44, 45, 46, 47, 48, 49])]

###################################################################
#
#	read JSON
#	https://www.w3schools.com/python/python_json.asp
#	https://docs.python.org/3/library/json.html
#	https://realpython.com/python-json/
#
###################################################################


import json
with open('bzero.json') as file:
    json.load(file)


with open('bzero.json',encoding='utf-8') as f:
    data = (line.strip() for line in f) #Erzeugt Generator Objekt
    data_json = "[{0}]".format(','.join(data))
data = json.loads(data_json)


with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)


blackjack_hand = (8, "Q")
encoded_hand = json.dumps(blackjack_hand)
decoded_hand = json.loads(encoded_hand)




import json
# some JSON:
x =  '{ "name":"John", "age":30, "city":"New York"}'
# parse x:
y = json.loads(x)
# the result is a Python dictionary:
print(y["age"])


import json
# a Python object (dict):
x = {
  "name": "John",
  "age": 30,
  "city": "New York"
}
# convert into JSON:
y = json.dumps(x)
# the result is a JSON string:
print(y)



###################################################################

Python read csv by Alex Stoykov
https://www.youtube.com/watch?v=5-oyXC0iV_4

2008-09-09,443444,567,43,556,43
###################################################################

myFile = open("file.csv","r")
lines = myFile.read().spitlines()
print(lines[0])
print(lines[len(lines)-1])
aline = lines[1]
lineitems aline.split(",")
print(lineitems)
date(lineitems[0])

for i in range(1,16,1):
	aline = lines[i]


##########################################################
#
#   Stop a program if exceeds specific amount of memory
#
##########################################################

sudo python3 -c "import psutil;print(sum(p.memory_full_info().uss for p in psutil.Process(pid=292).children())/1024/1024);"


#!/bin/sh
ps aux | grep "[/]chromium" | awk '{print $5}' | awk '{sum += $1 } END { print sum }'
ps aux | grep "[/]chromium" | awk '{print $6}' | awk '{sum += $1 } END { print sum }'

-------------

import sys, os, psutil

if len(sys.argv) == 2:
    try:
        limit = int(sys.argv[1])
    except:
        limit = 200 # default 200MB
else:
    limit = 200

uid = os.getuid()
for p in psutil.get_process_list():
    try:
        if (p.name == 'chrome' and any('type=renderer' in part for part in p.cmdline)
           and p.uid == uid):
            m = p.get_memory_info()
            #print p.pid,m, m.rss / 1024 / 1024, m.vms / 1024 / 1024
            if (m.rss / 1024 / 1024) > limit: # kill if rss is greater than limit
                print 'Killed', p.pid
                p.kill()
    except psutil.error.NoSuchProcess:
        pass
    except psutil.error.AccessDenied:
        pass

##########################################################
#   date
##########################################################

https://www.programiz.com/python-programming/datetime/current-datetime

from datetime import date
today = date.today()
print("Today's date:", today)

##########################################################
#   debug
##########################################################

python -i pyfile.py # py interactive
import pdb
pdb.set_trace()
pip install virtualenv

##########################################################
#   Python Text To Speech Tutorial - How to make an Audiobook with Python
##########################################################

https://www.youtube.com/watch?v=XQqDMkwdAQw
https://github.com/tombaranowicz/PythonAudiobookGenerator

pip install pdfplumber
pip install gTTS


##########################################################
#   Python 3.x check is string type
##########################################################

https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string

isinstance(s, str)


##########################################################
#   python-pep8-style-guide
##########################################################

https://cheatography.com/jmds/cheat-sheets/python-pep8-style-guide/
https://gist.github.com/RichardBronosky/454964087739a449da04
https://pep8.org/
https://www.python.org/dev/peps/pep-0008/
https://www.python.org/dev/peps/pep-0020/
https://www.python.org/dev/peps/pep-0484/
