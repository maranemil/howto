https://pythonot.github.io/auto_examples/plot_otda_semi_supervised.html
https://pythonot.github.io/auto_examples/plot_otda_classes.html

https://realpython.com/python-typer-cli/


###############################################################
secrets kubernetes
###############################################################

https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/secret
https://kubernetes.io/docs/concepts/configuration/secret/
https://phoenixnap.com/kb/kubernetes-secrets
https://howchoo.com/kubernetes/copy-secrets-kubernetes-cluster
https://cloud.google.com/kubernetes-engine/docs/concepts/secret
https://stackoverflow.com/questions/60224079/terraform-import-kubernetes-secret
https://www.padok.fr/en/blog/kubernetes-secrets
https://github.com/external-secrets/kubernetes-external-secrets
https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/
https://kubernetes.io/docs/concepts/containers/images/
https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
https://github.com/bitnami-labs/sealed-secrets
https://linoxide.com/create-use-kubernetes-secrets/
https://howchoo.com/kubernetes/secure-your-sensitive-data-with-kubernetes-secrets


kubectl create secret generic [secret-name] \
--from-file=[file1] \
--from-file=[file2]

kubectl get secrets


kubectl config current-context
kubectl get secret my-secret-name --export -o yaml > my-secret-name.yaml
kubectl apply -f my-secret-name.yaml
kubectl get secret

https://blog.knoldus.com/how-to-create-secrets-using-kubernetes-python-client/
https://stackoverflow.com/questions/55159582/k8s-python-how-do-i-read-a-secret-using-the-kubernetes-python-client
https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/V1Secret.md
https://www.programcreek.com/python/example/123286/kubernetes.client.V1Secret
https://medium.com/@ahmedmahmoud.prv/manage-kubernetes-secrets-with-python-3d8732d97267
https://notebook.community/mbohlool/client-python/examples/notebooks/create_secret
https://codehunter.cc/a/kubernetes/k8s-python-how-do-i-read-a-secret-using-the-kubernetes-python-client



pip install kubernetes
from kubernetes import client, config


from kubernetes import client, config
config.load_kube_config()
v1 = client.CoreV1Api()
secret = v1.read_namespaced_secret("mysql-pass", "default")
print(secret)


from kubernetes import client, config
import base64
import sys
config.load_kube_config()
v1 = client.CoreV1Api()
sec = str(v1.read_namespaced_secret("mysql-pass", "default").data)
pas = base64.b64decode(sec.strip().split()[1].translate(None, '}\''))
print(pas)



from kubernetes import client, config
import base64
config.load_kube_config()
v1 = client.CoreV1Api()
sec = v1.read_namespaced_secret("default-token-rsbq7", "default").data
cert = base64.b64decode(sec["ca.crt"])
print(cert)

.............

python3 create.py

def create_secret(data , string_data , client_api):
    secret = client.V1Secret(
        api_version="v1",
        kind="Secret",
        metadata=client.V1ObjectMeta(name="my-secret"),
        data=data ,
         string_data=string_data
    )

    api = client_api.create_namespaced_secret(namespace="default",
body=secret)
    return api


api_server_endpoint = "Your_API"
bearer_token = "Your_Token"
configuration = client.Configuration()
configuration.host = api_server_endpoint
configuration.verify_ssl = False
configuration.api_key = {"authorization": "Bearer " + bearer_token}
client.Configuration.set_default(configuration)
client_api = client.CoreV1Api()
cm={
    "name": "deekasha"
}
create_secret({} , cm , client_api)


################################################################
pyscript
################################################################

https://pyscript.net/
https://docs.pyscript.net/latest/
https://docs.pyscript.net/latest/tutorials/index.html
https://docs.pyscript.net/latest/tutorials/getting-started.html
https://pyscript.net/examples/
https://github.com/pyscript/pyscript
https://realpython.com/pyscript-python-in-browser/

<html>
  <head>
    <link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" />
    <script defer src="https://pyscript.net/latest/pyscript.js"></script>
  </head>
  <body>
    <py-script>
        print('Hello, World!')
    </py-script>
  </body>
</html>

################################################################
tkinter colors
################################################################
https://www.plus2net.com/python/tkinter-colors.php

----------------------------------------------------

https://github.com/anchore/grype
https://github.com/anchore/syft
https://github.com/anchore/syft

----------------------------------------------------

https://dash.plotly.com/
https://dash.plotly.com/tutorial
https://github.com/plotly/dash
https://pypi.org/project/dash/
https://realpython.com/python-dash/

----------------------------------------------------

https://programming-23.mooc.fi/
https://docs.python.org/3/tutorial/index.html
https://roadmap.sh/python
https://vladmihalcea.com/hibernate-tupletransformer/
https://vladmihalcea.com/recursive-associations-jpa-hibernate/
https://overapi.com/python

----------------------------------------------------

https://github.com/celery/celery
https://docs.celeryq.dev/en/stable/
https://docs.python.org/3/library/asyncio.html
https://fastapi.tiangolo.com/tutorial/schema-extra-example/
https://docs.pydantic.dev/latest/

----------------------------------------------------

requests Methods
https://requests.readthedocs.io/en/latest/user/quickstart/
https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET


######################################
py libs
######################################

https://www.youtube.com/watch?v=Yh5gcLG6C3Q

0:00 Pygame
0:31 Tensorflow
1:00 Pytorch
1:34 Tkinter
2:06 OpenCV
2:28 Numpy
3:57 Kivy
4:22 Beautiful Soup
4:35 Mechanical Soup
4:45 Selenium
5:05 Scrapy
5:24 SQLite
5:43 Pillow
6:05 Matpoltlib
6:21 SymPy
6:36 SciPy
6:51 Sci-kit Learn
7:08 PyBrain
7:24 Theano
7:37 Natural Language Toolkit
8:13 Pickle
9:01 Pyglet
9:15 Visual Python
9:28 Turtle
9:39 RPy
10:01 SpaCy
10:30 Bokeh
10:48 Plotly
11:04 SQLAlchemy
11:27 FastAPI
11:43 Django
12:07 Flask
12:18 PyWin32
12:40 Py2exe
12:51 PyQT



###################################################
py forms
###################################################
https://github.com/UmSenhorQualquer/pyforms
https://www.riverbankcomputing.com/static/Docs/PyQt6/
https://github.com/pyscripter/pyscripter
https://docs.activestate.com/komodo/12/
https://wiki.python.org/moin/TkInter
https://www.pysimplegui.com/#
https://wiki.python.org/moin/GuiProgramming
https://docs.python.org/3/library/tk.html
https://docs.python.org/3/library/tkinter.html#architecture


-------------------------------------------------------------------



https://python-fiddle.com/
https://pyfiddle.net/
https://python-fiddle.com/examples/matplotlib

https://thonny.org/
sudo snap install thonny
sudo apt install thonny


https://docs.python.org/3/library/asyncio.html

async await


In Python, async and await are used to write asynchronous code, allowing you to perform non-blocking operations. This is particularly useful for tasks like I/O-bound operations (e.g., reading files, making HTTP requests) where waiting for a response would otherwise block the execution of other tasks.

Key Concepts:

async Functions:

Defined using async def.
These functions return a coroutine object, which can be awaited.

await Keyword:

Used to pause the execution of an async function until the awaited coroutine or task completes.
Can only be used inside an async function.

Event Loop:

The core of asynchronous programming in Python.
Manages and executes asynchronous tasks.
Example:
Code kopieren
import asyncio

async def say_hello():
    print("Hello!")
    await asyncio.sleep(1)  # Simulates a non-blocking delay
    print("World!")

# Running the async function
asyncio.run(say_hello())

Key Points:
Non-blocking: While await pauses the current coroutine, other tasks in the event loop can continue running.
Concurrency: You can run multiple asynchronous tasks concurrently using asyncio.gather() or asyncio.create_task().
Example with Multiple Tasks:
Code kopieren
import asyncio

async def task1():
    print("Task 1 started")
    await asyncio.sleep(2)
    print("Task 1 finished")

async def task2():
    print("Task 2 started")
    await asyncio.sleep(1)
    print("Task 2 finished")

async def main():
    await asyncio.gather(task1(), task2())

asyncio.run(main())

Notes:
Avoid using blocking calls like time.sleep() in async functions, as they halt the event loop.
Use libraries like aiohttp for asynchronous HTTP requests or aiomysql for database operations.


----

Here’s a simple Python script to simulate pouring coffee using a coffee machine. It includes basic functionality like selecting a coffee type and simulating the pouring process:

Code kopieren
import time

def pour_coffee(coffee_type):
    print(f"Preparing your {coffee_type}...")
    time.sleep(2)  # Simulates the time taken to prepare coffee
    print("Pouring coffee...")
    for i in range(1, 6):
        print(f"Pouring... {i * 20}%")
        time.sleep(0.5)  # Simulates pouring in increments
    print(f"Your {coffee_type} is ready! Enjoy! ☕")

def coffee_machine():
    print("Welcome to the Python Coffee Machine!")
    print("Please select your coffee:")
    print("1. Espresso")
    print("2. Latte")
    print("3. Cappuccino")
    
    choice = input("Enter the number of your choice: ")
    coffee_types = {"1": "Espresso", "2": "Latte", "3": "Cappuccino"}
    
    if choice in coffee_types:
        pour_coffee(coffee_types[choice])
    else:
        print("Invalid choice. Please try again.")

# Run the coffee machine
coffee_machine()

How it works:
The user selects a coffee type (Espresso, Latte, or Cappuccino).
The script simulates the preparation and pouring process with a progress indicator.
Once complete, it displays a friendly message.

Feel free to expand this script by adding features like ingredient management, cost calculation, or customization options!


https://learn.microsoft.com/en-us/windows/python/beginners
https://developer.microsoft.com/de-de/python

Let me know if you'd like further clarification or examples! 😊

------------------------------

In Python, an identifier is the name used to identify variables, functions, classes, modules, or other objects. It serves as a label to reference these entities in your code. Identifiers must follow specific rules:

Key Characteristics of Identifiers:

Naming Rules:

Can include letters (A-Z, a-z), digits (0-9), and underscores (_).
Must not start with a digit.
Cannot use Python keywords (e.g., if, else, while) as identifiers.
Are case-sensitive (e.g., myVar and MyVar are different).

Examples:

Valid: my_variable, age, _temp, data123
Invalid: 123data (starts with a digit), my-variable (contains a hyphen), class (reserved keyword)

Best Practices:

Use meaningful names (e.g., student_name instead of x).
Follow conventions like snake_case for variables/functions and PascalCase for classes.

Identifiers are essential for writing clear and maintainable Python code!


------------------------------


Python Events Delegate

Mreq.RequestEvent += Mreq.RequestEventDelegate(handleResponseEvent)

def handleRequestEvent (request, response):
    print ' event fired'
   
   
------------------------------
 
def do_work_and_notify(on_done):
    // do work
    on_done()

def send_email_on_completion():
    email_send('[email protected]', 'you are done')

do_work_and_notify(send_email_on_completion)
   
............

class Event:
    def __init__(self):
        # Initialise a list of listeners
        self.__listeners = []
    
    # Define a getter for the 'on' property which returns the decorator.
    @property
    def on(self):
        # A declorator to run addListener on the input function.
        def wrapper(func):
            self.addListener(func)
            return func
        return wrapper
    
    # Add and remove functions from the list of listeners.
    def addListener(self,func):
        if func in self.__listeners: return
        self.__listeners.append(func)
    
    def removeListener(self,func):
        if func not in self.__listeners: return
        self.__listeners.remove(func)
    
    # Trigger events.
    def trigger(self,args = None):
        # Run all the functions that are saved.
        if args is None:
            args = []
        for func in self.__listeners: func(*args)
   
   
   
evn = Event()
# Some code...
evn.trigger(['arg x','arg y'])
   
@evn.on
def some_function(x,y): pass

def some_function(x,y): pass
evn.addListener(some_function)

evn.removeListener(some_function)

..
# some.py

from event import Event

class SomeClass:
    def __init__(self):
        # Private event variable
        self.__event = Event()
        # Public event variable (decorator)
        self.event = self.__event.on

some = SomeClass()


https://stackoverflow.com/questions/70982565/how-do-i-make-an-event-listener-with-decorators-in-python


https://wiki.python.org/moin/DelegationEventModel
https://pypi.org/project/Events/
https://events.readthedocs.io/en/latest/
https://pypi.org/project/cs-events/
https://docs.python.org/3/library/asyncio-eventloop.html

http://python4kids.net/how2think/kap06.htm
https://www.python-kurs.eu/python3_variablen.php
https://www.python-kurs.eu/variablen.php
https://de.python-3.com/?p=689



------------------------------

https://mypy.readthedocs.io/en/stable/
https://github.com/python/mypy
https://www.mypy-lang.org/
