Here is a complete example of a CRUD (Create, Read, Update, Delete) application in Go using SQLite. This example demonstrates how to manage a users table.
Code:
Gopackage main

import (
	"database/sql"
	"fmt"
	"log"

	_ "github.com/mattn/go-sqlite3" // SQLite driver
)

// User struct represents a user entity
type User struct {
	ID    int
	Name  string
	Email string
}

// Initialize the database and create the users table
func initializeDatabase() (*sql.DB, error) {
	db, err := sql.Open("sqlite3", "./users.db")
	if err != nil {
		return nil, err
	}

	// Create the users table if it doesn't exist
	createTableQuery := `
	CREATE TABLE IF NOT EXISTS users (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		email TEXT NOT NULL UNIQUE
	);`
	_, err = db.Exec(createTableQuery)
	if err != nil {
		return nil, err
	}

	return db, nil
}

// Create a new user
func createUser(db *sql.DB, name, email string) error {
	insertQuery := `INSERT INTO users (name, email) VALUES (?, ?)`
	_, err := db.Exec(insertQuery, name, email)
	return err
}

// Read all users
func readUsers(db *sql.DB) ([]User, error) {
	rows, err := db.Query("SELECT id, name, email FROM users")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []User
	for rows.Next() {
		var user User
		err := rows.Scan(&user.ID, &user.Name, &user.Email)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}
	return users, nil
}

// Update a user's information
func updateUser(db *sql.DB, id int, name, email string) error {
	updateQuery := `UPDATE users SET name = ?, email = ? WHERE id = ?`
	_, err := db.Exec(updateQuery, name, email, id)
	return err
}

// Delete a user
func deleteUser(db *sql.DB, id int) error {
	deleteQuery := `DELETE FROM users WHERE id = ?`
	_, err := db.Exec(deleteQuery, id)
	return err
}

func main() {
	// Initialize the database
	db, err := initializeDatabase()
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}
	defer db.Close()

	// Example CRUD operations
	fmt.Println("Creating users...")
	err = createUser(db, "Alice", "alice@example.com")
	if err != nil {
		log.Printf("Error creating user: %v", err)
	}
	err = createUser(db, "Bob", "bob@example.com")
	if err != nil {
		log.Printf("Error creating user: %v", err)
	}

	fmt.Println("Reading users...")
	users, err := readUsers(db)
	if err != nil {
		log.Printf("Error reading users: %v", err)
	} else {
		for _, user := range users {
			fmt.Printf("ID: %d, Name: %s, Email: %s\n", user.ID, user.Name, user.Email)
		}
	}

	fmt.Println("Updating user...")
	err = updateUser(db, 1, "Alice Updated", "alice.updated@example.com")
	if err != nil {
		log.Printf("Error updating user: %v", err)
	}

	fmt.Println("Deleting user...")
	err = deleteUser(db, 2)
	if err != nil {
		log.Printf("Error deleting user: %v", err)
	}

	fmt.Println("Final list of users:")
	users, err = readUsers(db)
	if err != nil {
		log.Printf("Error reading users: %v", err)
	} else {
		for _, user := range users {
			fmt.Printf("ID: %d, Name: %s, Email: %s\n", user.ID, user.Name, user.Email)
		}
	}
}

Explanation:

Database Initialization: Creates a SQLite database file (users.db) and a users table if it doesn't exist.
CRUD Functions:

createUser: Inserts a new user into the database.
readUsers: Reads all users from the database.
updateUser: Updates a user's name and email by ID.
deleteUser: Deletes a user by ID.


Main Function: Demonstrates the CRUD operations in sequence.

Dependencies:
Install the SQLite driver for Go:
Bashgo get github.com/mattn/go-sqlite3

Example Output:
Creating users...
Reading users...
ID: 1, Name: Alice, Email: alice@example.com
ID: 2, Name: Bob, Email: bob@example.com
Updating user...
Deleting user...
Final list of users:
ID: 1, Name: Alice Updated, Email: alice.updated@example.com


