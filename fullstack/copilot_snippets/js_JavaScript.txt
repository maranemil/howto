Here is a complete example of a GUI-based CRUD application using JavaScript, SQLite, and Node.js. The GUI is built with HTML and Bootstrap, while the backend uses Express.js to handle SQLite operations.

Prerequisites

Install Node.js and npm.
Install required packages:Bashnpm install express sqlite3 body-parser




File Structure
project/
├── app.js          # Backend server
├── database.db     # SQLite database
├── public/
│   ├── index.html  # Frontend GUI
│   ├── style.css   # Optional CSS


Backend: app.js
Javascriptconst express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const db = new sqlite3.Database('./database.db');

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// Create table if not exists
db.run(`
  CREATE TABLE IF NOT EXISTS items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    quantity INTEGER NOT NULL
  )
`);

// API Routes
// 1. Read all items
app.get('/api/items', (req, res) => {
  db.all('SELECT * FROM items', [], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});

// 2. Create a new item
app.post('/api/items', (req, res) => {
  const { name, quantity } = req.body;
  db.run('INSERT INTO items (name, quantity) VALUES (?, ?)', [name, quantity], function (err) {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ id: this.lastID, name, quantity });
  });
});

// 3. Update an item
app.put('/api/items/:id', (req, res) => {
  const { id } = req.params;
  const { name, quantity } = req.body;
  db.run('UPDATE items SET name = ?, quantity = ? WHERE id = ?', [name, quantity, id], function (err) {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ updated: this.changes });
  });
});

// 4. Delete an item
app.delete('/api/items/:id', (req, res) => {
  const { id } = req.params;
  db.run('DELETE FROM items WHERE id = ?', [id], function (err) {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ deleted: this.changes });
  });
});

// Start server
app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});


Frontend: public/index.html
Html<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CRUD App</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
  <div class="container mt-5">
    <h1 class="text-center">CRUD App with SQLite</h1>
    <form id="itemForm" class="mb-3">
      <div class="row">
        <div class="col-md-5">
          <input type="text" id="name" class="form-control" placeholder="Item Name" required>
        </div>
        <div class="col-md-3">
          <input type="number" id="quantity" class="form-control" placeholder="Quantity" required>
        </div>
        <div class="col-md-4">
          <button type="submit" class="btn btn-primary w-100">Add Item</button>
        </div>
      </div>
    </form>
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Quantity</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="itemsTable"></tbody>
    </table>
  </div>

  <script>
    const apiUrl = '/api/items';

    // Fetch and display items
    function fetchItems() {
      fetch(apiUrl)
        .then(res => res.json())
        .then(data => {
          const table = document.getElementById('itemsTable');
          table.innerHTML = '';
          data.forEach(item => {
            table.innerHTML += `
              <tr>
                <td>${item.id}</td>
                <td>${item.name}</td>
                <td>${item.quantity}</td>
                <td>
                  <button class="btn btn-warning btn-sm" onclick="editItem(${item.id}, '${item.name}', ${item.quantity})">Edit</button>
                  <button class="btn btn-danger btn-sm" onclick="deleteItem(${item.id})">Delete</button>
                </td>
              </tr>
            `;
          });
        });
    }

    // Add new item
    document.getElementById('itemForm').addEventListener('submit', function (e) {
      e.preventDefault();
      const name = document.getElementById('name').value;
      const quantity = document.getElementById('quantity').value;

      fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, quantity })
      }).then(() => {
        fetchItems();
        this.reset();
      });
    });

    // Edit item
    function editItem(id, name, quantity) {
      const newName = prompt('Enter new name:', name);
      const newQuantity = prompt('Enter new quantity:', quantity);

      if (newName && newQuantity) {
        fetch(`${apiUrl}/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name: newName, quantity: parseInt(newQuantity) })
        }).then(() => fetchItems());
      }
    }

    // Delete item
    function deleteItem(id) {
      if (confirm('Are you sure you want to delete this item?')) {
        fetch(`${apiUrl}/${id}`, { method: 'DELETE' }).then(() => fetchItems());
      }
    }

    // Initial fetch
    fetchItems();
  </script>
</body>
</html>


How to Run

Start the server:Bashnode app.js


Open your browser and navigate to http://localhost:3000.

This application provides a simple GUI for managing items in an SQLite database. You can add, view, edit, and delete items directly from the interface.

