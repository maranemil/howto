Here is a complete example of a GUI-based CRUD (Create, Read, Update, Delete) application using Python's Tkinter for the interface and SQLite for the database.
Code:
Pythonimport sqlite3
from tkinter import *
from tkinter import messagebox

# Database setup
def setup_database():
    conn = sqlite3.connect("crud_app.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            age INTEGER NOT NULL
        )
    """)
    conn.commit()
    conn.close()

# Add a new record
def add_record():
    name = name_entry.get()
    age = age_entry.get()

    if not name or not age.isdigit():
        messagebox.showerror("Error", "Please enter valid name and age.")
        return

    conn = sqlite3.connect("crud_app.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", (name, int(age)))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Record added successfully!")
    clear_entries()
    display_records()

# Display all records
def display_records():
    for row in records_list.get_children():
        records_list.delete(row)

    conn = sqlite3.connect("crud_app.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users")
    rows = cursor.fetchall()
    conn.close()

    for row in rows:
        records_list.insert("", "end", values=row)

# Update a selected record
def update_record():
    selected = records_list.focus()
    if not selected:
        messagebox.showerror("Error", "Please select a record to update.")
        return

    name = name_entry.get()
    age = age_entry.get()

    if not name or not age.isdigit():
        messagebox.showerror("Error", "Please enter valid name and age.")
        return

    record_id = records_list.item(selected)["values"][0]

    conn = sqlite3.connect("crud_app.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET name = ?, age = ? WHERE id = ?", (name, int(age), record_id))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Record updated successfully!")
    clear_entries()
    display_records()

# Delete a selected record
def delete_record():
    selected = records_list.focus()
    if not selected:
        messagebox.showerror("Error", "Please select a record to delete.")
        return

    record_id = records_list.item(selected)["values"][0]

    conn = sqlite3.connect("crud_app.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE id = ?", (record_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Record deleted successfully!")
    display_records()

# Clear input fields
def clear_entries():
    name_entry.delete(0, END)
    age_entry.delete(0, END)

# Populate input fields with selected record
def populate_fields(event):
    selected = records_list.focus()
    if not selected:
        return

    values = records_list.item(selected)["values"]
    name_entry.delete(0, END)
    name_entry.insert(0, values[1])
    age_entry.delete(0, END)
    age_entry.insert(0, values[2])

# GUI setup
root = Tk()
root.title("CRUD Application with Tkinter and SQLite")
root.geometry("600x400")

# Input fields
Label(root, text="Name:").grid(row=0, column=0, padx=10, pady=10)
name_entry = Entry(root)
name_entry.grid(row=0, column=1, padx=10, pady=10)

Label(root, text="Age:").grid(row=1, column=0, padx=10, pady=10)
age_entry = Entry(root)
age_entry.grid(row=1, column=1, padx=10, pady=10)

# Buttons
Button(root, text="Add", command=add_record).grid(row=2, column=0, padx=10, pady=10)
Button(root, text="Update", command=update_record).grid(row=2, column=1, padx=10, pady=10)
Button(root, text="Delete", command=delete_record).grid(row=2, column=2, padx=10, pady=10)
Button(root, text="Clear", command=clear_entries).grid(row=2, column=3, padx=10, pady=10)

# Records display
from tkinter.ttk import Treeview
records_list = Treeview(root, columns=("ID", "Name", "Age"), show="headings")
records_list.heading("ID", text="ID")
records_list.heading("Name", text="Name")
records_list.heading("Age", text="Age")
records_list.bind("<ButtonRelease-1>", populate_fields)
records_list.grid(row=3, column=0, columnspan=4, padx=10, pady=10)

# Initialize database and display records
setup_database()
display_records()

root.mainloop()

Features:

Create: Add new records with name and age.
Read: Display all records in a Treeview.
Update: Modify selected records.
Delete: Remove selected records.
Validation: Ensures valid input for name and age.

How to Run:

Save the code to a file, e.g., crud_app.py.
Run the file using Python 3.
The SQLite database (crud_app.db) will be created automatically in the same directory.

This example is robust, handles edge cases, and provides a user-friendly interface.

