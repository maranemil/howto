Here is a complete example of a GUI-based CRUD application in Go using the Fyne library for the GUI and SQLite for the database. This example demonstrates how to manage a simple "Users" table with fields for ID, Name, and Email.

Code:
Gopackage main

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"

	_ "github.com/mattn/go-sqlite3"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
)

// User struct represents a user in the database
type User struct {
	ID    int
	Name  string
	Email string
}

var db *sql.DB

// Initialize SQLite database
func initDB() {
	var err error
	db, err = sql.Open("sqlite3", "users.db")
	if err != nil {
		log.Fatal(err)
	}

	// Create Users table if it doesn't exist
	query := `
	CREATE TABLE IF NOT EXISTS users (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		email TEXT NOT NULL
	);`
	_, err = db.Exec(query)
	if err != nil {
		log.Fatal(err)
	}
}

// Fetch all users from the database
func fetchUsers() ([]User, error) {
	rows, err := db.Query("SELECT id, name, email FROM users")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []User
	for rows.Next() {
		var user User
		err := rows.Scan(&user.ID, &user.Name, &user.Email)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}
	return users, nil
}

// Add a new user to the database
func addUser(name, email string) error {
	_, err := db.Exec("INSERT INTO users (name, email) VALUES (?, ?)", name, email)
	return err
}

// Update an existing user in the database
func updateUser(id int, name, email string) error {
	_, err := db.Exec("UPDATE users SET name = ?, email = ? WHERE id = ?", name, email, id)
	return err
}

// Delete a user from the database
func deleteUser(id int) error {
	_, err := db.Exec("DELETE FROM users WHERE id = ?", id)
	return err
}

func main() {
	// Initialize database
	initDB()
	defer db.Close()

	// Create Fyne application
	a := app.New()
	w := a.NewWindow("CRUD Application with Go and SQLite")
	w.Resize(fyne.NewSize(600, 400))

	// UI Elements
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("Enter Name")
	emailEntry := widget.NewEntry()
	emailEntry.SetPlaceHolder("Enter Email")
	userList := widget.NewList(
		func() int {
			users, _ := fetchUsers()
			return len(users)
		},
		func() fyne.CanvasObject {
			return widget.NewLabel("User")
		},
		func(i widget.ListItemID, o fyne.CanvasObject) {
			users, _ := fetchUsers()
			o.(*widget.Label).SetText(fmt.Sprintf("%d: %s (%s)", users[i].ID, users[i].Name, users[i].Email))
		},
	)

	// Add User Button
	addButton := widget.NewButton("Add User", func() {
		name := nameEntry.Text
		email := emailEntry.Text
		if name != "" && email != "" {
			err := addUser(name, email)
			if err != nil {
				log.Println("Error adding user:", err)
			}
			userList.Refresh()
		}
	})

	// Update User Button
	updateButton := widget.NewButton("Update User", func() {
		id, err := strconv.Atoi(nameEntry.Text)
		if err == nil {
			email := emailEntry.Text
			err := updateUser(id, nameEntry.Text, email)
			if err != nil {
				log.Println("Error updating user:", err)
			}
			userList.Refresh()
		}
	})

	// Delete User Button
	deleteButton := widget.NewButton("Delete User", func() {
		id, err := strconv.Atoi(nameEntry.Text)
		if err == nil {
			err := deleteUser(id)
			if err != nil {
				log.Println("Error deleting user:", err)
			}
			userList.Refresh()
		}
	})

	// Layout
	form := container.NewVBox(
		widget.NewLabel("Name:"),
		nameEntry,
		widget.NewLabel("Email:"),
		emailEntry,
		addButton,
		updateButton,
		deleteButton,
	)
	content := container.NewHSplit(userList, form)
	content.SetOffset(0.3)

	w.SetContent(content)
	w.ShowAndRun()
}


Explanation:


Database Setup:

SQLite is initialized with a users table.
The initDB function ensures the table exists before any operations.



CRUD Operations:

fetchUsers: Retrieves all users from the database.
addUser: Adds a new user.
updateUser: Updates an existing user by ID.
deleteUser: Deletes a user by ID.



GUI with Fyne:

A split layout is used: a list of users on the left and a form for adding/updating/deleting users on the right.
Buttons trigger the respective CRUD operations and refresh the user list.



Error Handling:

Basic error handling is included for database operations.



Requirements:

Install dependencies:Bashgo get fyne.io/fyne/v2
go get github.com/mattn/go-sqlite3



Example Usage:

Add a user by entering a name and email, then clicking "Add User".
Update or delete a user by entering their ID in the name field and clicking the respective button.


