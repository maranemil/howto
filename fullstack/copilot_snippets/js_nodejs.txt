Below is a complete example of a CRUD GUI application using Node.js, SQLite, and Express.js with EJS (Embedded JavaScript) as the templating engine. This example demonstrates how to create, read, update, and delete records in an SQLite database through a web-based interface.

1. Install Required Dependencies
Run the following command to install the necessary packages:
Bashnpm install express sqlite3 body-parser ejs


2. Project Structure
project/
├── app.js          # Main application file
├── views/          # Folder for EJS templates
│   ├── index.ejs   # List all records
│   ├── create.ejs  # Form to create a new record
│   ├── edit.ejs    # Form to edit a record
└── database.db     # SQLite database file


3. Code: app.js
Javascriptconst express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const db = new sqlite3.Database('./database.db');

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Create "users" table if it doesn't exist
db.run(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL
  )
`);

// Routes

// 1. List all users
app.get('/', (req, res) => {
  db.all('SELECT * FROM users', (err, rows) => {
    if (err) return res.status(500).send('Database error');
    res.render('index', { users: rows });
  });
});

// 2. Show form to create a new user
app.get('/create', (req, res) => {
  res.render('create');
});

// 3. Handle form submission to create a new user
app.post('/create', (req, res) => {
  const { name, email } = req.body;
  db.run('INSERT INTO users (name, email) VALUES (?, ?)', [name, email], (err) => {
    if (err) return res.status(500).send('Database error');
    res.redirect('/');
  });
});

// 4. Show form to edit a user
app.get('/edit/:id', (req, res) => {
  const { id } = req.params;
  db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
    if (err) return res.status(500).send('Database error');
    res.render('edit', { user: row });
  });
});

// 5. Handle form submission to update a user
app.post('/edit/:id', (req, res) => {
  const { id } = req.params;
  const { name, email } = req.body;
  db.run('UPDATE users SET name = ?, email = ? WHERE id = ?', [name, email, id], (err) => {
    if (err) return res.status(500).send('Database error');
    res.redirect('/');
  });
});

// 6. Delete a user
app.get('/delete/:id', (req, res) => {
  const { id } = req.params;
  db.run('DELETE FROM users WHERE id = ?', [id], (err) => {
    if (err) return res.status(500).send('Database error');
    res.redirect('/');
  });
});

// Start the server
app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});


4. Views
views/index.ejs (List Users)
Html<!DOCTYPE html>
<html>
<head>
  <title>Users</title>
</head>
<body>
  <h1>Users</h1>
  <a href="/create">Create New User</a>
  <table border="1">
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Email</th>
      <th>Actions</th>
    </tr>
    <% users.forEach(user => { %>
      <tr>
        <td><%= user.id %></td>
        <td><%= user.name %></td>
        <td><%= user.email %></td>
        <td>
          <a href="/edit/<%= user.id %>">Edit</a>
          <a href="/delete/<%= user.id %>">Delete</a>
        </td>
      </tr>
    <% }) %>
  </table>
</body>
</html>

views/create.ejs (Create User Form)
Html<!DOCTYPE html>
<html>
<head>
  <title>Create User</title>
</head>
<body>
  <h1>Create User</h1>
  <form action="/create" method="POST">
    <label>Name:</label>
    <input type="text" name="name" required>
    <br>
    <label>Email:</label>
    <input type="email" name="email" required>
    <br>
    <button type="submit">Create</button>
  </form>
</body>
</html>

views/edit.ejs (Edit User Form)
Html<!DOCTYPE html>
<html>
<head>
  <title>Edit User</title>
</head>
<body>
  <h1>Edit User</h1>
  <form action="/edit/<%= user.id %>" method="POST">
    <label>Name:</label>
    <input type="text" name="name" value="<%= user.name %>" required>
    <br>
    <label>Email:</label>
    <input type="email" name="email" value="<%= user.email %>" required>
    <br>
    <button type="submit">Update</button>
  </form>
</body>
</html>


5. Run the Application
Start the server:
Bashnode app.js

Visit http://localhost:3000 in your browser to interact with the CRUD GUI.

This example provides a simple, functional CRUD application with a web-based interface. You can extend it further by adding features like validation, authentication, or styling with CSS frameworks like Bootstrap.

