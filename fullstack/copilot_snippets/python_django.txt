Here is a complete example of a Django CRUD application using an SQLite database. This example demonstrates how to create, retrieve, update, and delete records for a simple Book model.

Steps to Create the CRUD App:


Install Django:
Bashpip install django



Start a Django Project:
Bashdjango-admin startproject myproject
cd myproject



Create an App:
Bashpython manage.py startapp books



Define the Book Model in books/models.py:
Pythonfrom django.db import models

class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.CharField(max_length=100)
    published_date = models.DateField()
    isbn = models.CharField(max_length=13, unique=True)

    def __str__(self):
        return self.title



Register the Model in books/admin.py:
Pythonfrom django.contrib import admin
from .models import Book

admin.site.register(Book)



Add the App to INSTALLED_APPS in myproject/settings.py:
PythonINSTALLED_APPS = [
    ...,
    'books',
]



Run Migrations:
Bashpython manage.py makemigrations
python manage.py migrate



Create Views for CRUD Operations in books/views.py:
Pythonfrom django.shortcuts import render, get_object_or_404, redirect
from .models import Book
from .forms import BookForm

# List all books
def book_list(request):
    books = Book.objects.all()
    return render(request, 'books/book_list.html', {'books': books})

# Create a new book
def book_create(request):
    if request.method == 'POST':
        form = BookForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('book_list')
    else:
        form = BookForm()
    return render(request, 'books/book_form.html', {'form': form})

# Update an existing book
def book_update(request, pk):
    book = get_object_or_404(Book, pk=pk)
    if request.method == 'POST':
        form = BookForm(request.POST, instance=book)
        if form.is_valid():
            form.save()
            return redirect('book_list')
    else:
        form = BookForm(instance=book)
    return render(request, 'books/book_form.html', {'form': form})

# Delete a book
def book_delete(request, pk):
    book = get_object_or_404(Book, pk=pk)
    if request.method == 'POST':
        book.delete()
        return redirect('book_list')
    return render(request, 'books/book_confirm_delete.html', {'book': book})



Create a Form in books/forms.py:
Pythonfrom django import forms
from .models import Book

class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['title', 'author', 'published_date', 'isbn']



Set Up URLs in books/urls.py:
Pythonfrom django.urls import path
from . import views

urlpatterns = [
    path('', views.book_list, name='book_list'),
    path('create/', views.book_create, name='book_create'),
    path('<int:pk>/update/', views.book_update, name='book_update'),
    path('<int:pk>/delete/', views.book_delete, name='book_delete'),
]

Include the app URLs in myproject/urls.py:
Pythonfrom django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('books/', include('books.urls')),
]



Create Templates in books/templates/books/:


book_list.html:
Html<h1>Book List</h1>
<a href="{% url 'book_create' %}">Add New Book</a>
<ul>
    {% for book in books %}
        <li>
            {{ book.title }} by {{ book.author }}
            <a href="{% url 'book_update' book.pk %}">Edit</a>
            <a href="{% url 'book_delete' book.pk %}">Delete</a>
        </li>
    {% endfor %}
</ul>



book_form.html:
Html<h1>{{ form.instance.pk|yesno:"Edit Book,Add New Book" }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save</button>
</form>



book_confirm_delete.html:
Html<h1>Delete Book</h1>
<p>Are you sure you want to delete "{{ book.title }}"?</p>
<form method="post">
    {% csrf_token %}
    <button type="submit">Yes, delete</button>
    <a href="{% url 'book_list' %}">Cancel</a>
</form>





Run the Development Server:
Bashpython manage.py runserver



Access the App:
Visit http://127.0.0.1:8000/books/ to manage books.



This example demonstrates a fully functional CRUD app with Django and SQLite. You can extend it further by adding user authentication, pagination, or additional features.

