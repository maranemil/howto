Below is a complete example of a CRUD application in Angular using SQLite as the database. This example uses Ionic with Capacitor to integrate SQLite for a GUI-based Angular app.

Steps:


Install Dependencies:
Bashnpm install @capacitor-community/sqlite
npm install @ionic/angular
npm install @angular/forms



Create Angular Components:

list.component.ts: Displays records.
form.component.ts: Adds/edits records.



SQLite Service: Manages database operations.



Code Example:
1. SQLite Service (sqlite.service.ts)
Typescriptimport { Injectable } from '@angular/core';
import { CapacitorSQLite, SQLiteDBConnection } from '@capacitor-community/sqlite';

@Injectable({
  providedIn: 'root',
})
export class SQLiteService {
  private db: SQLiteDBConnection | null = null;

  async initializeDatabase() {
    try {
      const dbName = 'example.db';
      this.db = await CapacitorSQLite.createConnection({
        database: dbName,
        version: 1,
      });
      await this.db.open();
      await this.db.execute(`
        CREATE TABLE IF NOT EXISTS items (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          description TEXT
        );
      `);
    } catch (error) {
      console.error('Database initialization failed:', error);
    }
  }

  async getItems(): Promise<any[]> {
    const result = await this.db?.query('SELECT * FROM items;');
    return result?.values || [];
  }

  async addItem(name: string, description: string) {
    await this.db?.run('INSERT INTO items (name, description) VALUES (?, ?);', [name, description]);
  }

  async updateItem(id: number, name: string, description: string) {
    await this.db?.run('UPDATE items SET name = ?, description = ? WHERE id = ?;', [name, description, id]);
  }

  async deleteItem(id: number) {
    await this.db?.run('DELETE FROM items WHERE id = ?;', [id]);
  }
}


2. List Component (list.component.ts)
Typescriptimport { Component, OnInit } from '@angular/core';
import { SQLiteService } from '../services/sqlite.service';

@Component({
  selector: 'app-list',
  template: `
    <ion-header>
      <ion-toolbar>
        <ion-title>Item List</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content>
      <ion-button (click)="loadItems()">Refresh</ion-button>
      <ion-list>
        <ion-item *ngFor="let item of items">
          <ion-label>
            <h2>{{ item.name }}</h2>
            <p>{{ item.description }}</p>
          </ion-label>
          <ion-button (click)="editItem(item)">Edit</ion-button>
          <ion-button color="danger" (click)="deleteItem(item.id)">Delete</ion-button>
        </ion-item>
      </ion-list>
    </ion-content>
  `,
})
export class ListComponent implements OnInit {
  items: any[] = [];

  constructor(private sqliteService: SQLiteService) {}

  async ngOnInit() {
    await this.sqliteService.initializeDatabase();
    this.loadItems();
  }

  async loadItems() {
    this.items = await this.sqliteService.getItems();
  }

  editItem(item: any) {
    // Navigate to form with item data
  }

  async deleteItem(id: number) {
    await this.sqliteService.deleteItem(id);
    this.loadItems();
  }
}


3. Form Component (form.component.ts)
Typescriptimport { Component } from '@angular/core';
import { SQLiteService } from '../services/sqlite.service';

@Component({
  selector: 'app-form',
  template: `
    <ion-header>
      <ion-toolbar>
        <ion-title>Add/Edit Item</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content>
      <form (ngSubmit)="saveItem()">
        <ion-item>
          <ion-label position="floating">Name</ion-label>
          <ion-input [(ngModel)]="name" name="name"></ion-input>
        </ion-item>
        <ion-item>
          <ion-label position="floating">Description</ion-label>
          <ion-textarea [(ngModel)]="description" name="description"></ion-textarea>
        </ion-item>
        <ion-button expand="full" type="submit">Save</ion-button>
      </form>
    </ion-content>
  `,
})
export class FormComponent {
  name: string = '';
  description: string = '';

  constructor(private sqliteService: SQLiteService) {}

  async saveItem() {
    if (this.name) {
      await this.sqliteService.addItem(this.name, this.description);
    }
  }
}


Explanation:

SQLite Service:

Handles database initialization and CRUD operations.


List Component:

Displays all items and allows deletion.


Form Component:

Adds or edits items.



Run the App:

Start the app:Bashionic serve


Use the GUI to add, edit, and delete items.

This example provides a basic structure for a CRUD app with Angular and SQLite. You can expand it further with routing, validation, and advanced features.

