Here’s a complete example of performing CRUD (Create, Read, Update, Delete) operations using JavaScript with an SQLite database. This example uses Node.js and the sqlite3 module.
Steps:


Install the sqlite3 package:
Bashnpm install sqlite3



Below is the complete code:


Javascriptconst sqlite3 = require('sqlite3').verbose();

// Create and connect to the SQLite database
const db = new sqlite3.Database('example.db', (err) => {
    if (err) {
        console.error('Error connecting to database:', err.message);
    } else {
        console.log('Connected to SQLite database.');
    }
});

// Create a table
db.serialize(() => {
    db.run(`
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL
        )
    `, (err) => {
        if (err) {
            console.error('Error creating table:', err.message);
        } else {
            console.log('Table created or already exists.');
        }
    });
});

// CREATE: Insert a new user
function createUser(name, email) {
    const query = `INSERT INTO users (name, email) VALUES (?, ?)`;
    db.run(query, [name, email], function (err) {
        if (err) {
            console.error('Error inserting user:', err.message);
        } else {
            console.log(`User added with ID: ${this.lastID}`);
        }
    });
}

// READ: Fetch all users
function readUsers() {
    const query = `SELECT * FROM users`;
    db.all(query, [], (err, rows) => {
        if (err) {
            console.error('Error fetching users:', err.message);
        } else {
            console.log('Users:', rows);
        }
    });
}

// UPDATE: Update a user's name by ID
function updateUser(id, newName) {
    const query = `UPDATE users SET name = ? WHERE id = ?`;
    db.run(query, [newName, id], function (err) {
        if (err) {
            console.error('Error updating user:', err.message);
        } else {
            console.log(`User with ID ${id} updated. Rows affected: ${this.changes}`);
        }
    });
}

// DELETE: Delete a user by ID
function deleteUser(id) {
    const query = `DELETE FROM users WHERE id = ?`;
    db.run(query, [id], function (err) {
        if (err) {
            console.error('Error deleting user:', err.message);
        } else {
            console.log(`User with ID ${id} deleted. Rows affected: ${this.changes}`);
        }
    });
}

// Example usage
db.serialize(() => {
    createUser('Alice', 'alice@example.com');
    createUser('Bob', 'bob@example.com');
    readUsers();
    updateUser(1, 'Alice Updated');
    deleteUser(2);
    readUsers();
});

// Close the database connection
db.close((err) => {
    if (err) {
        console.error('Error closing database:', err.message);
    } else {
        console.log('Database connection closed.');
    }
});

Explanation:

Database Connection: Connects to example.db or creates it if it doesn’t exist.
Table Creation: Creates a users table with id, name, and email fields.
CRUD Functions:

createUser: Inserts a new user.
readUsers: Fetches all users.
updateUser: Updates a user’s name by ID.
deleteUser: Deletes a user by ID.


Example Usage: Demonstrates the CRUD operations in sequence.

Run the Script:
Save the code in a file (e.g., crud.js) and execute it with:
Bashnode crud.js

This will perform the CRUD operations and log the results to the console.

