Below is a complete example of a Java GUI application using Swing to perform CRUD (Create, Read, Update, Delete) operations on an SQLite database. The application includes a simple form with text fields and buttons for interacting with the database.

Code Example:
Javaimport javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class SQLiteCRUDApp extends JFrame {
    private JTextField idField, nameField, ageField;
    private JButton createButton, readButton, updateButton, deleteButton;
    private Connection connection;

    public SQLiteCRUDApp() {
        // Initialize the GUI
        setTitle("SQLite CRUD Application");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(5, 2));

        // Add components
        add(new JLabel("ID:"));
        idField = new JTextField();
        add(idField);

        add(new JLabel("Name:"));
        nameField = new JTextField();
        add(nameField);

        add(new JLabel("Age:"));
        ageField = new JTextField();
        add(ageField);

        createButton = new JButton("Create");
        add(createButton);

        readButton = new JButton("Read");
        add(readButton);

        updateButton = new JButton("Update");
        add(updateButton);

        deleteButton = new JButton("Delete");
        add(deleteButton);

        // Initialize SQLite connection
        initializeDatabase();

        // Add button listeners
        createButton.addActionListener(e -> createRecord());
        readButton.addActionListener(e -> readRecord());
        updateButton.addActionListener(e -> updateRecord());
        deleteButton.addActionListener(e -> deleteRecord());
    }

    private void initializeDatabase() {
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:crud_app.db");
            Statement stmt = connection.createStatement();
            // Create table if it doesn't exist
            String sql = "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)";
            stmt.execute(sql);
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage());
        }
    }

    private void createRecord() {
        try {
            String sql = "INSERT INTO users (name, age) VALUES (?, ?)";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setString(1, nameField.getText());
            pstmt.setInt(2, Integer.parseInt(ageField.getText()));
            pstmt.executeUpdate();
            pstmt.close();
            JOptionPane.showMessageDialog(this, "Record Created!");
        } catch (SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    private void readRecord() {
        try {
            String sql = "SELECT * FROM users WHERE id = ?";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(idField.getText()));
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                nameField.setText(rs.getString("name"));
                ageField.setText(String.valueOf(rs.getInt("age")));
            } else {
                JOptionPane.showMessageDialog(this, "Record Not Found!");
            }
            rs.close();
            pstmt.close();
        } catch (SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    private void updateRecord() {
        try {
            String sql = "UPDATE users SET name = ?, age = ? WHERE id = ?";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setString(1, nameField.getText());
            pstmt.setInt(2, Integer.parseInt(ageField.getText()));
            pstmt.setInt(3, Integer.parseInt(idField.getText()));
            int rowsUpdated = pstmt.executeUpdate();
            pstmt.close();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Record Updated!");
            } else {
                JOptionPane.showMessageDialog(this, "Record Not Found!");
            }
        } catch (SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    private void deleteRecord() {
        try {
            String sql = "DELETE FROM users WHERE id = ?";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(idField.getText()));
            int rowsDeleted = pstmt.executeUpdate();
            pstmt.close();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Record Deleted!");
                nameField.setText("");
                ageField.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Record Not Found!");
            }
        } catch (SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            SQLiteCRUDApp app = new SQLiteCRUDApp();
            app.setVisible(true);
        });
    }
}


Key Features:


Database Initialization:

Creates an SQLite database file (crud_app.db) and a users table if it doesn't exist.



CRUD Operations:

Create: Inserts a new record into the database.
Read: Fetches a record by ID and displays it in the text fields.
Update: Updates an existing record by ID.
Delete: Deletes a record by ID.



GUI Components:

Text fields for ID, Name, and Age.
Buttons for each CRUD operation.



Error Handling:

Handles SQL exceptions and invalid input gracefully.




How to Run:

Save the code in a file named SQLiteCRUDApp.java.
Ensure you have the SQLite JDBC driver (sqlite-jdbc.jar) in your classpath. You can download it from Maven Repository.
Compile and run the program:Bashjavac SQLiteCRUDApp.java
java -cp .:sqlite-jdbc.jar SQLiteCRUDApp


Interact with the GUI to perform CRUD operations.

This example is a great starting point for building more complex Java-SQLite applications!

