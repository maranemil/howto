Hereâ€™s a complete example of a CRUD application using Elixir.js (a lightweight JavaScript framework) and SQLite as the database. This example demonstrates how to perform Create, Read, Update, and Delete operations.
Prerequisites

Install Node.js and SQLite.
Install the required packages:Bashnpm install express sqlite3 elixirjs body-parser




Code Example
1. Database Setup (database.js)
Javascriptconst sqlite3 = require('sqlite3').verbose();

// Initialize SQLite database
const db = new sqlite3.Database('./database.db', (err) => {
    if (err) {
        console.error('Error opening database:', err.message);
    } else {
        console.log('Connected to SQLite database.');
        db.run(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT NOT NULL UNIQUE
            )
        `);
    }
});

module.exports = db;


2. Server Setup (server.js)
Javascriptconst express = require('express');
const bodyParser = require('body-parser');
const db = require('./database');
const { Elixir } = require('elixirjs');

const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.json());
app.use(express.static('public'));

// Routes

// CREATE: Add a new user
app.post('/users', (req, res) => {
    const { name, email } = req.body;
    const query = `INSERT INTO users (name, email) VALUES (?, ?)`;
    db.run(query, [name, email], function (err) {
        if (err) {
            return res.status(400).json({ error: err.message });
        }
        res.json({ id: this.lastID, name, email });
    });
});

// READ: Get all users
app.get('/users', (req, res) => {
    const query = `SELECT * FROM users`;
    db.all(query, [], (err, rows) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json(rows);
    });
});

// UPDATE: Update a user by ID
app.put('/users/:id', (req, res) => {
    const { id } = req.params;
    const { name, email } = req.body;
    const query = `UPDATE users SET name = ?, email = ? WHERE id = ?`;
    db.run(query, [name, email, id], function (err) {
        if (err) {
            return res.status(400).json({ error: err.message });
        }
        res.json({ updated: this.changes });
    });
});

// DELETE: Delete a user by ID
app.delete('/users/:id', (req, res) => {
    const { id } = req.params;
    const query = `DELETE FROM users WHERE id = ?`;
    db.run(query, [id], function (err) {
        if (err) {
            return res.status(400).json({ error: err.message });
        }
        res.json({ deleted: this.changes });
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});


3. Frontend with Elixir.js (public/index.html)
Html<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elixir.js + SQLite CRUD</title>
    <script src="https://cdn.jsdelivr.net/npm/elixirjs"></script>
</head>
<body>
    <h1>User Management</h1>
    <div id="app"></div>

    <script>
        const app = new Elixir('#app', {
            users: [],
            newUser: { name: '', email: '' },

            async fetchUsers() {
                const response = await fetch('/users');
                this.users = await response.json();
            },

            async addUser() {
                await fetch('/users', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(this.newUser),
                });
                this.newUser = { name: '', email: '' };
                this.fetchUsers();
            },

            async deleteUser(id) {
                await fetch(`/users/${id}`, { method: 'DELETE' });
                this.fetchUsers();
            },

            render() {
                return `
                    <form onsubmit="this.addUser(); return false;">
                        <input type="text" placeholder="Name" bind="newUser.name" required />
                        <input type="email" placeholder="Email" bind="newUser.email" required />
                        <button type="submit">Add User</button>
                    </form>
                    <ul>
                        ${this.users.map(user => `
                            <li>
                                ${user.name} (${user.email})
                                <button onclick="this.deleteUser(${user.id})">Delete</button>
                            </li>
                        `).join('')}
                    </ul>
                `;
            }
        });

        app.fetchUsers();
    </script>
</body>
</html>


How It Works

Backend:

SQLite handles the database operations.
Express provides RESTful APIs for CRUD operations.


Frontend:

Elixir.js dynamically updates the UI based on the state.
Users can add, view, and delete records.



Running the App

Start the server:Bashnode server.js


Open http://localhost:3000 in your browser.

This setup provides a simple yet functional CRUD application using Elixir.js and SQLite.

