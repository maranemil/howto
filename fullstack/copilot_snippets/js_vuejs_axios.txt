Here is a complete example of how to use Axios in a Vue.js component to call a REST API endpoint and display the data.
Code Example:
Html<template>
  <div>
    <h1>Users List</h1>
    <!-- Display loading message -->
    <p v-if="loading">Loading...</p>
    <!-- Display error message -->
    <p v-if="error">{{ error }}</p>
    <!-- Display the list of users -->
    <ul v-if="users.length">
      <li v-for="user in users" :key="user.id">
        {{ user.name }} - {{ user.email }}
      </li>
    </ul>
  </div>
</template>

<script>
import axios from "axios";

export default {
  name: "UsersList",
  data() {
    return {
      users: [], // Array to store API data
      loading: false, // Loading state
      error: null, // Error message
    };
  },
  methods: {
    // Method to fetch data from the API
    async fetchUsers() {
      this.loading = true; // Set loading to true
      this.error = null; // Clear any previous errors
      try {
        const response = await axios.get("https://jsonplaceholder.typicode.com/users");
        this.users = response.data; // Assign API response to users
      } catch (err) {
        this.error = "Failed to load users. Please try again."; // Handle errors
      } finally {
        this.loading = false; // Set loading to false
      }
    },
  },
  // Fetch data when the component is mounted
  mounted() {
    this.fetchUsers();
  },
};
</script>

<style scoped>
h1 {
  color: #333;
}
p {
  color: red;
}
</style>

Explanation:


Template:

Displays a loading message while the API call is in progress.
Shows an error message if the API call fails.
Renders a list of users once the data is successfully fetched.



Script:

Uses axios.get() to fetch data from the REST API endpoint (https://jsonplaceholder.typicode.com/users).
Handles loading and error states for better user experience.
The mounted() lifecycle hook ensures the API call is made when the component is loaded.



Styling:

Scoped styles are used to ensure the styles apply only to this component.



Example Output:

If successful, it displays a list of users with their names and emails.
If there's an error, it shows a message like "Failed to load users. Please try again."

This example is simple, reusable, and demonstrates best practices for API calls in Vue.js.

https://v2.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html?redirect=true
https://www.geeksforgeeks.org/javascript/consuming-a-rest-api-with-axios-in-vue-js/
https://vuejsexamples.com/a-vue-js-3-crud-example-to-consume-rest-apis/
