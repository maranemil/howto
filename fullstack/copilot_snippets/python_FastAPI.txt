Here is a complete example of a FastAPI application implementing CRUD (Create, Read, Update, Delete) operations using SQLite as the database and SQLAlchemy as the ORM.
Code:
Pythonfrom fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

# Database setup
DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# FastAPI app
app = FastAPI()

# Model definition
class Item(Base):
    __tablename__ = "items"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, index=True)

# Create the database tables
Base.metadata.create_all(bind=engine)

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Create an item
@app.post("/items/", response_model=dict)
def create_item(name: str, description: str, db: Session = Depends(get_db)):
    new_item = Item(name=name, description=description)
    db.add(new_item)
    db.commit()
    db.refresh(new_item)
    return {"id": new_item.id, "name": new_item.name, "description": new_item.description}

# Read all items
@app.get("/items/", response_model=list)
def read_items(db: Session = Depends(get_db)):
    return db.query(Item).all()

# Read a single item by ID
@app.get("/items/{item_id}", response_model=dict)
def read_item(item_id: int, db: Session = Depends(get_db)):
    item = db.query(Item).filter(Item.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"id": item.id, "name": item.name, "description": item.description}

# Update an item
@app.put("/items/{item_id}", response_model=dict)
def update_item(item_id: int, name: str, description: str, db: Session = Depends(get_db)):
    item = db.query(Item).filter(Item.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    item.name = name
    item.description = description
    db.commit()
    db.refresh(item)
    return {"id": item.id, "name": item.name, "description": item.description}

# Delete an item
@app.delete("/items/{item_id}", response_model=dict)
def delete_item(item_id: int, db: Session = Depends(get_db)):
    item = db.query(Item).filter(Item.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    db.delete(item)
    db.commit()
    return {"message": "Item deleted successfully"}

Explanation:

Database Setup: SQLite is used with SQLAlchemy for ORM. The database file is test.db.
Model: The Item model represents the database table.
CRUD Endpoints:

Create: Adds a new item to the database.
Read: Fetches all items or a specific item by ID.
Update: Modifies an existing item.
Delete: Removes an item by ID.


Dependency Injection: get_db provides a database session to each endpoint.

Running the App:

Save the code in a file, e.g., main.py.
Install dependencies: pip install fastapi uvicorn sqlalchemy.
Run the app: uvicorn main:app --reload.
Access the API docs at http://127.0.0.1:8000/docs.

This example is fully functional and demonstrates basic CRUD operations.

