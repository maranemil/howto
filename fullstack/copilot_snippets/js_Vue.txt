Below is a complete example of a CRUD GUI application using Vue.js and SQLite. The SQLite database is accessed via WebAssembly (using the sql.js library) to run entirely in the browser.

Steps:

Install Vue.js: Use Vue CLI to create a Vue 3 project.
Install sql.js: Add SQLite WebAssembly support via npm install sql.js.
Create Components: Build a CRUD interface for managing a simple "Users" table.


Code Example:
1. Install Dependencies
Run the following commands:
Bashnpm install -g @vue/cli
vue create vue-sqlite-crud
cd vue-sqlite-crud
npm install sql.js

2. Main Vue Component (App.vue)
Vue<template>
  <div id="app">
    <h1>Vue.js + SQLite CRUD Example</h1>
    <form @submit.prevent="addUser">
      <input v-model="newUser.name" placeholder="Name" required />
      <input v-model="newUser.email" placeholder="Email" required />
      <button type="submit">Add User</button>
    </form>

    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Email</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="user in users" :key="user.id">
          <td>{{ user.id }}</td>
          <td>{{ user.name }}</td>
          <td>{{ user.email }}</td>
          <td>
            <button @click="editUser(user)">Edit</button>
            <button @click="deleteUser(user.id)">Delete</button>
          </td>
        </tr>
      </tbody>
    </table>

    <div v-if="editingUser">
      <h3>Edit User</h3>
      <form @submit.prevent="updateUser">
        <input v-model="editingUser.name" placeholder="Name" required />
        <input v-model="editingUser.email" placeholder="Email" required />
        <button type="submit">Update</button>
        <button @click="cancelEdit">Cancel</button>
      </form>
    </div>
  </div>
</template>

<script>
import initSqlJs from "sql.js";

export default {
  data() {
    return {
      db: null, // SQLite database instance
      users: [], // List of users
      newUser: { name: "", email: "" }, // New user form data
      editingUser: null, // User being edited
    };
  },
  async created() {
    // Initialize SQLite database
    const SQL = await initSqlJs();
    this.db = new SQL.Database();
    this.createTable();
    this.fetchUsers();
  },
  methods: {
    createTable() {
      // Create "users" table
      this.db.run(`
        CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT,
          email TEXT
        );
      `);
    },
    fetchUsers() {
      // Fetch all users from the database
      const result = this.db.exec("SELECT * FROM users;");
      this.users = result[0]
        ? result[0].values.map(([id, name, email]) => ({ id, name, email }))
        : [];
    },
    addUser() {
      // Insert a new user into the database
      const { name, email } = this.newUser;
      this.db.run("INSERT INTO users (name, email) VALUES (?, ?);", [name, email]);
      this.newUser = { name: "", email: "" };
      this.fetchUsers();
    },
    editUser(user) {
      // Set the user to be edited
      this.editingUser = { ...user };
    },
    updateUser() {
      // Update the user in the database
      const { id, name, email } = this.editingUser;
      this.db.run("UPDATE users SET name = ?, email = ? WHERE id = ?;", [name, email, id]);
      this.editingUser = null;
      this.fetchUsers();
    },
    deleteUser(id) {
      // Delete the user from the database
      this.db.run("DELETE FROM users WHERE id = ?;", [id]);
      this.fetchUsers();
    },
    cancelEdit() {
      // Cancel editing
      this.editingUser = null;
    },
  },
};
</script>

<style>
#app {
  font-family: Arial, sans-serif;
  margin: 20px;
}
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}
table, th, td {
  border: 1px solid #ddd;
}
th, td {
  padding: 8px;
  text-align: left;
}
form {
  margin-bottom: 20px;
}
</style>


Explanation:

SQLite Initialization: The sql.js library initializes an in-memory SQLite database.
CRUD Operations:

Create: Adds a new user to the database.
Read: Fetches all users from the database.
Update: Updates a user's details.
Delete: Removes a user from the database.


Dynamic UI: The table dynamically updates based on the database state.


Run the Application

Start the development server:Bashnpm run serve


Open the app in your browser at http://localhost:8080.

You now have a fully functional CRUD GUI application using Vue.js and SQLite!

