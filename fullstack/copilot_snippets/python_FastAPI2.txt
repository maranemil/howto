Hereâ€™s a complete example of a CRUD API using FastAPI with SQLite as the database, leveraging SQLAlchemy for ORM. This example includes endpoints for creating, reading, updating, and deleting records.

Install Required Dependencies
Run the following command to install the necessary libraries:
Bashpip install fastapi uvicorn sqlalchemy sqlite3


Code Example: main.py
Pythonfrom fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

# Database setup
DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# FastAPI app instance
app = FastAPI()

# Model definition
class Item(Base):
    __tablename__ = "items"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, index=True)

# Create database tables
Base.metadata.create_all(bind=engine)

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Create an item
@app.post("/items/", response_model=dict)
def create_item(name: str, description: str, db: Session = Depends(get_db)):
    new_item = Item(name=name, description=description)
    db.add(new_item)
    db.commit()
    db.refresh(new_item)
    return {"id": new_item.id, "name": new_item.name, "description": new_item.description}

# Read all items
@app.get("/items/", response_model=list)
def read_items(db: Session = Depends(get_db)):
    return db.query(Item).all()

# Read a single item by ID
@app.get("/items/{item_id}", response_model=dict)
def read_item(item_id: int, db: Session = Depends(get_db)):
    item = db.query(Item).filter(Item.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"id": item.id, "name": item.name, "description": item.description}

# Update an item
@app.put("/items/{item_id}", response_model=dict)
def update_item(item_id: int, name: str, description: str, db: Session = Depends(get_db)):
    item = db.query(Item).filter(Item.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    item.name = name
    item.description = description
    db.commit()
    db.refresh(item)
    return {"id": item.id, "name": item.name, "description": item.description}

# Delete an item
@app.delete("/items/{item_id}", response_model=dict)
def delete_item(item_id: int, db: Session = Depends(get_db)):
    item = db.query(Item).filter(Item.id == item_id).first()
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    db.delete(item)
    db.commit()
    return {"message": f"Item with ID {item_id} deleted successfully"}


How to Run the Application

Save the code in a file named main.py.
Start the server using Uvicorn:Bashuvicorn main:app --reload


Open your browser or API client (e.g., Postman) and navigate to http://127.0.0.1:8000/docs to access the interactive Swagger UI.


Endpoints

POST /items/ - Create a new item.
GET /items/ - Retrieve all items.
GET /items/{item_id} - Retrieve a specific item by ID.
PUT /items/{item_id} - Update an item by ID.
DELETE /items/{item_id} - Delete an item by ID.

This example is robust, handles errors, and is ready for testing.

