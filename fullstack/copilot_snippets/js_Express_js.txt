Here is a complete example of a CRUD (Create, Read, Update, Delete) REST API using Express.js and SQLite. This example demonstrates how to set up an Express server, connect to an SQLite database, and perform CRUD operations.
Code Example
Javascript// Import required modules
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');

// Initialize Express app
const app = express();
const PORT = 3000;

// Middleware to parse JSON requests
app.use(bodyParser.json());

// Initialize SQLite database
const db = new sqlite3.Database(':memory:', (err) => {
    if (err) {
        console.error('Error opening database:', err.message);
    } else {
        console.log('Connected to SQLite database.');
        // Create a sample table
        db.run(`
            CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT NOT NULL UNIQUE
            )
        `, (err) => {
            if (err) {
                console.error('Error creating table:', err.message);
            } else {
                console.log('Users table created.');
            }
        });
    }
});

// CREATE: Add a new user
app.post('/users', (req, res) => {
    const { name, email } = req.body;
    if (!name || !email) {
        return res.status(400).json({ error: 'Name and email are required.' });
    }
    const query = `INSERT INTO users (name, email) VALUES (?, ?)`;
    db.run(query, [name, email], function (err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.status(201).json({ id: this.lastID, name, email });
    });
});

// READ: Get all users
app.get('/users', (req, res) => {
    const query = `SELECT * FROM users`;
    db.all(query, [], (err, rows) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json(rows);
    });
});

// READ: Get a user by ID
app.get('/users/:id', (req, res) => {
    const query = `SELECT * FROM users WHERE id = ?`;
    db.get(query, [req.params.id], (err, row) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        if (!row) {
            return res.status(404).json({ error: 'User not found.' });
        }
        res.json(row);
    });
});

// UPDATE: Update a user by ID
app.put('/users/:id', (req, res) => {
    const { name, email } = req.body;
    if (!name || !email) {
        return res.status(400).json({ error: 'Name and email are required.' });
    }
    const query = `UPDATE users SET name = ?, email = ? WHERE id = ?`;
    db.run(query, [name, email, req.params.id], function (err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        if (this.changes === 0) {
            return res.status(404).json({ error: 'User not found.' });
        }
        res.json({ message: 'User updated successfully.' });
    });
});

// DELETE: Delete a user by ID
app.delete('/users/:id', (req, res) => {
    const query = `DELETE FROM users WHERE id = ?`;
    db.run(query, [req.params.id], function (err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        if (this.changes === 0) {
            return res.status(404).json({ error: 'User not found.' });
        }
        res.json({ message: 'User deleted successfully.' });
    });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

How to Run:

Save the code in a file, e.g., server.js.
Install dependencies:Bashnpm install express sqlite3 body-parser


Run the server:Bashnode server.js


Use tools like Postman or curl to test the API endpoints:

POST /users to create a user.
GET /users to fetch all users.
GET /users/:id to fetch a user by ID.
PUT /users/:id to update a user.
DELETE /users/:id to delete a user.



Notes:

The database is in-memory (:memory:), so data will be lost when the server restarts. For persistence, replace :memory: with a file path (e.g., ./database.db).
Proper error handling and validation are included for robustness.


