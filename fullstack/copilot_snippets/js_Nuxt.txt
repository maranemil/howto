Hereâ€™s a complete example of a CRUD application with a Nuxt.js frontend and SQLite database backend. This example uses Nuxt 3 and includes a simple GUI for managing a list of users.

Backend: SQLite Integration


Install Dependencies:
Bashnpm install sqlite3



Create SQLite Database:
Create a file db.sqlite and initialize it with a users table:
SqlCREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL
);



API Endpoints:
Create the following files in the /server/api directory.


/server/api/users/index.ts (GET and POST):
Tsimport { Database } from 'sqlite3';

const db = new Database('./db.sqlite');

export default defineEventHandler(async (event) => {
  if (event.req.method === 'GET') {
    return new Promise((resolve, reject) => {
      db.all('SELECT * FROM users', (err, rows) => {
        if (err) reject(err);
        resolve(rows);
      });
    });
  }

  if (event.req.method === 'POST') {
    const body = await readBody(event);
    return new Promise((resolve, reject) => {
      db.run(
        'INSERT INTO users (name, email) VALUES (?, ?)',
        [body.name, body.email],
        function (err) {
          if (err) reject(err);
          resolve({ id: this.lastID, ...body });
        }
      );
    });
  }
});



/server/api/users/[id].ts (PUT and DELETE):
Tsimport { Database } from 'sqlite3';

const db = new Database('./db.sqlite');

export default defineEventHandler(async (event) => {
  const id = event.context.params.id;

  if (event.req.method === 'PUT') {
    const body = await readBody(event);
    return new Promise((resolve, reject) => {
      db.run(
        'UPDATE users SET name = ?, email = ? WHERE id = ?',
        [body.name, body.email, id],
        function (err) {
          if (err) reject(err);
          resolve({ id, ...body });
        }
      );
    });
  }

  if (event.req.method === 'DELETE') {
    return new Promise((resolve, reject) => {
      db.run('DELETE FROM users WHERE id = ?', [id], function (err) {
        if (err) reject(err);
        resolve({ success: true });
      });
    });
  }
});






Frontend: Nuxt.js GUI


Install Tailwind CSS (for styling):
Bashnpm install -D tailwindcss postcss autoprefixer
npx tailwindcss init

Configure tailwind.config.js and add Tailwind to your CSS.


Create a CRUD Page:

/pages/index.vue:Vue<template>
  <div class="p-8">
    <h1 class="text-2xl font-bold mb-4">User Management</h1>

    <!-- Add User Form -->
    <form @submit.prevent="addUser" class="mb-6">
      <input v-model="newUser.name" placeholder="Name" class="border p-2 mr-2" />
      <input v-model="newUser.email" placeholder="Email" class="border p-2 mr-2" />
      <button type="submit" class="bg-blue-500 text-white px-4 py-2">Add User</button>
    </form>

    <!-- User List -->
    <table class="border-collapse border border-gray-300 w-full">
      <thead>
        <tr>
          <th class="border border-gray-300 p-2">ID</th>
          <th class="border border-gray-300 p-2">Name</th>
          <th class="border border-gray-300 p-2">Email</th>
          <th class="border border-gray-300 p-2">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="user in users" :key="user.id">
          <td class="border border-gray-300 p-2">{{ user.id }}</td>
          <td class="border border-gray-300 p-2">
            <input v-model="user.name" class="border p-1" />
          </td>
          <td class="border border-gray-300 p-2">
            <input v-model="user.email" class="border p-1" />
          </td>
          <td class="border border-gray-300 p-2">
            <button @click="updateUser(user)" class="bg-green-500 text-white px-2 py-1 mr-2">Update</button>
            <button @click="deleteUser(user.id)" class="bg-red-500 text-white px-2 py-1">Delete</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';

const users = ref([]);
const newUser = ref({ name: '', email: '' });

const fetchUsers = async () => {
  users.value = await $fetch('/api/users');
};

const addUser = async () => {
  const user = await $fetch('/api/users', {
    method: 'POST',
    body: newUser.value,
  });
  users.value.push(user);
  newUser.value = { name: '', email: '' };
};

const updateUser = async (user) => {
  await $fetch(`/api/users/${user.id}`, {
    method: 'PUT',
    body: user,
  });
};

const deleteUser = async (id) => {
  await $fetch(`/api/users/${id}`, { method: 'DELETE' });
  users.value = users.value.filter((user) => user.id !== id);
};

onMounted(fetchUsers);
</script>

<style>
/* Add any custom styles here */
</style>






How It Works:


Backend:

SQLite stores user data.
API endpoints handle CRUD operations.



Frontend:

A simple form allows adding users.
A table displays users with inline editing and delete functionality.



Run the Application:
Bashnpm run dev



You now have a fully functional Nuxt.js + SQLite CRUD application with a GUI!

