Hereâ€™s a complete example of a CRUD application using Laravel Livewire with an SQLite database. This example demonstrates managing a simple Post model with fields like title and content.

Step 1: Install Laravel and Livewire
Bashcomposer create-project laravel/laravel livewire-crud
cd livewire-crud
composer require livewire/livewire


Step 2: Configure SQLite Database

Open the .env file and set the database connection to SQLite:EnvDB_CONNECTION=sqlite
DB_DATABASE=/absolute/path/to/database.sqlite


Create the SQLite database file:Bashtouch database/database.sqlite




Step 3: Create the Post Model and Migration
Run the following command to generate the model and migration:
Bashphp artisan make:model Post -m

Update the posts migration file in database/migrations:
Phppublic function up()
{
    Schema::create('posts', function (Blueprint $table) {
        $table->id();
        $table->string('title');
        $table->text('content');
        $table->timestamps();
    });
}

Run the migration:
Bashphp artisan migrate


Step 4: Create Livewire Component
Generate a Livewire component for managing posts:
Bashphp artisan make:livewire PostCrud


Step 5: Implement CRUD Logic in the Component
Update app/Http/Livewire/PostCrud.php:
Phpnamespace App\Http\Livewire;

use Livewire\Component;
use App\Models\Post;

class PostCrud extends Component
{
    public $posts, $title, $content, $post_id;
    public $isEdit = false;

    protected $rules = [
        'title' => 'required|string|max:255',
        'content' => 'required|string',
    ];

    public function render()
    {
        $this->posts = Post::all();
        return view('livewire.post-crud');
    }

    public function resetFields()
    {
        $this->title = '';
        $this->content = '';
        $this->post_id = null;
        $this->isEdit = false;
    }

    public function store()
    {
        $this->validate();
        Post::create(['title' => $this->title, 'content' => $this->content]);
        session()->flash('message', 'Post created successfully.');
        $this->resetFields();
    }

    public function edit($id)
    {
        $post = Post::findOrFail($id);
        $this->post_id = $post->id;
        $this->title = $post->title;
        $this->content = $post->content;
        $this->isEdit = true;
    }

    public function update()
    {
        $this->validate();
        $post = Post::findOrFail($this->post_id);
        $post->update(['title' => $this->title, 'content' => $this->content]);
        session()->flash('message', 'Post updated successfully.');
        $this->resetFields();
    }

    public function delete($id)
    {
        Post::findOrFail($id)->delete();
        session()->flash('message', 'Post deleted successfully.');
    }
}


Step 6: Create the Blade View
Create resources/views/livewire/post-crud.blade.php:
Html<div>
    <h1>Post Management</h1>

    @if (session()->has('message'))
        <div style="color: green;">{{ session('message') }}</div>
    @endif

    <form wire:submit.prevent="{{ $isEdit ? 'update' : 'store' }}">
        <input type="text" wire:model="title" placeholder="Title">
        @error('title') <span style="color: red;">{{ $message }}</span> @enderror

        <textarea wire:model="content" placeholder="Content"></textarea>
        @error('content') <span style="color: red;">{{ $message }}</span> @enderror

        <button type="submit">{{ $isEdit ? 'Update' : 'Create' }}</button>
    </form>

    <hr>

    <table border="1">
        <thead>
            <tr>
                <th>Title</th>
                <th>Content</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach ($posts as $post)
                <tr>
                    <td>{{ $post->title }}</td>
                    <td>{{ $post->content }}</td>
                    <td>
                        <button wire:click="edit({{ $post->id }})">Edit</button>
                        <button wire:click="delete({{ $post->id }})">Delete</button>
                    </td>
                </tr>
            @endforeach
        </tbody>
    </table>
</div>


Step 7: Add Livewire to Layout
Include Livewire in resources/views/layouts/app.blade.php:
Html<!DOCTYPE html>
<html>
<head>
    <title>Laravel Livewire CRUD</title>
    @livewireStyles
</head>
<body>
    {{ $slot }}
    @livewireScripts
</body>
</html>


Step 8: Route Configuration
Add the route in routes/web.php:
Phpuse App\Http\Livewire\PostCrud;

Route::get('/', PostCrud::class);


Step 9: Run the Application
Start the development server:
Bashphp artisan serve

Visit http://127.0.0.1:8000 to manage posts.

This example demonstrates a fully functional CRUD application using Laravel Livewire and an SQLite database.

